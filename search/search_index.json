{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Antura Docs","text":"<p>This documentation website is dedicated to Teachers, Designers and Developers who want to work with Antura. It is maintained by the Antura Core Team directly inside the project repository.</p> <ul> <li>Antura Docs: docs.antura.org</li> <li>GitHub project: github.com/vgwb/Antura</li> <li>Public Website: www.antura.org</li> </ul>"},{"location":"#issues-and-contacts","title":"Issues and Contacts","text":"<p>Did you find an issue or error in these docs or have some suggestions? please help us improve by opening a issue</p>"},{"location":"#license","title":"License","text":"<p>Antura is licensed under the BSD 2-clause \"Simplified\" License and the Creative Commons Attribution 4.0 International. Copyright TH K\u00f6ln / Cologne Game Lab, Video Games Without Borders &amp; Wixel Studios.</p> <p></p>"},{"location":"About/Credits/","title":"Credits","text":"<p>Based on the original game Antura and the Letters - Arabic</p> <p>DEVELOPED BY</p> <ul> <li>Video Games Without Borders </li> <li>TH K\u00f6ln / Cologne Game Lab</li> </ul> <p>IN COLLABORATION WITH</p> <ul> <li>Wixel Studios </li> <li>Institut Fran\u00e7ais du Maroc  </li> <li>Asociaci\u00f3n Oleaje  </li> <li>Zone 3:45  </li> <li>Partnership Afghanistan Canada  </li> <li>Code To Inspire  </li> <li>Amerike: Instituto de Estudios Universitarios  </li> </ul>"},{"location":"About/Credits/#dev-team","title":"DEV TEAM","text":"<p>PROJECT LEAD AND PRODUCER Francesco Cavallari</p> <p>BRAND &amp; RESEARCH DIRECTOR Prof. Dr. Emmanuel Guardiola (Cologne Game Lab)</p> <p>R&amp;D AND PRODUCTION Stefano Cecere</p> <p>LOCALIZATION COORDINATOR AND PRODUCTION Chad Comeau  </p> <p>PROGRAMMING Michele Pirovano  </p> <p>ADDITIONAL PROGRAMMING Alejandro J. Zbrun Giacomo \u201cSugni\u201d Salvadori  </p> <p>UI/UX DESIGN Daniele Giardini</p> <p>ART &amp; GRAPHIC DESIGN Yadira Marin</p> <p>2D DRAWINGS Cristina Segura Toro (Margarito Estudio) Pierre Schl\u00f6mp</p> <p>VOICE RECORDING &amp; EDITING Tabea Steinhauer</p> <p>MUSIC, AUDIO DESIGN &amp; FRENCH TRANSLATION Hamza Chioua</p> <p>FRENCH VOICE ACTING Mouna Belgrini</p> <p>ARABIC TRANSLATION &amp; VOICE ACTING Mounir Oubry</p> <p>ARABIC TRANSLATION &amp; TESTING Wassim Bassil</p> <p>DARI TRANSLATION, VOICE RECORDING &amp; TESTING Hasib Rassa (Code To Inspire)</p> <p>DARI VOICE ACTING Alem Daneshyar</p> <p>DARI SINGING Tahera Nikmanesh</p> <p>DARI TESTING Yaganeh Saber Nastaran Fazli</p> <p>DARI PROOFREADING &amp; REVIEW Sahar Habib (Partnership Afghanistan Canada) Shabnam Hazrati (Partnership Afghanistan Canada)  </p> <p>ENGLISH VOICE ACTING Lydia V. Lord</p> <p>ENGLISH VOICE RECORDING &amp; EDITING Carlos Casco (Krill Audio)</p> <p>UKRAINIAN TRANSLATION Yurii Mashtalir Viktor Yakubiv Myroslava Osadcha</p> <p>UKRAINIAN PROOFREADING Oleksandra Pinchuk</p> <p>UKRAINIAN VOICE ACTING Dmytro Zabarylo</p> <p>POLISH PROOFREADING Agnieszka Kwasow Translations</p> <p>POLISH VOICE ACTING Sonia Fizek</p> <p>RUSSIAN TRANSLATION Iuliia Chesnok</p> <p>UKRAINIAN &amp; POLISH TESTING Joanna Nowosad  </p> <p>RUSSIAN PROOFREADING &amp; VOICE ACTING Arkadijs Gribacovs</p> <p>ROMANIAN TRANSLATION Ioana Sandu C\u0103t\u0103lina Sandu  </p> <p>ROMANIAN PROOFREADING Adela Ichimescu</p> <p>ROMANIAN VOICE ACTING Monica Constantin</p> <p>HUNGARIAN TRANSLATION Gy\u00f6rgy Droste Po\u00f3r Anik\u00f3</p> <p>HUNGARIAN PROOFREADING Po\u00f3r Anik\u00f3</p> <p>HUNGARIAN VOICE ACTING Gy\u00f6rgy Droste</p> <p>GERMAN TRANSLATION Alexander Oemus</p> <p>GERMAN PROOFREADING &amp; VOICE ACTING Tabea Steinhauer</p> <p>SPANISH VOICE ACTING &amp; RECORDING Sergio Arturo Garc\u00eda Hern\u00e1ndez</p> <p>ITALIAN VOICE ACTING &amp; RECORDING Stefano Cecere</p> <p>LEARN ENGLISH CURRICULUM &amp; PEDAGOGY Jos\u00e9 Manuel Salado Fern\u00e1ndez Pablo Garc\u00eda Centeno</p> <p>COOPERATION ATTACH\u00c9 FOR THE FRENCH LANGUAGE Anouchka Kerouas (Institut Fran\u00e7ais du Maroc)</p> <p>SCIENTIFIC TRANSLATION COORDINATOR INSPECTOR Amina Alaoui (AREF de la r\u00e9gion Casablanca-Settat)</p>"},{"location":"About/Credits/#special-thanks","title":"SPECIAL THANKS","text":"<ul> <li>Kateryna Holubinka  </li> <li>Pauline M\u00fcller  </li> <li>Morris Andreas  </li> <li>Alexander Boccia  </li> <li>Alexandra Petrus  </li> <li>Mark and Victoriya Andriyets  </li> <li>Fabio Cecere  </li> <li>Miriam Lozano  </li> <li>Montse Villar  </li> <li>Mar Mas  </li> <li>Florencia Fern\u00e1ndez Marinovic  </li> <li>Victoria Asti  </li> <li>Roberto Lambertini  </li> <li>Luc\u00eda Sayagu\u00e9s  </li> <li>Matias Melfi  </li> <li>Valentina Hern\u00e1ndez  </li> <li>Sebastian &amp; Alexandra Boros  </li> <li>Dani Arguedas  </li> <li>David Osorio  </li> <li>Roger Sas</li> <li>Alessandra Giancaterino (Conexi\u00f3n Creando Puentes)</li> <li>Billy Snyder (Futura Handwritten font)  </li> <li>Plan Ceibal  </li> <li>Grupo de 3er a\u00f1o A de la Escuela 81 de Montevideo  </li> <li>Andalucia Open Future: La Farola, M\u00e1laga  </li> <li>Polo de Contenidos Digitales, M\u00e1laga  </li> <li>Centro de Innovaci\u00f3n Social La Noria, M\u00e1laga  </li> <li>Techfugees  </li> <li>UNHCR NGO Innovation Award Team  </li> </ul> <p>A VERY SPECIAL THANKS TO UBISOFT for their support of this game!</p>"},{"location":"About/Credits/#original-game-antura-and-the-letters-arabic","title":"ORIGINAL GAME ANTURA AND THE LETTERS - ARABIC","text":"<p>DEVELOPED BY</p> <ul> <li>TH K\u00f6ln / Cologne Game Lab</li> <li>Video Games Without Borders</li> <li>Wixel Studios</li> </ul>"},{"location":"About/Credits/#core-team","title":"CORE TEAM","text":"<p>PROJECT LEAD AND CREATIVE DIRECTOR Prof. Dr. Emmanuel Guardiola (TH K\u00f6ln / Cologne Game Lab)</p> <p>ART DIRECTOR AND LEAD ARTIST Gaetano Leonardi</p> <p>GAME DESIGNER AND UX/UI MASTER Daniele Giardini</p> <p>LEAD PROGRAMMERS Paolo Bragonzi Davide Barbieri Michele Pirovano  </p> <p>MUSIC AND SOUND DESIGNER Hamza Chioua</p> <p>R&amp;D AND PRODUCTION Stefano Cecere</p> <p>ASSOCIATE PRODUCER AND ADDITIONAL GAME DESIGN Ziad Feghali</p> <p>PRODUCER AND ADDITIONAL GAME DESIGN Francesco Cavallari</p>"},{"location":"About/Credits/#th-koln-cologne-game-lab","title":"TH K\u00d6LN / COLOGNE GAME LAB","text":"<p>PROJECT LEAD AND CREATIVE DIRECTOR Prof. Dr. Emmanuel Guardiola</p> <p>PSYCHOLOGY ADVISOR Dr. Marc Wittmann</p> <p>MAIN PEDAGOGICAL ADVISOR Saf\u00e2a El Ouafi</p> <p>PEDAGOGICAL EXPERTS Mouna Barmada Bahjat Moura</p> <p>PLAYTESTS AND FIELD TESTS COORDINATORS Lubna Odeh (CNAM Paris) Dr Yavuz Samur (Bahcesehir University Istanbul) Fatimaezzahra Benmarrakchi (Universit\u00e9 Chouaib Doukkali) Dr Antoun Yaacoub (Universit\u00e9 Libanaise Beirut)  </p> <p>DATA ANALYST Thiago Gatti</p> <p>ADMINISTRATION COORDINATION Sebastian Felzmann Katharina Tillmanns</p> <p>LEAD MARKETING STRATEGIST Odile Limpach</p> <p>COMMUNICATION COORDINATOR Imaad Manzar</p> <p>PR COORDINATOR Judith Neumann</p> <p>DIGITAL MARKETING COORDINATOR AND 2D ILLUSTRATOR Pierre Schl\u00f6mp</p> <p>PROMOTIONAL ART AND DESIGN Karen Barbosa</p>"},{"location":"About/Credits/#video-games-without-borders","title":"VIDEO GAMES WITHOUT BORDERS","text":"<p>PRODUCER AND ADDITIONAL GAME DESIGN Francesco Cavallari</p> <p>ART DIRECTOR AND LEAD ARTIST Gaetano Leonardi</p> <p>GAME DESIGNER AND UX/UI MASTER Daniele Giardini</p> <p>LEAD PROGRAMMERS Paolo Bragonzi Davide Barbieri Michele Pirovano</p> <p>MUSIC AND SOUND DESIGNER Hamza Chioua</p> <p>R&amp;D AND PRODUCTION Stefano Cecere</p> <p>PROGRAMMERS Armando Teora Elena Blanes Dario Oliveri</p> <p>3D ART PRODUCER Andrey Sazonov</p> <p>3D MODELER Andrey Kolesnikov</p> <p>3D ANIMATOR Dmitriy Tunik</p> <p>2D ILLUSTRATOR Ksenia Glebova</p> <p>PR &amp; COMMUNICATION Mar Mas</p> <p>ADMINISTRATION Montse Villar</p>"},{"location":"About/Credits/#wixel-studios","title":"WIXEL STUDIOS","text":"<p>ASSOCIATE PRODUCER AND ADDITIONAL GAME DESIGN Ziad Feghali</p> <p>PROGRAMMERS George Habr Hussam Kazah Joseph Saade Fouad Tabsh Modar Dergham  </p> <p>ARABIC COPYWRITING Sary Al-Assad</p> <p>TESTERS Sleiman Hammoud Ali Mzahem Remi Abdel Rassoul Pamela Al Alam Rami Bordokani  </p>"},{"location":"About/Credits/#university-of-verona","title":"UNIVERSITY OF VERONA","text":"<p>MASTER IN COMPUTER GAMES DEVELOPMENT</p> <p>LAB SUPERVISOR Diego Zamprogno</p> <p>MASTER STUDENTS Marco Comencini Federico Gobbato Enrico Pernigo Simone Pessotto Simone Sommaggio Edoardo Tosatti  </p> <p>MASTER COORDINATOR Umberto Castellani</p>"},{"location":"About/Credits/#voices","title":"VOICES","text":"<p>THE KEEPER Fares Al-Helou</p> <p>VOCABULARY, TUTORIAL &amp; SONGS Ibtissam Shakar</p>"},{"location":"About/Credits/#marketing-and-communication-contributors","title":"MARKETING AND COMMUNICATION CONTRIBUTORS","text":"<p>SENIOR MARKETING AND PR SPECIALIST (ELECTRONIC ARTS) Martin Lorber</p> <p>MARKETING AND PR SPECIALIST (ELECTRONIC ARTS) Ana Corina Arredondo</p> <p>COMMUNICATION SPECIALISTS (UBISOFT BLUE BYTE) Stefan B\u00f6hne Nils Ehlert</p> <p>DIGITAL VISIBILITY SPECIALIST (UBISOFT BLUE BYTE) Henning Wasserfuhr</p> <p>DIGITAL MARKETING AND VISIBILITY EXPERT (UBISOFT SAN FRANCISCO) Rachel Alves</p> <p>POLICY CONTRIBUTOR (OSBORNE CLARKE) Konstantin Ewald</p> <p>MENA MARKETING AND PR SPECIALIST  (ABDULLAH AND EBTISAM\u2019S CHARITABLE ASSOCIATION) Zaina Alyemni</p>"},{"location":"About/Credits/#other-contributors","title":"OTHER CONTRIBUTORS","text":"<p>PRODUCER (ALPHA VERSION) Coline Pannier </p> <p>3D CHARACTER ANIMATOR (ALPHA VERSION) Prof. Nanette Kaulig (TH K\u00f6ln / Cologne Game Lab)</p> <p>3D CHARACTER MODELING (ALPHA VERSION) Sebastian Schoellhammer</p> <p>ARTIST  (ALPHA VERSION) Reine Abbas</p> <p>ARTIST  (CONCEPT  PHASE) Delphine Soriano</p> <p>DEVELOPER (CONCEPT PHASE) Dr. Zahen Malla Osman</p>"},{"location":"About/Credits/#scientific-board","title":"SCIENTIFIC BOARD","text":"<p>UNHCR Jackie Strecker</p> <p>CNAM PARIS Prof. Stephane Natkin</p> <p>UNIVERSITY OF TAMPERE Dr. Juho Hamari</p>"},{"location":"About/Credits/#special-thanks-to","title":"SPECIAL THANKS TO","text":"<ul> <li>Gaby Gehlen (Wiku K\u00f6ln)  </li> <li>Sultana Denise Marquardt (Wiku K\u00f6ln)  </li> <li>Till Lupertz (German Red Cross)  </li> <li>Liv Marte Kristiansen Nordhaug (Norad)  </li> <li>Alf Inge Wang (Norwegian University of Science)  </li> <li>Leila Chihab  </li> <li>Roberto Mangiafico  </li> <li>Miriam Lozano  </li> <li>Curtis Maughan  </li> <li>Mai Saki  </li> <li>Aur\u00e9lie Perrin  </li> <li>B\u00e1rbara Cejudo  </li> <li>Efsaia Vardoulaki  </li> <li>Suany Lima  </li> <li>Fabio Cecere  </li> </ul> <p>PRODUCED WITH THE GENEROUS SUPPORT OF - Unity - TextMesh Pro - Slack - Abdullah &amp; Ebtisam's Charitable Association</p> <p>AND THE SUPPORT OF - DOTween (C# library) - Arabic Support (C# library) - GitHub</p> <p>The original Arabic project was funded by the Norwegian Ministry of Foreign Affairs as part of EduApp4Syria innovation competition.</p>"},{"location":"Educators/pedagody/","title":"Pedagogy","text":""},{"location":"Educators/pedagody/#summary","title":"Summary","text":"<p>Learn with Antura is a game for the introduction to English (and mamny other languages) as a second language, aimed at children between 5 and 8 years old; equivalent to the contents of PreA1 according to the Common European Framework of Reference for Languages. Throughout the game, children learn the entire English alphabet, more than 250 words and a series of phrases and expressions. words and a series of simple phrases and expressions in a playful way.</p> <p>The game is organized in 6 different worlds each world includes between 15 and 20 didactic 20 didactic units, each one with a specific pedagogical specific pedagogical objective that is learned learning thanks to a series of mini-games and a final and concludes with a final test to reinforce the learning process.</p> <p>To pass the different mini-games words, images and sounds so that the learning process sounds so that the learning process and the learning process and progress in the game go hand in hand.</p>"},{"location":"Educators/pedagody/#current-learning-modules","title":"Current Learning Modules","text":""},{"location":"Educators/pedagody/#learning-a-new-language","title":"Learning a new Language","text":"<ul> <li>Learn English</li> <li>Learn French</li> <li>Learn German</li> <li>Learn Hungarian</li> <li>Learn Italian</li> <li>Learn Polish</li> <li>Learn Romanian</li> <li>Learn Spanish</li> </ul>"},{"location":"Educators/pedagody/#learning-to-read-your-own-language","title":"Learning to read your own language","text":"<ul> <li>Learn To Read Arabic</li> <li>Learn To Read Persian Dari</li> <li>Learn To Read Pashto (in progress)</li> <li>Learn To Read Ukrainian (in progress)</li> </ul>"},{"location":"Educators/pedagody/#supported-native-languages","title":"Supported native languages","text":"<p>(the language used to speak to the player)</p> <ul> <li>Arabic</li> <li>English</li> <li>French</li> <li>German</li> <li>Hungarian</li> <li>Italian</li> <li>Pashto (in progress)</li> <li>Persian Dari</li> <li>Polish</li> <li>Romanian</li> <li>Russian</li> <li>Spanish</li> <li>Ukrainian</li> </ul>"},{"location":"Educators/pedagody/#objectives","title":"Objectives","text":"<p>Learn with Antura aims to introduce children between 5 and 8 years old to the English language without the need to have had previous contact with it; this can take place in both academic and informal contexts, serving as a teaching support tool and a playful approach to learning English as a second language.</p> <p>Our main objective will be to familiarize children with basic English vocabulary and with the sonority of English at a level equivalent to PreA1; all this with great attention to the speaking part, which becomes a constant element throughout the game.</p> <p>The vocabulary chosen consists of more than 250 words organized in thematic groups as well as various expressions and phrases that will serve to introduce syntactic and grammatical questions that, although they are outside the explicit contents, appear in a transversal way with the objective of educating the ear.</p> <p>For the selection of this vocabulary we have taken into account the use of close and everyday objects together with the phonetic component so that we have all the phonemes represented in it.</p>"},{"location":"Educators/pedagody/#methodology","title":"Methodology","text":"<p>Learn English with Antura bases its pedagogical model on meaningful learning through a playful learning environment reinforced by a reward system. It complements learning models based on the communicative approach and oral communication with game systems that favor Stealth Learning, a method that allows children to focus on the game and the challenges it entails, without really having to make an effort to learn or memorize concepts.</p> <p>The game introduces new concepts without any theoretical explanation, it simply proposes a challenge and guides the player through the first steps so that he/she can then advance on his/her own, creating his/her own mental model of knowledge. Each time the player interacts with a letter or a word, the game pronounces it in the correct way, reinforcing the learning process.</p> <p>The content has been organized around the learning of words through pictograms, locutions and their written forms so that they are related in a triangular way giving rise to inferences and deductions that serve to grasp the proposed vocabulary through its use in the various game mechanics.</p> <p>In Learn English with Antura, priority is given to the listening process, the association of sound and pictogram and the sonority of all clickable elements to reinforce at all times the phonetic issues and familiarization with the English sonority.</p> <p>In addition, the game offers rewards in the form of cookies that can be used to purchase aesthetic accessories to add to Antura's character, who will be our companion in our adventures throughout the game. This way we add an additional motivation to complete the different levels properly and to use the application frequently.</p>"},{"location":"Educators/pedagody/#pedagogical-path","title":"Pedagogical path","text":"<p>The game is composed of 6 different worlds that we will go through playing the different didactic units and tests. Each of the worlds includes several groups of words, in each one we will work with around 50 words organized in groups of between 8 and 12.</p> <p>Each group of words will be introduced through blocks of mini-games in a progressive way, first presenting games with the objective of making us discover the words and then later challenging us to recognize the words previously presented. At the end of each 2 or 3 groups of words there will be a series of mini-games dedicated to familiarize us with their use in sentences. At the end of each group of mini-games, there are settlement phases with specific tests to review the contents before advancing.</p> <p>We start with an introductory world where you will become familiar with English phonetics through the alphabet and where we will see the first vocabulary words that will be added transversely to the rest of the worlds. The different worlds are as follows:</p> <ol> <li>Alphabet</li> <li>Nature and animals</li> <li>Home, objects and clothes</li> <li>City and family</li> <li>Body parts and food</li> <li>Calendar, Colors and Numbers</li> </ol>"},{"location":"Educators/pedagody/#development","title":"Development","text":"<p>This is the flowchart of the entire application with the transitions between the different sections of the application:</p> <p></p>"},{"location":"Educators/pedagody/#start","title":"Start","text":"<p>The first screen of the game offers the possibility to create a new profile or to continue playing with a previously created profile. Also from this section you can access the options (e.g. to turn on or off the background music) and the section reserved for the teacher.</p>"},{"location":"Educators/pedagody/#profile-creation","title":"Profile creation","text":"<p>The game allows you to create custom profiles with different faces, colors for the skin, hair and background of your avatar. For the creation of teacher profiles we will have to access the Teacher Section.</p>"},{"location":"Educators/pedagody/#gifts-for-antura","title":"Gifts for Antura","text":"<p>As soon as you create a profile you will receive the first gift to customize Antura. You will receive more gifts every time you finish a didactic unit, after completing each settlement phase. In total there are more than 90 gifts in the game, each one customizable with 16 color combinations.</p>"},{"location":"Educators/pedagody/#antura-space","title":"Antura Space","text":"<p>In this section the player can customize Antura with the gifts he has received and can also use the bone-shaped cookies that he will earn by advancing in the game.</p> <p>The cookies can be thrown to Antura or can be spent to buy decorations for her room. In addition, with the cookies the player can take pictures of Antura in her room. The photos are automatically stored in the device's photo gallery.</p>"},{"location":"Educators/pedagody/#the-map","title":"The map","text":"<p>Learning the English language is represented by a journey through 6 worlds, each with a different environment: mountains, islands, prairie, desert, forest and city.</p> <p>The journey is divided into many steps and each time the player successfully completes a game session (mini-game sequence or quiz) he advances to the next step. This does not prevent him to go back and play again a previous session, either to review the didactic contents or to get the highest score (3 stars). The map not only allows you to visualize very explicitly the progress along the journey, it also allows you to access other key sections such as Antura's room and the dictionary.</p>"},{"location":"Educators/pedagody/#statistics-and-dictionary","title":"Statistics and dictionary","text":"<p>This section allows the player to check his main statistics and consult the dictionary. The dictionary includes all the selected words and an alphabet that shows the different phonemes associated with each spelling. In addition, all the mini-games can be launched directly from this section, to practice with them.</p>"},{"location":"Educators/pedagody/#mood","title":"Mood","text":"<p>When a player launches the game and starts playing with an existing profile, the first section presented to him/her is this one; it will appear the first time the game is started each day. We are in a moment of reflection on their mood thanks to a simple question: \"How are you feeling today?\" It is answered simply by touching one of the 5 emoticons that appear on the screen.</p>"},{"location":"Educators/pedagody/#daily-prizes","title":"Daily prizes","text":"<p>Every day the player will receive cookies just for launching the game and answering the question about his/her mood. The number of cookies increases each time the player plays again the next day, motivating a daily use of the game.</p>"},{"location":"Educators/pedagody/#teaching-section","title":"Teaching Section","text":"<p>This section is protected by a question (so children cannot access it on their own) and will offer all the functionalities exclusively for teachers: Possibility to create a Teacher profile to freely access all the contents of the game. Possibility to consult the progress of the profile as an external observer.</p> <p>CODE TO ACCESS THE TEACHER PROFILE: press the green button 5 times and then press the red button once. When entering with the teacher profile we will start at the end of the game, right at the end of the last didactic unit of the last world; this way we will be able to move around the map without restrictions and access all the didactic units.</p>"},{"location":"Educators/pedagody/#educational-units","title":"Educational units","text":"<p>Each world includes between 15 and 20 teaching units, each with a specific pedagogical objective. Each unit consists of a series of mini-games and concludes with a final test to consolidate learning. The didactic units will be marked on the map by threaded markers, the settlement phases by pencils and the units dedicated to experimenting with phrases by mailboxes.</p>"},{"location":"Educators/pedagody/#vocabulary-content","title":"Vocabulary Content","text":""},{"location":"Educators/pedagody/#world-1-alphabet","title":"World 1: Alphabet","text":"<p>There are 5 letter groups:</p> <ol> <li>A, E, C, R, S, T</li> <li>O, D, L, M, N</li> <li>I, F, G, H, W</li> <li>U, B, K, P, V</li> <li>Y, J, Q, X, Z</li> </ol> <p>For each group of letters the playr will repeat the same pedagogucal steps and activities, oerganized i nthe following sequence of 3 didactical units:</p> <p>1. Discover Letters and their name</p> <ul> <li>ColorTickle_LetterName </li> <li>ThrowBalls_LetterName </li> <li>FastCrowd_LetterName </li> <li>Assessment_LetterName (test)</li> </ul> <p>2. Recognize letters by its name</p> <ul> <li>Song_Alphabet</li> <li>Egg_LetterName</li> <li>HideSeek_LetterName</li> <li>Assessment_LetterName (test)</li> </ul> <p>3. Discover words using known letters</p> <ul> <li>FastCrowd_BuildWord</li> <li>ThrowBalls_BuildWord</li> <li>Egg_BuildWord</li> <li>Assessment_OrderLettersOfWord (test)</li> </ul> <p>In this world we'll learn these letters usong the following words from the common vocabulary:</p> <p><code>arm, ball, blue, box, boy, breeze, camel, car, cat, chair, dog, ear, fire, four, fox, frog, garlic, gloves, hill, juice, lion, lizard, man, meat, moon, one, oven, pink, rat, red, river, road, salt, sea, soap, son, squirrel, star, sun, tea, tear, test, town, toy, tree, truck, white, woman, yellow, zoo.</code></p>"},{"location":"Educators/pedagody/#discover-vocabulary","title":"Discover vocabulary","text":"<p>Each world from 2 to 6 wil work with about 50 words organized in several subgroup of 10 words each. For each group will be repeated the same pedagogycal steps and the same activities, organized like in the following sequences of 4 didactical units:</p> <ol> <li> <p>Discover and recognize words by their image and sound </p> </li> <li> <p>ColorTickle_Image</p> </li> <li>ThrowBalls_Image</li> <li>FastCrowd_Image</li> <li>Balloons_Image</li> <li>Egg_Image</li> <li>HideSeek_Image</li> <li> <p>Assessment_MatchWordToImage (test)</p> </li> <li> <p>Discover words by its lettering, sounds and drawings</p> </li> <li> <p>ThrowBalls_BuildWord</p> </li> <li>FastCrowd_BuildWord</li> <li>Egg_BuildWord</li> <li>MixedLetters_BuildWord</li> <li> <p>Assessment_MatchWordToImage (test)</p> </li> <li> <p>Recognize words by it's lettering, sounds and drawing</p> </li> <li> <p>ThrowBalls_Word</p> </li> <li>FastCrowd_Word</li> <li>Balloons_Word</li> <li> <p>Assessment_SelectPronouncedWord (test)</p> </li> <li> <p>Get used to short sentences using the learned words</p> </li> <li> <p>Song_Word</p> </li> <li>ReadingGame_Phrase</li> <li>MissingLetter_Phrase</li> <li>Assessment_QuestionAndReply (test)</li> </ol>"},{"location":"Educators/pedagody/#world-2-animals-and-nature","title":"World 2: Animals and Nature","text":""},{"location":"Educators/pedagody/#nature","title":"Nature","text":"<ul> <li>BEACH</li> <li>BREEZE</li> <li>CLOUD</li> <li>DESERT</li> <li>FIRE</li> <li>FLOWER</li> <li>FOREST</li> <li>HILL</li> <li>ISLAND</li> <li>MOON</li> <li>MOUNTAIN</li> <li>PLANT</li> <li>RAIN</li> <li>RIVER</li> <li>SEA</li> <li>SKY</li> <li>SNOW</li> <li>STAR</li> <li>STONE</li> <li>SUN</li> <li>TREE</li> <li>VOLCANO</li> </ul>"},{"location":"Educators/pedagody/#animals","title":"Animals","text":"<ul> <li>BEAR</li> <li>BEE</li> <li>BIRD</li> <li>CAMEL</li> <li>CAT</li> <li>CHICKEN</li> <li>COW</li> <li>CROCODILE</li> <li>DOG</li> <li>DUCK</li> <li>ELEPHANT</li> <li>FOX</li> <li>FROG</li> <li>GOAT</li> <li>HORSE</li> <li>LION</li> <li>LIZARD</li> <li>MONKEY</li> <li>OCTOPUS</li> <li>PARROT</li> <li>PENGUIN</li> <li>PIG</li> <li>RAT</li> <li>SNAKE</li> <li>SQUIRREL</li> <li>TIGER</li> <li>TURTLE</li> <li>WHALE</li> </ul>"},{"location":"Educators/pedagody/#world-3-home-objects-cloths","title":"World 3: Home, Objects, Cloths","text":""},{"location":"Educators/pedagody/#home","title":"Home","text":"<ul> <li>BED</li> <li>BEDROOM</li> <li>CHAIR</li> <li>CLOSET</li> <li>COMPUTER</li> <li>COUCH</li> <li>CUP</li> <li>DISH</li> <li>DOOR</li> <li>FLOOR</li> <li>FORK</li> <li>FRIDGE</li> <li>KITCHEN</li> <li>KNIFE</li> <li>LAMP</li> <li>MIRROR</li> <li>OVEN</li> <li>ROOF</li> <li>SHOWER</li> <li>SINK</li> <li>SOAP</li> <li>SPOON</li> <li>STAIRS</li> <li>STOVE</li> <li>TABLE</li> <li>TELEVISION</li> <li>TOILET</li> <li>TOWEL</li> <li>WINDOW</li> </ul>"},{"location":"Educators/pedagody/#objects-clothes","title":"Objects, Clothes","text":"<ul> <li>BALL</li> <li>BOOK</li> <li>BOX</li> <li>COAT</li> <li>DOLL</li> <li>GLOVES</li> <li>GLUE</li> <li>HAT</li> <li>JACKET</li> <li>NEEDLE</li> <li>PAPER</li> <li>PENCIL</li> <li>SCARF</li> <li>SCISSORS</li> <li>SHIRT</li> <li>SHOES</li> <li>SKIRT</li> <li>SOCKS</li> <li>TEST</li> <li>TOY</li> <li>TROUSERS</li> </ul>"},{"location":"Educators/pedagody/#world-4-city-family","title":"World 4: City, Family","text":""},{"location":"Educators/pedagody/#city","title":"City","text":"<ul> <li>AIRPORT</li> <li>BANK</li> <li>BICYCLE</li> <li>BUS</li> <li>CAR</li> <li>CASTLE</li> <li>CHURCH</li> <li>CITY</li> <li>CLASSROOM</li> <li>FIELD</li> <li>GARDEN</li> <li>HOSPITAL</li> <li>HOUSE</li> <li>LIBRARY</li> <li>MARKET</li> <li>MOTORBIKE</li> <li>MUSEUM</li> <li>PARK</li> <li>PHARMACY</li> <li>PLANE</li> <li>PLAYGROUND</li> <li>RESTAURANT</li> <li>PORT</li> <li>ROAD</li> <li>SCHOOL</li> <li>SHOP</li> <li>STATION</li> <li>STREET</li> <li>THEATRE</li> <li>TOWN</li> <li>TRAIN</li> <li>TRUCK</li> <li>ZOO</li> </ul>"},{"location":"Educators/pedagody/#family","title":"Family","text":"<ul> <li>AUNT</li> <li>BOY</li> <li>BROTHER</li> <li>DAUGHTER</li> <li>FATHER</li> <li>GIRL</li> <li>GRANDDAUGHTER</li> <li>GRANDFATHER</li> <li>GRANDMOTHER</li> <li>GRANDSON</li> <li>MAN</li> <li>MOTHER</li> <li>PET</li> <li>SISTER</li> <li>SON</li> <li>UNCLE</li> <li>WOMAN</li> </ul>"},{"location":"Educators/pedagody/#world-5-food-body","title":"World 5: Food, Body","text":""},{"location":"Educators/pedagody/#food","title":"Food","text":"<ul> <li>APPLE</li> <li>APRICOT</li> <li>BANANA</li> <li>BREAD</li> <li>CAKE</li> <li>CARROT</li> <li>CHEESE</li> <li>CHERRY</li> <li>CHICKPEA</li> <li>COFFEE</li> <li>CUCUMBER</li> <li>FOOD</li> <li>GARLIC</li> <li>GRAPES</li> <li>JUICE</li> <li>MEAT</li> <li>OIL</li> <li>ONION</li> <li>PEAR</li> <li>PEPPER</li> <li>POTATO</li> <li>RICE</li> <li>SALT</li> <li>SUGAR</li> <li>TEA</li> <li>TOMATO</li> <li>WATER</li> <li>WATERMELON</li> <li>YOGHURT</li> </ul>"},{"location":"Educators/pedagody/#body","title":"Body","text":"<ul> <li>ARM</li> <li>BACK</li> <li>BELLY</li> <li>BRAIN</li> <li>CHEST</li> <li>EAR</li> <li>EYE</li> <li>FACE</li> <li>FINGER</li> <li>FOOT</li> <li>HAIR</li> <li>HAND</li> <li>HEAD</li> <li>LEG</li> <li>LIPS</li> <li>MOUTH</li> <li>NAIL</li> <li>NOSE</li> <li>TEAR</li> <li>TONGUE</li> <li>TOOTH</li> </ul>"},{"location":"Educators/pedagody/#world-6-calendar-colors-numbers","title":"World 6: Calendar, Colors, Numbers","text":""},{"location":"Educators/pedagody/#colors","title":"Colors","text":"<ul> <li>BLACK</li> <li>BLUE</li> <li>BROWN</li> <li>GREEN</li> <li>GREY</li> <li>ORANGE</li> <li>PINK</li> <li>PURPLE</li> <li>RED</li> <li>WHITE</li> <li>YELLOW</li> </ul>"},{"location":"Educators/pedagody/#days-seasons","title":"Days &amp; Seasons","text":"<ul> <li>MONDAY</li> <li>TUESDAY</li> <li>WEDNESDAY</li> <li>THURSDAY</li> <li>FRIDAY</li> <li>SATURDAY</li> <li>SUNDAY</li> <li>SPRING</li> <li>SUMMER</li> <li>AUTUMN</li> <li>WINTER</li> </ul>"},{"location":"Educators/pedagody/#numbers","title":"Numbers","text":"<ul> <li>ZERO</li> <li>ONE</li> <li>TWO</li> <li>THREE</li> <li>FOUR</li> <li>FIVE</li> <li>SIX</li> <li>SEVEN</li> <li>EIGHT</li> <li>NINE</li> <li>TEN</li> <li>ELEVEN</li> <li>TWELVE</li> <li>THIRTEEN</li> <li>FOURTEEN</li> <li>FIFTEEN</li> <li>SIXTEEN</li> <li>SEVENTEEN</li> <li>EIGHTEEN</li> <li>NINETEEN</li> <li>TWENTY</li> </ul>"},{"location":"Educators/pedagody/#months","title":"Months","text":"<ul> <li>JANUARY</li> <li>FEBRUARY</li> <li>MARCH</li> <li>APRIL</li> <li>MAY</li> <li>JUNE</li> <li>JULY</li> <li>AUGUST</li> <li>SEPTEMBER</li> <li>OCTOBER</li> <li>NOVEMBER</li> <li>DECEMBER</li> </ul>"},{"location":"GameDesign/","title":"Game Design","text":""},{"location":"GameDesign/ArabicLanguage/","title":"Arabic Language","text":""},{"location":"GameDesign/ArabicLanguage/#hamza","title":"Hamza (\u0621)","text":"<ul> <li>When \u201calif\u201d (\u0627) is in the beginning of the word, with the short vowel (diacritic sign) \u201cfatha\u201d and \u201cdamma\u201d, the \u201chamza\u201d (\u0621) is written above \u201calif\u201d (\u0623). If the short vowel (diacritic sign) is kasra, the \u201chamza\u201d is written below the \u201calif\u201d (\u0625)</li> <li>Hamza can also occur in the middle of a word or at the end, above \u201calif\u201d (\u0623), above \u201cwaaw\u201d (\u0624), or above dotless \u201cyaa\u201d (\u0626) or can even stand on its own as (\u0621)</li> </ul>"},{"location":"GameDesign/ArabicLanguage/#letters-that-dont-connect","title":"Letters that Don\u2019t Connect","text":"<ul> <li>The long vowels \u201calif\u201d and \u201cwaaw\u201d (\u0623 - \u0648) and the 4 consonants \u201cdaal\u201d \u201cdhaal\u201d \u201craa\u201d \u201czaay\u201d (\u062f - \u0630 - \u0631 - \u0632) are non-connected letters</li> <li>Non-connected means having only 2 forms/shapes: initial &amp; seperate (same shape), medial &amp; final (same shape)</li> </ul>"},{"location":"GameDesign/ArabicLanguage/#moon-sun-consonants","title":"Moon &amp; Sun Consonants","text":"<ul> <li>In writing, there is no difference when the moon or the sun consonant is attached with the definite article (\u0627\u0644)</li> <li>The difference between moon and sun consonants is in sound (only when they are read/ pronounced)</li> <li>The \u201cL\u201d sound (\u0644) is regularly pronounced when it comes before a moon consonant, for example the word \u201cmoon\u201d: pronunciation - alqamar (the l sound is pronounced)</li> <li>The \u201cL\u201d sound (\u0644) is not pronounced when it comes before a sun consonant, for example the word \u201csun\u201d: pronunciation - ashams (the l sound is not pronounced)</li> </ul>"},{"location":"GameDesign/ArabicLanguage/#singular-dual-plural","title":"Singular, Dual, Plural","text":"<ul> <li>We form the dual form of a word by adding \u201calif\u201d (\u0627) and \u201cnuun\u201d (\u0646) at the end of a singular word, such as singular: \u201cmountain\u201d (\u062c\u0628\u0644), dual: \u201cmountains\u201d (\u062c\u0628\u0644\u0627\u0646)</li> <li>In some cases of the dual form, we add \u201cyaa\u201d (\u064a) and \u201cnuun\u201d (\u0646) instead of \u201calif\u201d (\u0627) and \u201cnuun\u201d (\u0646) at the end of the word</li> </ul> <p>The plural has 3 categories: masculine plural, feminine plural, and irregular plural</p> <ol> <li>The masculine plural: by adding \u201cwaaw\u201d (\u0648) and \u201cnuun\u201d or \u201cyaa\u201d (\u064a) and \u201cnuun\u201d (\u0646) at the end of the singular word</li> <li>The feminine plural: by adding \u201calif\u201d (\u0627) and \u201ctaa\u201d (\u062a) at the end of the singular word</li> <li>The irregular plural: has no specific rule (the plural form in Antura are all irregular forms because the masculine &amp; feminine plurals are more advanced and require the knowledge of many grammar rules)</li> </ol>"},{"location":"GameDesign/DataAnalysis/","title":"Data Analysis","text":"<p>the app logs several types of data during the gameplay to allow analysis of behaviours and results of the learning experience.</p> <p>see docs Logging and Database for technical details.</p> <p>these are the main queries that we need to extract from data:</p> <ol> <li> <p>Curve of Duration of play sessions (one player, a group) If this refers to a Play Session: We query LogJourneyScoreData.TotalPlayTime by AppSession. If this refers to an App Session: We need to query LogInfoData and retrieve play time by comparing timestamps. (requires PlayTime logging #182 )</p> </li> <li> <p>Curve of Duration of play per day (one player, a group) Same as above, but we filter by timestamps to retrieve the day.</p> </li> <li> <p>Nb of mini-game/assessment per play session (one player, a group) I guess this referring to an 'app session'. In that case: We query LogMinigameScoreData filtering by AppSession</p> </li> <li> <p>Nb of mini-game/assessment per day (one player, a group) Same as above, but we filter by timestamps to retrieve the day.</p> </li> <li> <p>Learning blocks ID or T0+x date of drop out (one player, a group) We may query LogJourneyScoreData to retrieve the progression in play sessions and compare timestamps.</p> </li> <li> <p>Antura Space use duration per play session and per day (one player, a group) We query LogInfo looking for AnturaSpace (enter) and AnturaSpace (exit)</p> </li> <li> <p>Score evolution per mini game (the rough data that we use to create the 3 stars score) (one player, a group) We query LogMinigameScoreData.Score and filter by Minigame code.</p> </li> <li> <p>The average evolution of score, all minigame (in stars) (one player, a group) We query LogMinigameScoreData.Score and filter by Minigame code.</p> </li> <li> <p>Evaluate correlation between dropout/non play and score variation/new game apparition (a group) We can detect dropout by analyzing LogInfo timestamps and either JourneyScoreData or LogJourneyScoreData. We can detect score variation with LogMinigameScoreData. We can detect new game apparition with LogMinigameScoreData or MinigameScoreData</p> </li> <li> <p>Average assessment tries per learning block (to identify potential more difficult learning blocks) (one player, a group) We can detect failed assessments by querying LogMinigameScoreData, filter by assessment codes, and getting the score.</p> </li> <li> <p>Ranking of words associated to failure in mini game (one player, a group) We can retrieve LogLearnData to check scores, play sessions, and minigames.</p> </li> <li> <p>Mod indicator curve (one player, a group) We can use LogMoodData</p> </li> <li> <p>Replayed learning blocks (one player, a group) We can use LogJourneyScoreData to detect multiple plays for the same play sessions (and thus learning blocks).</p> </li> <li> <p>More used outfits, colors and accessories, on Antura (one player, a group) We need to create a LogInfo event that tracks a change in customization</p> </li> </ol>"},{"location":"GameDesign/LearningGoals/","title":"Learning Goals","text":""},{"location":"GameDesign/LearningGoals/#one-letter-name-of-the-letter","title":"One letter: Name of the letter","text":""},{"location":"GameDesign/LearningGoals/#one-letter-pronunciation-of-the-letter","title":"One letter; Pronunciation of the letter","text":""},{"location":"GameDesign/LearningGoals/#one-letter-letter-shape","title":"One letter: Letter shape","text":""},{"location":"GameDesign/LearningGoals/#one-letter-writing-drawing","title":"One letter: writing / drawing","text":""},{"location":"GameDesign/LearningGoals/#one-letter-example-of-the-letter-in-a-word","title":"One Letter: Example of the letter in a word","text":""},{"location":"GameDesign/LearningGoals/#several-letters-differenciate-sounds-of-different-letters","title":"Several letters: Differenciate sounds of different letters","text":"<p>(shapes of the same letter, other letters,)</p>"},{"location":"GameDesign/LearningGoals/#several-letters-differentiate-shape-of-a-letter-in-a-group-of-other","title":"Several letters: Differentiate shape of a letter in a  group of other","text":"<p>(like the 4 shapes of the same letter, or among others)</p>"},{"location":"GameDesign/LearningGoals/#several-letters-the-difference-in-letters-dots-numbers-position-means-different-letter","title":"Several letters:: The difference in letters' dots (numbers &amp; position) means different letter","text":""},{"location":"GameDesign/LearningGoals/#several-letters-alphabet-order-a-salphabet-song","title":"Several letters:: Alphabet order (a salphabet song)","text":""},{"location":"GameDesign/LearningGoals/#harakat-diacritic-hamza-associate-name-form-and-localisation-of-the-signs-letter-accessories","title":"Harakat / diacritic / Hamza associate name, form and localisation of the signs (letter accessories)","text":""},{"location":"GameDesign/LearningGoals/#harakat-diacritic-hamza-associate-form-and-position-to-the-pronunciation","title":"Harakat / diacritic / Hamza: Associate form and position to the pronunciation","text":""},{"location":"GameDesign/LearningGoals/#one-word-association-imageword","title":"One word association image/word","text":""},{"location":"GameDesign/LearningGoals/#one-word-reading","title":"One word Reading","text":""},{"location":"GameDesign/LearningGoals/#one-word-pronunciation","title":"One Word pronunciation","text":""},{"location":"GameDesign/LearningGoals/#one-word-word-spelling","title":"One word: Word spelling","text":""},{"location":"GameDesign/LearningGoals/#several-words-differentiate-word-of-a-group","title":"Several words Differentiate word of a group","text":"<p>(actual group, previous...)</p>"},{"location":"GameDesign/LearningGoals/#several-words-sort-out-words-with-differents-proprieties","title":"Several words: sort out words with differents proprieties","text":"<p>(singular/dual/plural, feminine/masculine, Moon &amp; Sun consonants)</p>"},{"location":"GameDesign/LearningGoals/#several-words-position-of-wordimagelettersound-in-a-succession","title":"Several Words: Position of word/image/letter/sound in a succession","text":""},{"location":"GameDesign/LearningGoals/#phrase-or-sentence-reading","title":"Phrase or sentence reading","text":""},{"location":"GameDesign/LearningGoals/#mini-game-rules-video-for-a-unique-objective","title":"Mini-game / rules / video for a Unique objective","text":""},{"location":"GameDesign/Minigames/","title":"MiniGames Design and Dev docs","text":""},{"location":"GameDesign/Minigames/Assessments/","title":"MiniGame: Assessment","text":"<p>Assessments take place at the end of a learning block, when the player\u2019s token reach a pin on the journey map. In the narrative context: the Keeper want to challenge the player mastery of the previous learning block. As the player tries to do the assessment, Antura comes and disturbs him, like a cat coming on your keyboard when you work.</p>"},{"location":"GameDesign/Minigames/Assessments/#pedagogical-and-psychosocial-position","title":"Pedagogical and psychosocial position","text":"<p>Assessment is a part of the learning process. We are not giving grades, but reinforcing the learning experience. We let the children retry until he passes, even with assistance.</p>"},{"location":"GameDesign/Minigames/Assessments/#antura","title":"Antura","text":"<p>Antura appears on screen before the assessment starts (scripted intro). Antura enters blocking the field of view of the camera and impeding to the player any kind of interaction. Antura stands and runs at set of animations. Antura is the only interactive object: when the player touches Antura or swipe on the screen, Antura goes away.</p>"},{"location":"GameDesign/Minigames/Assessments/#assessment-types","title":"Assessment types","text":"<ul> <li><code>Assessment_Letter</code> Select the Letter Shape of the pronounced Letter (isolated and LetterName)</li> <li><code>Assessment_LetterForm</code> Select the Letter Forms of the pronounced Letter (FIX: Phoneme)</li> <li><code>Assessment_WordsWithLetter</code> Select the Words containing the indicated Letter (fix: ONE word only)</li> <li><code>Assessment_MatchLettersToWord</code> Match the Letters to the Words containing them</li> <li><code>Assessment_CompleteWord_Form</code> Select the missing Letter (form) to complete the Word (mod -&gt; Phoneme)</li> <li><code>Assessment_MatchLettersToWord_Form</code> Match the Letters forms to the Words containing them (GOOOD!!!!)</li> <li><code>Assessment_OrderLettersOfWord</code> Order the letters to compose the indicated Word (FIX with all forms &amp; phonems)</li> <li><code>Assessment_CompleteWord</code> Select the missing Letter to complete the Word + Image (FIX with all forms &amp; phonems)</li> <li><code>Assessment_MatchWordToImage</code> Match the good Word to the good Image</li> <li><code>Assessment_QuestionAndReply</code> Link the question and reply sentences</li> </ul>"},{"location":"GameDesign/Minigames/Assessments/#not-used","title":"NOT USED","text":"<ul> <li><code>Assessment_SelectPronouncedWord</code> Select the written Word of the pronounced word or definition (DOESN'T START)</li> <li><code>Assessment_WordArticle</code> Classify the Word as with or without Al article</li> <li><code>Assessment_VowelOrConsonant</code> Classify the letter as Vowel and Consonant</li> <li><code>Assessment_SingularDualPlural</code> Classify the Word as Singular, Dual or Plural</li> <li><code>Assessment_SunMoonLetter</code> Classify the Letter as Moon and Sun</li> <li><code>Assessment_SunMoonWord</code> Classify the Word as Moon and Sun</li> </ul>"},{"location":"GameDesign/Minigames/Assessments/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/Assessments/#configuration-data","title":"Configuration data","text":""},{"location":"GameDesign/Minigames/Assessments/#variations-to-be-tested","title":"Variations to be tested","text":""},{"location":"GameDesign/Minigames/Assessments/#shortcuts","title":"Shortcuts","text":""},{"location":"GameDesign/Minigames/Assessments/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/Assessments/#open-questions","title":"Open Questions","text":"<p>how to modify the text padding of the answer widgets?</p>"},{"location":"GameDesign/Minigames/Balloons/","title":"MiniGame: Balloons","text":""},{"location":"GameDesign/Minigames/Balloons/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 4 - Variations     1. Balloons_letter     2. Balloons_spelling     3. Balloons_words     4. Balloons_counting - Difficulty Levels: not used</p>"},{"location":"GameDesign/Minigames/Balloons/#shared-difficulty","title":"Shared Difficulty","text":"<p>Ignored</p>"},{"location":"GameDesign/Minigames/Balloons/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/Balloons/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/Balloons/#1-balloons_letter","title":"1. Balloons_letter","text":"<p>Player must find the correct letter.</p>"},{"location":"GameDesign/Minigames/Balloons/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/Balloons/#2-balloons_spelling","title":"2. Balloons_spelling","text":"<p>Player must find the correct letters in order.</p>"},{"location":"GameDesign/Minigames/Balloons/#difficulty","title":"Difficulty","text":"<p>Ignored</p>"},{"location":"GameDesign/Minigames/Balloons/#scoring_1","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/Balloons/#3-balloons_words","title":"3. Balloons_words","text":"<p>Player must find the correct word.</p>"},{"location":"GameDesign/Minigames/Balloons/#scoring_2","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/Balloons/#4-balloons_counting","title":"4. Balloons_counting","text":"<p>Player must find the correct words in order.</p>"},{"location":"GameDesign/Minigames/Balloons/#scoring_3","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/Balloons/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/Balloons/#issues","title":"Issues","text":""},{"location":"GameDesign/Minigames/Balloons/#warnings-to-be-fixed","title":"Warnings to be fixed","text":"<p>tons of: - [Warning] [BalloonsGame] [OnPoppedNonRequiredBalloon] Animator has not been initialized. - [MakeWordPromptGreen] Animator has not been initialized. - [Warning] [LetterPromptController] [OnStateChanged] Animator</p>"},{"location":"GameDesign/Minigames/Balloons/#optimization","title":"Optimization","text":"<p>there are many deactivate GameObjects. some are very big, like <code>Environment_old</code> can they be deleted?</p>"},{"location":"GameDesign/Minigames/ColorTickle/","title":"MiniGame: Color Tickle","text":""},{"location":"GameDesign/Minigames/ColorTickle/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 1 - Variations:     1. ColorTickle - Difficulty Levels: ininfluent</p>"},{"location":"GameDesign/Minigames/ColorTickle/#shared-difficulty","title":"Shared Difficulty","text":"<ul> <li>Available lives decrease</li> <li>Antura activation time decreases</li> </ul>"},{"location":"GameDesign/Minigames/ColorTickle/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/ColorTickle/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/ColorTickle/#1-colortickle","title":"1. ColorTickle","text":"<p>Player must color the letter.</p>"},{"location":"GameDesign/Minigames/ColorTickle/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/ColorTickle/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/ColorTickle/#issues","title":"Issues","text":""},{"location":"GameDesign/Minigames/ColorTickle/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/ColorTickle/#optimization","title":"Optimization","text":""},{"location":"GameDesign/Minigames/ColorTickle/#game-design-docs","title":"Game Design Docs","text":"<p>3 Lives per round (= per Letter) - Each time you draw out of the borders (=Tickle) you lose a life</p> <p>What is drawn outside of the borders should appear \u201clighter\u201d - I.e. if the LETTER is draw in RED, you should use LIGHT RED outside of the borders - NOTE: you can do it by using a 50% brighter color</p> <p>We keep the version (game_ColorTickle) with the Tickle anim - But we do not stop the drawing, the Player must react and raise his/her finger</p> <p>The Arabic Letters must appear in a correct format (but we can zoom more) - It cannot go out of the \u201cWhite Square\u201d (please do not scale it and leave it centered)... - \u2026 and it cannot appear as \u201cbold\u201d as now (i.e. the dots connects together) - It seems that you currently using the the font as Bold with Outline\u2026 - \u2026 please use a smaller Bold (dots should not connect together) and a very thin black outline</p> <p>Antura is an element of surprise/disruption - Enters from the side, leaves a short time to let the player react and then barks scaring the LL - The LL will change animation when scared, making it very difficult/impossible to draw - So the player is obliged to raise his/her finger to avoid drawing outside of the borders - NOTE: it would cool that Antura only enter when the player is really actively drawing!</p>"},{"location":"GameDesign/Minigames/ColorTickle/#scoring_1","title":"Scoring","text":"<ul> <li>All mini-games must return a score (0 to 3 stars)</li> <li>0 stars are returned only if the player fails ALL ROUNDS</li> <li>3 stars are a very good performance, not necessarily PERFECT</li> </ul> <p>The Score could be calculated with a combination of bonus/malus:</p> <p>BONUS: - Complete a Letter - Number of Lives left at the end of a round</p> <p>MALUS - Number of Lives lost in a round - Amount of \u201cout-of-borders\u201d that has been colored</p>"},{"location":"GameDesign/Minigames/DancingDots/","title":"MiniGame: Dancing Dots","text":""},{"location":"GameDesign/Minigames/DancingDots/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 1 - Variations: 1 - Difficulty Levels: ininfluent</p>"},{"location":"GameDesign/Minigames/DancingDots/#shared-difficulty","title":"Shared Difficulty","text":"<ul> <li>Level 1: Dots only with hint</li> <li>Level 2: Diacritic only with hint</li> <li>Level 3: Dots only with no hint</li> <li>Level 4: Diacritic only with no hint</li> <li>Level 5: Dot and Diacritic with hint</li> <li>Level 6: Doat and Diacritic with no hint</li> </ul>"},{"location":"GameDesign/Minigames/DancingDots/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/DancingDots/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/DancingDots/#1-dancing-dots","title":"1. Dancing Dots","text":"<p>Player must add the correct dots.</p>"},{"location":"GameDesign/Minigames/DancingDots/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/DancingDots/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/DancingDots/#issues","title":"Issues","text":""},{"location":"GameDesign/Minigames/DancingDots/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/DancingDots/#optimization","title":"Optimization","text":""},{"location":"GameDesign/Minigames/DancingDots/#open-questions","title":"Open Questions","text":"<p>two new custom Fonts Atlas are used: <code>EA4S_Arabic Dotless DancingDots SDF</code> and <code>EA4S_Arabic DotsOnly DancingDots SDF</code>. are they really needed? can't they be integrated into the main arabic atlas? how to correctly generate them?</p>"},{"location":"GameDesign/Minigames/DancingDots/#game-design-docs","title":"Game Design Docs","text":""},{"location":"GameDesign/Minigames/DancingDots/#objectives","title":"Objectives","text":"<p>Pedagogical: Teach accent and dot positions related to letter and sounds. Play: Make the LL dance faster and faster until she reaches \"king of the dance floor\" status.</p>"},{"location":"GameDesign/Minigames/DancingDots/#mechanics","title":"Mechanics","text":"<p>Attempt-based: the player has no time-limit.</p> <ul> <li>First levels: we show where the dot should go, the player has to position the dot there and keep it for a while as the LL dances. In this phase it's almost a rhythm game.</li> <li>Advanced levels: we don't show where the dot should go, but the player can just drag and drop a dot/diacritic sign without having to hold it (still a rhythm game, but with a different approach).</li> <li>When the dot is placed wrongly, it's marked as wrong in the UI.</li> </ul>"},{"location":"GameDesign/Minigames/DancingDots/#antura","title":"Antura","text":"<p>Sometimes Antura's face appears (from left side of screen), sniffs the LL, then barks and exits. After the bark, the LL is scared (moves at double speed) for N seconds.</p>"},{"location":"GameDesign/Minigames/DancingDots/#feedback","title":"Feedback","text":"<ul> <li>When the dot is held, a blob of light around the LL grows in expectation of the result</li> <li> <p>When the dot position is assigned:</p> </li> <li> <p>If it was wrong, it becomes a splat of color, and the LL slows up dancing as if she's getting tired. The splat(s) will stay even after a successful dot is positioned, so we should think of a way to have them overlay nicely without confusing the letter's clarity.</p> </li> <li>If it was right, it emits a (cool) ray of light. The LL makes a pirouette and reappears with a new letter on which to place the dot/diacritic. The LL has now more energy and dances faster/better/nicer.</li> </ul>"},{"location":"GameDesign/Minigames/DancingDots/#difficulty-variations","title":"Difficulty variations","text":""},{"location":"GameDesign/Minigames/DancingDots/#gameplay","title":"Gameplay","text":"<p>The dancing moves will become more complex and faster.</p>"},{"location":"GameDesign/Minigames/DancingDots/#pedagogical","title":"Pedagogical","text":"<p>Visual aid: means that the dot/diacritic will appear in the right position at startup and then disappear with a PUFF.</p> <ul> <li>Dots alone with visual aid</li> <li>Diacritics alone with visual aid</li> <li>Dots and diacritics with visual aid</li> <li>Dots alone without visual aid</li> <li>Diacritics alone without visual aid</li> <li>Dots and diacritics without visual aid</li> </ul>"},{"location":"GameDesign/Minigames/DancingDots/#endgame","title":"Endgame","text":"<p>The game will end under one of these conditions:</p> <ul> <li>Too many wrong signs places</li> <li>The required amount of signs were correctly placed</li> </ul>"},{"location":"GameDesign/Minigames/DancingDots/#success","title":"Success","text":"<p>The LL is lifted a little in the air, the VICTORYRAYS appear behind her, and she strikes a \"king of the dance floor\" pose (would be nice if we could have 4/5 poses to use randomly for each successful endgame).</p>"},{"location":"GameDesign/Minigames/DancingDots/#failure","title":"Failure","text":"<p>Condition: 3(?) dots placed wrongly.</p> <p>The LL sits on the ground, leaning back on her arms, tired (but not sad). The dot/diacritic will appear (with a ray of light or some other effect evidencing it) to show where it should've gone.</p>"},{"location":"GameDesign/Minigames/Egg/","title":"MiniGame: Egg","text":""},{"location":"GameDesign/Minigames/Egg/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 4 - Variations     1. Egg_letters     2. Egg_sequence - Difficulty Levels: ininfluent</p>"},{"location":"GameDesign/Minigames/Egg/#shared-difficulty","title":"Shared Difficulty","text":"<ul> <li>Higher difficulty hides visual hints</li> <li>The number of letters shown increases with difficulty</li> </ul>"},{"location":"GameDesign/Minigames/Egg/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/Egg/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/Egg/#1-egg_letters","title":"1. Egg_letters","text":"<p>Player must find the correct letter.</p>"},{"location":"GameDesign/Minigames/Egg/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/Egg/#2-egg_sequence","title":"2. Egg_sequence","text":"<p>Player must find the correct letters in order.</p>"},{"location":"GameDesign/Minigames/Egg/#scoring_1","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/Egg/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/Egg/#issues","title":"Issues","text":""},{"location":"GameDesign/Minigames/Egg/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/Egg/#optimization","title":"Optimization","text":""},{"location":"GameDesign/Minigames/Egg/#game-design-docs","title":"Game Design Docs","text":""},{"location":"GameDesign/Minigames/Egg/#objectives","title":"Objectives","text":"<p>Pedagogical: Associate a letter shape and its pronunciation. Play: Press the right button to hatch the egg.</p>"},{"location":"GameDesign/Minigames/Egg/#mechanics","title":"Mechanics","text":"<p>Attempt based, no timer. N rounds (3/4)</p> <p>At each round, an egg will appear rolling from the right side of the screen. It will stop in the center and emit the sound of a letter while happily bouncing in place.</p> <p>Under the egg, there's a series of buttons with letters. The player will have to press the right button repeatedly to break the egg and hatch the LL. Would be nice if each LL had something procedural, to make it different, like a punk crest or a hat.</p> <p>Pressing on the egg will repeat the letter/sequence-of-letters and the eventual button pattern.</p> <ul> <li>In initial difficulty levels, where just a single letter needs to be pressed, as soon as the egg speaks its letter the letter buttons will illuminate in sequence and each will say its letter.</li> <li>In later difficulty levels, where the egg will speak a series of letters, the buttons will activate/speak in the correct sequence. The player will have to repeat the pattern (like in the old table game Simon).</li> <li>Later on, the buttons will not activate at all, so it will be all up to the player.</li> </ul> <p>NOTE: in case of sequence of letters, where the same letter repeats more than once, the same button will have to be pressed more than once.</p>"},{"location":"GameDesign/Minigames/Egg/#antura","title":"Antura","text":"<p>Antura's face appears from the right and inhales, sucking the buttons in his mouth. Then spits them out in scrambled position and disappears.</p>"},{"location":"GameDesign/Minigames/Egg/#difficulty-variations","title":"Difficulty variations","text":""},{"location":"GameDesign/Minigames/Egg/#gameplay","title":"Gameplay","text":"<p>More buttons (3 to 8).</p>"},{"location":"GameDesign/Minigames/Egg/#pedagogical","title":"Pedagogical","text":"<ul> <li>Buttons emit their letter's sound when the round start.</li> <li>Buttons don't emit their letter's sound.</li> <li>Multiple letters to guess correctly (extra layer, might represent a word, even if never spoken as a full word until we guess the correct pattern). Buttons light in correct pattern.</li> <li>Same as above, but buttons don't light nor say anything.</li> </ul>"},{"location":"GameDesign/Minigames/Egg/#end-round-repeated-per-round","title":"End round (repeated per round)","text":""},{"location":"GameDesign/Minigames/Egg/#success","title":"Success","text":"<p>The egg will break (automatically, no dragging of the shell) and the LL will appear jumping happily. If we were playing with a sequence of letters, all the letters will be spoken and an LL for each letter will jump out and position itself horizontally. Otherwise just the single letter we were playing with.</p>"},{"location":"GameDesign/Minigames/Egg/#failure","title":"Failure","text":"<p>Condition: N wrong attempts (3).</p> <p>With each wrong attempt, the egg will rotate/move 90\u00b0 to the left. After N wrong attempts, the wrong buttons will POOF away, and the egg will roll off screen.</p>"},{"location":"GameDesign/Minigames/FastCrowd/","title":"MiniGame: Fast Crowd","text":""},{"location":"GameDesign/Minigames/FastCrowd/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 5 - Variations     1. FastCrowd_spelling     2. FastCrowd_words     3. FastCrowd_letter     4. FastCrowd_counting     5. FastCrowd_alphabet - Difficulty Levels: ininfluent</p>"},{"location":"GameDesign/Minigames/FastCrowd/#shared-difficulty","title":"Shared Difficulty","text":"<ul> <li>Less time at higher difficulties</li> <li>More frequent Antura appearances</li> <li>Higher number of coincurrent letters</li> </ul>"},{"location":"GameDesign/Minigames/FastCrowd/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/FastCrowd/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/FastCrowd/#1-fastcrowd_spelling","title":"1. FastCrowd_spelling","text":"<p>Player must find the correct letters in order.</p>"},{"location":"GameDesign/Minigames/FastCrowd/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/FastCrowd/#2-fastcrowd_words","title":"2. FastCrowd_words","text":"<p>Player must find the correct word.</p>"},{"location":"GameDesign/Minigames/FastCrowd/#scoring_1","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/FastCrowd/#3-fastcrowd_letter","title":"3. FastCrowd_letter","text":"<p>Player must find the correct letter.</p>"},{"location":"GameDesign/Minigames/FastCrowd/#scoring_2","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/FastCrowd/#4-fastcrowd_counting","title":"4. FastCrowd_counting","text":"<p>Player must find the correct letters in order.</p>"},{"location":"GameDesign/Minigames/FastCrowd/#scoring_3","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/FastCrowd/#5-fastcrowd_alphabet","title":"5. FastCrowd_alphabet","text":"<p>Player must find the correct letters in order.</p>"},{"location":"GameDesign/Minigames/FastCrowd/#scoring_4","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/FastCrowd/#game-design-docs","title":"Game Design Docs","text":""},{"location":"GameDesign/Minigames/FastCrowd/#objectives","title":"Objectives","text":"<p>Narrative context: Living Letters have escaped! Fetch the good Letters and put them in place. Gameplay: Numerous differents Living Letters are running in the field of view. The player has to catch the right  letters, then drag and drop them to compose words.  In a variation: Living words and Living images are replacing the Living Letters Gameplay skills #reactivity #precision #Pattern recognition #memory</p> <p>Pedagogical: This game is dedicated to acquisition of new vocabulary, training the spelling and the visual recognition of the new words Literacy skills #letter-recognition #spelling #word-recognition #association word/image</p>"},{"location":"GameDesign/Minigames/HideAndSeek/","title":"MiniGame: Hide And Seek","text":""},{"location":"GameDesign/Minigames/HideAndSeek/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 1 - Variations     1. HideAndSeek - Difficulty Levels: ininfluent</p>"},{"location":"GameDesign/Minigames/HideAndSeek/#shared-difficulty","title":"Shared Difficulty","text":"<ul> <li>Increased number of wrong letters</li> <li>Lower idling time for letters</li> </ul>"},{"location":"GameDesign/Minigames/HideAndSeek/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/HideAndSeek/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/HideAndSeek/#1-hideandseek","title":"1. HideAndSeek","text":"<p>Player must find the correct letter.</p>"},{"location":"GameDesign/Minigames/HideAndSeek/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/HideAndSeek/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/HideAndSeek/#issues","title":"Issues","text":""},{"location":"GameDesign/Minigames/HideAndSeek/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/HideAndSeek/#optimization","title":"Optimization","text":""},{"location":"GameDesign/Minigames/MakeFriends/","title":"MiniGame: Make Friends","text":""},{"location":"GameDesign/Minigames/MakeFriends/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 1 - Variations     1. MakeFriends - Difficulty Levels: 2     1. Low difficulty (value = 0)     2. Medium difficulty (value = 1)</p>"},{"location":"GameDesign/Minigames/MakeFriends/#shared-difficulty","title":"Shared Difficulty","text":"<ul> <li>Letters provide hints at lower difficulties</li> </ul>"},{"location":"GameDesign/Minigames/MakeFriends/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/MakeFriends/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/MakeFriends/#1-makefriends","title":"1. MakeFriends","text":"<p>Player must find the correct letter.</p>"},{"location":"GameDesign/Minigames/MakeFriends/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/MakeFriends/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/MakeFriends/#issues","title":"Issues","text":"<ul> <li>The expected difficulty goes from 0 to 2, but the core system will only provide a varying difficulty between 0 and 1</li> </ul>"},{"location":"GameDesign/Minigames/MakeFriends/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/MakeFriends/#optimization","title":"Optimization","text":""},{"location":"GameDesign/Minigames/MakeFriends/#game-design-docs","title":"Game Design Docs","text":"<p>Pedagogical Objectives: Recognize letter sound in words.</p> <p>Play Objectives: Create as many friendships as possible: inspire friendship between LLs by showing they have common arguments.</p>"},{"location":"GameDesign/Minigames/MakeFriends/#mechanics","title":"Mechanics","text":"<p>Attempt-based: no time-limit.</p> <p>Two LLs appear (showing or not showing their word, depending on the difficulty) walking from off-screen (they enter moving from the front side so we see their back, and they turn\u2014if necessary based on pedagogical level\u2014to show their written word). Each of them says their word. The player then can choose between N letters to drag to the center of the screen (inside a comic balloon).</p> <ul> <li>Touching an LL will have it repeat its word.</li> <li>Touching a letter will play the letter's sound (change).</li> <li>When the letter is dropped in the center of the screen, a comic balloon shows with that letter and it's pronounced.</li> <li>If the letter was right, the LLs will say something (gibberish) happily, show their word with the common letter evidenced, then slap a highfive (or hug, but hugging might be complicated for animations) and move to the \"friendship area\" in the background. New LLs will appear with new words, and new letters to choose from.</li> <li>If the letter was wrong, the LLs will say something (gibberish) angrily and move away from each other. The dragged letter will be marked as wrong in the UI.</li> </ul>"},{"location":"GameDesign/Minigames/MakeFriends/#antura","title":"Antura","text":"<p>Now and then Antura will fall from the sky and land on his ass between the LLs, causing them to move away from each other. Antura will then jump back on his feet, [bark/woof/burp], and run away off-screen (by running away from the camera for a little then curving left or right to exit).</p> <p>NOTE: When Antura runs away the movement will have to consider the objects in the environment and prevent sliding. If this might be an issue, we could also just make him disappear with a POOF.</p>"},{"location":"GameDesign/Minigames/MakeFriends/#difficulty-variations","title":"Difficulty variations","text":"<p>Gameplay</p> <pre><code>3 possible mistakes\nTimer\n</code></pre> <p>Pedagogical</p> <pre><code>One common letter\nMultiple common letters\nVarious degrees of showing the words on the LL (show, show only at startup, not show at all)\n</code></pre>"},{"location":"GameDesign/Minigames/MakeFriends/#endgame","title":"Endgame","text":"<p>The game will end under one of these conditions:</p> <pre><code>Too many friendships were broken\nThe required amount of friendships were won\n</code></pre>"},{"location":"GameDesign/Minigames/MakeFriends/#success","title":"Success","text":"<p>The camera zooms to the \"friendship area\" and shows all friends interacting happily.</p>"},{"location":"GameDesign/Minigames/MakeFriends/#failure","title":"Failure","text":"<p>Condition: too many wrong letters chosen. The current LLs show their word and the correct letter is evidenced. Then the camera zooms out from the \"friendship area\".</p>"},{"location":"GameDesign/Minigames/Maze/","title":"MiniGame: Maze","text":""},{"location":"GameDesign/Minigames/Maze/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 1 - Variations     1. Maze - Difficulty Levels: ininfluent</p>"},{"location":"GameDesign/Minigames/Maze/#shared-difficulty","title":"Shared Difficulty","text":"<ul> <li>Timer decreases with difficulty</li> </ul>"},{"location":"GameDesign/Minigames/Maze/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/Maze/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/Maze/#1-maze","title":"1. Maze","text":"<p>Player must draw the correct letter.</p>"},{"location":"GameDesign/Minigames/Maze/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/Maze/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/Maze/#issues","title":"Issues","text":""},{"location":"GameDesign/Minigames/Maze/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/Maze/#optimization","title":"Optimization","text":""},{"location":"GameDesign/Minigames/Maze/#game-design-docs","title":"Game Design Docs","text":"<p>Pedagogical Objectives: Learning the shape of a letter by drawing it (addendum: also learn how to draw a letter correctly).</p> <p>Play Objectives: Along a racing track, draw as fast as possible the correct path so the LL can reach the end and grab the bonuses.</p>"},{"location":"GameDesign/Minigames/Maze/#mechanics-visuals","title":"Mechanics + Visuals","text":"<p>Time-based (very very time-based).</p> <p>Camera: top-view (perspective).</p> <p>The player will have to draw a path along a race track (aka the letter to trace) as fast as possible, using the correct drawing direction (start to finish line), while the LL (who is riding an idle rocket) waits. As soon as the player reaches the end point, the LL will ignite the rocket and follow the drawn path at a very high speed.</p> <p>When a round starts, we hear the sound of the letter.</p> <p>NOTE: the rocket will have to be colorful/cartoonish, to make it clear it's a fun-rocket and not a missile.</p> <ul> <li>When the path incorrectly exits the track, the LL will behave as if it hit the track's side and start bouncing around (kind of like Mario Kart when struck by lightning, but possibly even more ridiculous) then get back on the track where the path got back.</li> <li>If the LL hits the track's side too many times, the LL is thrown off the rocket and the round is lost.</li> <li>The track will contain various bonuses (fruits?), so more points will be gained if the drawn path not only stays inside the track, but also allows the LL to go over and grab these bonuses. This allows for larger tracks and a difficulty-based margin of error, but also more bonuses when following the track/letter precisely.</li> <li>Eventual dots will have to be \"pressed\" at the end, and should appear like buttons instead of external tracks.</li> <li> <p>When a player loses a round, if he still didn't lose the whole game (as in: didn't lose N rounds), he can either move on to another letter, or use a \"retry card\" to retry the same failed letter.</p> </li> <li> <p>The retry system is actually always in place. If the player fails a letter it will always be pushed to repeat it. But he can use a \"move on\" card to change to a new one\u2014and lose some time as a penalty_ (this would be also interesting to store as player data, to know what letters the kid skipped more).</p> </li> </ul>"},{"location":"GameDesign/Minigames/Maze/#antura","title":"Antura","text":"<p>If the player doesn't complete the path on time, Antura appears and chases the LL. The LL ignites the rocket and escapes off-screen (still chased by Antura). The round is lost.</p>"},{"location":"GameDesign/Minigames/Maze/#difficulty-variations","title":"Difficulty variations","text":"<p>Gameplay</p> <p>Less time to draw. Time attack should be an important factor, so we reward the player more than punishing him if he goes faster than necessary.</p> <p>Pedagogical</p> <p>We should follow the Lebanese approach to letter sequences, so the harder the pedagogical difficulty, the more complex the letter to draw</p>"},{"location":"GameDesign/Minigames/Maze/#endgame","title":"Endgame","text":"<p>The game will end when the game timer elapses (timer will need to be paused during \"new round\" animations).</p>"},{"location":"GameDesign/Minigames/Maze/#success-repeated-multiple-times-per-game","title":"Success - repeated multiple times per game","text":"<p>The LL reaches the track's end, and fireworks/other-effects appear.</p>"},{"location":"GameDesign/Minigames/Maze/#failure-repeated-multiple-times-per-game","title":"Failure - repeated multiple times per game","text":"<ul> <li>Condition A: the path (and thus the speeding LL) hit the track's border too many times. The LL falls from the rocket. The rocket starts rocketing upwards into the sky (see sketch to have an idea of the upwards movement: not straight but spiraling) until it hits the screen and bounces away. The screen will crack (same effect as THROW BALLS). NOTE: the rocket's spiral/bounce will need to be pretty fast, both because the game is fast and to move on quickly to the next round (or to retry the current one - see \"retry card\" concept).</li> <li>Condition B: the player takes too long to draw the path, and Antura chases the LL. The LL ignites the rocket and runs away off-screen, chased by Antura.</li> </ul>"},{"location":"GameDesign/Minigames/MissingLetter/","title":"MiniGame: Missing Letter","text":""},{"location":"GameDesign/Minigames/MissingLetter/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 3 - Variations     1. MissingLetter     2. MissingLetter_word     3. MissingLetter_forms - Difficulty Levels: ininfluent</p>"},{"location":"GameDesign/Minigames/MissingLetter/#shared-difficulty","title":"Shared Difficulty","text":"<ul> <li>Number of answers increases with difficulty</li> <li>Timer decreases with difficulty</li> <li>Antura appearance increases with difficulty</li> </ul>"},{"location":"GameDesign/Minigames/MissingLetter/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/MissingLetter/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/MissingLetter/#1-missingletter","title":"1. MissingLetter","text":"<p>Player must find the correct letter.</p>"},{"location":"GameDesign/Minigames/MissingLetter/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/MissingLetter/#2-missingletter_word","title":"2. MissingLetter_word","text":"<p>Player must find the correct word.</p>"},{"location":"GameDesign/Minigames/MissingLetter/#scoring_1","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/MissingLetter/#3-missingletter_forms","title":"3. MissingLetter_forms","text":"<p>Player must find the correct form.</p>"},{"location":"GameDesign/Minigames/MissingLetter/#scoring_2","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/MissingLetter/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/MissingLetter/#issues","title":"Issues","text":""},{"location":"GameDesign/Minigames/MissingLetter/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/MissingLetter/#optimization","title":"Optimization","text":""},{"location":"GameDesign/Minigames/MixedLetters/","title":"MiniGame: Mixed Letters","text":""},{"location":"GameDesign/Minigames/MixedLetters/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 2 - Variations     1. MixedLetters_alphabet     2. MixedLetters_spelling - Difficulty Levels: ininfluent</p>"},{"location":"GameDesign/Minigames/MixedLetters/#shared-difficulty","title":"Shared Difficulty","text":"<ul> <li>Timer decreases with difficulty</li> </ul>"},{"location":"GameDesign/Minigames/MixedLetters/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/MixedLetters/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/MixedLetters/#1-mixedletters_alphabet","title":"1. MixedLetters_alphabet","text":"<p>Player must find the correct letters in order.</p>"},{"location":"GameDesign/Minigames/MixedLetters/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/MixedLetters/#2-mixedletters_spelling","title":"2. MixedLetters_spelling","text":"<p>Player must find the correct letters in order.</p>"},{"location":"GameDesign/Minigames/MixedLetters/#scoring_1","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/MixedLetters/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/MixedLetters/#issues","title":"Issues","text":""},{"location":"GameDesign/Minigames/MixedLetters/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/MixedLetters/#optimization","title":"Optimization","text":""},{"location":"GameDesign/Minigames/MixedLetters/#game-design-docs","title":"Game Design Docs","text":""},{"location":"GameDesign/Minigames/MixedLetters/#objectives","title":"Objectives","text":"<p>Pedagogical: Spelling and letter orientation.</p> <p>Play: Recompose the anagrammed (and disoriented) LLs in the correct order.</p>"},{"location":"GameDesign/Minigames/MixedLetters/#mechanics","title":"Mechanics","text":"<p>Time-based (single timer per round), multiple rounds.</p> <p>Each round begins with a giant LL showing the full word. Antura arrives running, a fight begins (dust particles to hide it) and the giant LL will become a scrambled series of regular LLs with a letter each. The player will have to place them back in the correct position, and also rotate them correctly. The main challenge here is usability (considering dragging and rotating).</p> <ul> <li>When Antura scrambles the letters, they lie on the ground, with their face towards the player. Their arms and legs are NOT present, and will NEVER appear in the whole game (otherwise the player will be able to understand if they're upside down just by seeing their legs upwards), except in case of a failed endgame.</li> <li>The player will have to drag each LL to a series of UI squares (each representing a letter position) in the sky. Each UI square will also have a button. Pressing it will rotate the letter 90\u00b0 along the Z axis.</li> <li>The instant the player got the right combination, a POOF will happen, and the giant LL will reappear, with a victory animation and VICTORYRAYS behind.</li> </ul> <p>A note on why the \"rotation\" buttons: they seem the most usable option to allow a kid to rotate LLs without getting crazy, while keeping the actual LL interaction just for the dragging (from the ground to a UI square, or from a UI square to another).</p>"},{"location":"GameDesign/Minigames/MixedLetters/#antura","title":"Antura","text":"<p>Antura appears only at the beginning of each round, to scramble the giant LL.</p>"},{"location":"GameDesign/Minigames/MixedLetters/#difficulty-variations","title":"Difficulty variations","text":""},{"location":"GameDesign/Minigames/MixedLetters/#gameplay","title":"Gameplay","text":"<p>Less time, more letters (also pedagogical).</p>"},{"location":"GameDesign/Minigames/MixedLetters/#pedagogical","title":"Pedagogical","text":"<ul> <li>In initial levels, the word to form is shown in the top center of the screen, as a visual aid.</li> <li>More letters to reorganize.</li> <li>Letters rotated by 90\u00b0</li> <li>Letters rotated by 180\u00b0</li> </ul>"},{"location":"GameDesign/Minigames/MixedLetters/#endgame","title":"Endgame","text":"<p>Each round will end under one of these conditions:</p> <ul> <li>The timer elapses: fail</li> <li>The LLs are correctly reorganized: win</li> </ul> <p>The game will end when the given number of rounds have been met.</p>"},{"location":"GameDesign/Minigames/MixedLetters/#success","title":"Success","text":"<p>A POOF will happen, and the giant LL reappears, with a victory animation and VICTORYRAYS behind.</p>"},{"location":"GameDesign/Minigames/MixedLetters/#failure","title":"Failure","text":"<p>Condition: timer elapsed.</p> <p>The LLs fall back on the ground (if they were in the UI squares), their arms and legs reappear, and they run to position themselves in the correct order (the giant LL doesn't reappear though). They utter some gibberish sound that represents disappointment and the original word appears in the center of the screen.</p>"},{"location":"GameDesign/Minigames/MixedLetters/#game-variations","title":"Game variations","text":"<p>Alphabet version Instead of a word, the LLs have to be positioned in the right alphabet order. The rest would work the same.</p>"},{"location":"GameDesign/Minigames/ReadingGame/","title":"MiniGame: Reading Game","text":""},{"location":"GameDesign/Minigames/ReadingGame/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 2 - Variations     1. Alphabet Song     2. Reading Game - Difficulty Levels: ininfluent</p>"},{"location":"GameDesign/Minigames/ReadingGame/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/ReadingGame/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/ReadingGame/#1-alphabet-song","title":"1. Alphabet Song","text":"<p>Player must follow the song.</p>"},{"location":"GameDesign/Minigames/ReadingGame/#difficulty","title":"Difficulty","text":"<p>Ignored</p>"},{"location":"GameDesign/Minigames/ReadingGame/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/ReadingGame/#2-reading-game","title":"2. Reading Game","text":"<p>Player must find the correct letters in order.</p>"},{"location":"GameDesign/Minigames/ReadingGame/#difficulty_1","title":"Difficulty","text":"<p>Time to answer decreases with difficulty.</p>"},{"location":"GameDesign/Minigames/ReadingGame/#scoring_1","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/ReadingGame/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/ReadingGame/#issues","title":"Issues","text":""},{"location":"GameDesign/Minigames/ReadingGame/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/ReadingGame/#optimization","title":"Optimization","text":""},{"location":"GameDesign/Minigames/ReadingGame/#game-design-docs","title":"Game Design Docs","text":""},{"location":"GameDesign/Minigames/ReadingGame/#objectives","title":"Objectives","text":"<p>Pedagogical: Teach reading fluency. Play: The player must follow a sentence/alphabet correctly and fill the world.</p>"},{"location":"GameDesign/Minigames/ReadingGame/#mechanics","title":"Mechanics","text":"<p>Life-based: score is based on reading speed and correct answers to each round's quiz (wrong answer loses a life). A sentence (or a series of letters in the Alphabet variation) appears in the center of the screen, hidden except for a small Reading Window (RW). The player will have to drag the RW over the sentence (which is otherwise obscured). When the finger/RW reaches the end, a popup appears with N buttons representing various images. The player will be asked to identify the correct image relative to the sentence he just read (so we know if he understood what he read or not).</p> <p>NOTE: the popup quiz should show how many points (based on the round's reading speed) you would get if you answer correctly. If you answer wrongly, all points are lost, otherwise they are validated and added to the starbar.</p>"},{"location":"GameDesign/Minigames/ReadingGame/#antura","title":"Antura","text":"<p>Antura would work just as a feedback, in the lower part of the screen. If the player reads fast, he jumps/moves happily, otherwise he runs around angrily.</p>"},{"location":"GameDesign/Minigames/ReadingGame/#feedback","title":"Feedback","text":"<p>If the player moves fast, the RW pulses with bright and cheerful colors, otherwise it goes from yellow to red. The environment would work as the round's feedback. Each time the player gets a correct quiz answer, trees, bushes and moving clouds popup in the background. These elements increase during the whole game (meaning are not reset between rounds). Difficulty variations Gameplay: Smaller RW. Pedagogical: Longer sentences.</p>"},{"location":"GameDesign/Minigames/ReadingGame/#endgame","title":"Endgame","text":"<p>The game will end under after N (5?) sentences have been read, successfully or not, or if all lives (3) are lost. The score/stars will be calculated based on the reading speed and correct quiz answers. Failing to answer the quiz invalidates any score achieved during the round. When a round ends the quiz buttons disappear with a POOF and a new sentence arrives.</p> <p>Success (repeated per round) The score is validated, Antura yaps happily, new trees/bushes/clouds appear.</p> <p>Failure (repeated per round) The score is invalidated, Antura barks angrily, the correct image is highlighted while the sentence is being read by the voice.</p>"},{"location":"GameDesign/Minigames/ReadingGame/#variations_1","title":"Variations","text":"<ul> <li>Sentence</li> <li>Alphabet song: in this case the player has to follow the voice singing the song</li> </ul>"},{"location":"GameDesign/Minigames/Scanner/","title":"MiniGame: Scanner","text":""},{"location":"GameDesign/Minigames/Scanner/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 2 - Variations     1. Scanner     2. Scanner_phrase - Difficulty Levels: ininfluent</p>"},{"location":"GameDesign/Minigames/Scanner/#shared-difficulty","title":"Shared Difficulty","text":"<ul> <li>Belt speed increases with difficulty</li> <li>Living letters face away from the camera at higher difficulties</li> </ul>"},{"location":"GameDesign/Minigames/Scanner/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/Scanner/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/Scanner/#1-scanner","title":"1. Scanner","text":"<p>Player must find the correct letter.</p>"},{"location":"GameDesign/Minigames/Scanner/#difficulty","title":"Difficulty","text":"<p>Ignored</p>"},{"location":"GameDesign/Minigames/Scanner/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/Scanner/#2-scanner_phrase","title":"2. Scanner_phrase","text":"<p>Player must find the correct word.</p>"},{"location":"GameDesign/Minigames/Scanner/#difficulty_1","title":"Difficulty","text":"<p>Time to answer decreases with difficulty.</p>"},{"location":"GameDesign/Minigames/Scanner/#scoring_1","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/Scanner/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/Scanner/#issues","title":"Issues","text":""},{"location":"GameDesign/Minigames/Scanner/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/Scanner/#optimization","title":"Optimization","text":""},{"location":"GameDesign/Minigames/Scanner/#game-design-docs","title":"Game Design Docs","text":""},{"location":"GameDesign/Minigames/Scanner/#objectives","title":"Objectives","text":"<p>Pedagogical: Reading training, word image association.</p> <p>Play: Find and give the right luggage to the LL.</p>"},{"location":"GameDesign/Minigames/Scanner/#mechanics","title":"Mechanics","text":"<p>Time-based, with multiple LLs/challenges.</p> <p>In the middle of the screen we have a conveyor belt moving left to right, over which an LL (with a word) is standing idle while being transported (the idea is that she's passing the checkpoint to fly somewhere, and we need to give her back her correct luggage).</p> <ul> <li>On the top of the screen, there's a scanner device, which the player can drag (along the whole width of the screen). When dragged/kept-pressed, the scanner emits a light (fun light) which, when passing over the LL, makes the game utter the LL's word at the speed we're dragging the scanner (using dynamic audio pitch controls). NOTE: when the player doesn't interact with the scanner, it's off and doesn't do anything.</li> <li>On the bottom, we have a series of suitcases, each with a drawing. The player will have to drag/give the correct suitcase to the LL (based on word-image association). If the wrong suitcase is given, the LL goes away angry and the timer loses some seconds.</li> <li>After a suitcase is given, the LL will go away (with a happy or angry animation depending on the outcome). A new LL and a new set of suitcases will appear (new round - same timer).</li> </ul>"},{"location":"GameDesign/Minigames/Scanner/#antura","title":"Antura","text":"<p>Sometimes Antura jumps in from the right side and stays there jumping in position for a while (if an LL had already reached the right side, she's bumped and falls out - but no time is lost). After N seconds, he runs like a bull towards the opposite side and throws away all the LLs present (again, no time is lost, only LLs).</p> <p>While Antura is jumping on place, the player can interact with the scanner and pass it repeatedly over him to scare him away, so he won't charge the LLs.</p>"},{"location":"GameDesign/Minigames/Scanner/#variation-details","title":"Variation details:","text":"<ul> <li>Random words (3-5) and we give them their respective 3-5 suitcases.</li> <li>Every set is based on a timer, if the kid doesn\u2019t finish in time, we make the belt accelerate quickly and throw the LL in a funny way.</li> <li>Same 6 rounds per one game</li> </ul>"},{"location":"GameDesign/Minigames/Scanner/#difficulty-variations","title":"Difficulty variations","text":""},{"location":"GameDesign/Minigames/Scanner/#gameplay","title":"Gameplay","text":"<p>The conveyor belt moves faster.</p>"},{"location":"GameDesign/Minigames/Scanner/#pedagogical","title":"Pedagogical","text":"<ul> <li>Additional suitcases to choose from.</li> <li>Suitcases with similar words represented.</li> <li>In later levels, instead of having the scanner speak the LL's word, we could have LLs showing their back, and the scanner is simply used to make them turn (the effect/animation could be as if we're tickling them with light, and they finally turn), without saying the word. This way the players have to use only visual word recognition instead of speech.</li> </ul>"},{"location":"GameDesign/Minigames/Scanner/#endround-repeated-per-round","title":"Endround (repeated per round)","text":"<p>At each round completion a new set of suitcase and a new LL will appear. The timer will be the same for all rounds.</p>"},{"location":"GameDesign/Minigames/Scanner/#success","title":"Success","text":"<p>The LL will grab the suitcase (if technically feasible, otherwise the suitcase will just stay next to the LL), make a happy jump, and fly upwards (and off screen) followed by a rainbow trail.</p>"},{"location":"GameDesign/Minigames/Scanner/#failure","title":"Failure","text":"<p>Condition: timer elapses (endgame), wrong suitcase is given, or LL exits the screen.</p> <p>The correct suitcase is immediately evidenced. The LL will utter her word (even if she is off-screen), and then, if she didn't exit already, disappears with a grumpy POOF (while uttering some disgruntled gibberish).</p>"},{"location":"GameDesign/Minigames/Scanner/#game-variations","title":"Game variations","text":"<p>Multiple words Each round has multiple words forming a sentence, where all suitcases are related to them and the player needs to combine all of them with the correct LL (which must all be visible). Failing one suitcase will jump to the next round (new set of LLs and suitcases).</p>"},{"location":"GameDesign/Minigames/SickLetters/","title":"MiniGame: Sick Letters","text":""},{"location":"GameDesign/Minigames/SickLetters/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 1 - Variations     1. SickLetters - Difficulty Levels: ininfluent</p>"},{"location":"GameDesign/Minigames/SickLetters/#shared-difficulty","title":"Shared Difficulty","text":"<ul> <li>Timer decreases</li> <li>Number of wrong letters increases</li> <li>Vase width increases</li> <li>Letters dance at higher difficulties</li> </ul>"},{"location":"GameDesign/Minigames/SickLetters/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/SickLetters/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/SickLetters/#1-scanner","title":"1. Scanner","text":"<p>Player must find the correct letter.</p>"},{"location":"GameDesign/Minigames/SickLetters/#difficulty","title":"Difficulty","text":"<p>Ignored</p>"},{"location":"GameDesign/Minigames/SickLetters/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/SickLetters/#2-scanner_phrase","title":"2. Scanner_phrase","text":"<p>Player must find the correct word.</p>"},{"location":"GameDesign/Minigames/SickLetters/#difficulty_1","title":"Difficulty","text":"<p>Time to answer decreases with difficulty.</p>"},{"location":"GameDesign/Minigames/SickLetters/#scoring_1","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/SickLetters/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/SickLetters/#issues","title":"Issues","text":""},{"location":"GameDesign/Minigames/SickLetters/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/SickLetters/#optimization","title":"Optimization","text":""},{"location":"GameDesign/Minigames/SickLetters/#open-questions","title":"Open Questions","text":"<p>a new custom Fonts Atla is used: <code>EA4S_Arabic DotsOnly SickLetters SDF</code>. are it really needed? can't it be integrated into the main arabic atlas? how to correctly generate it? what's the difference with <code>EA4S_Arabic DotsOnly DancingDots SDF</code>?</p>"},{"location":"GameDesign/Minigames/SickLetters/#game-design-docs","title":"Game Design Docs","text":""},{"location":"GameDesign/Minigames/SickLetters/#objectives","title":"Objectives","text":"<p>Pedagogical: Teach accent and dot positions related to letter and sounds. This game is pedagogically complementary to Dancing Dots. Play: Fill the scale with dots/diacritics (DDs) to reach the heaviest weight.</p>"},{"location":"GameDesign/Minigames/SickLetters/#mechanics","title":"Mechanics","text":"<p>Time-based, with multiple LLs/challenges.</p> <p>On the right side of the screen, an LL with a letter falls/jumps-in from the top, saying her letter. The LL has a shitload of DDs positioned around the letter. The player will have to remove all the wrong DDs and throw them in a glass vase (which is over a scale). The aim is to make the vase as heavy as possible.</p> <p>Antura will be sleeping on the side of the vase, and will bark in case of error.</p> <ul> <li>When the LL is successfully cleared of all wrong DDs, it will make a HOORAY animation, and a trapdoor will open under her. She will fall into it and a new LL will appear. A new round begins (timer stays the same).</li> <li>If a correct DD is removed (meaning the wrong one to remove), the LL will move angrily and shout her letter again. Antura will wake up and bark, tipping the vase, which will fall and lose all the DDs (then disappear with a POOF). The correct DD will move back into place, and the round will continue. The top weight reached is still preserved, but a new vase will fall down from the top and the player will have to restart filling it from scratch.</li> <li>If the player drops a DD outside the vase, there will be no penalty, except that the DD will disappear with a small POOF, and no weight will be added to the vase.</li> </ul> <p>IMPORTANT: the max weight reached (per game) is always preserved in memory (shown as a colored circle on the scale), so that the final star score will reflect that max weight, and not the one at the endgame. This way, if the player loses all his DDs right before the timer elapses, the game won't be unfair and he will still get a decent score.</p>"},{"location":"GameDesign/Minigames/SickLetters/#antura","title":"Antura","text":"<p>Antura is sleeping on the side of the vase. In case of error, he will wake up and bark, tipping the vase. Then he will go back to sleep.</p>"},{"location":"GameDesign/Minigames/SickLetters/#difficulty-variations","title":"Difficulty variations","text":""},{"location":"GameDesign/Minigames/SickLetters/#gameplay","title":"Gameplay","text":"<ul> <li>Instead of standing idle, the LLs will use dance animations (simple ones) from Dancing Dots, so the player will have to pay attention to what he touches.</li> <li>The vase is smaller, so it's harder to drop DDs in it.</li> </ul>"},{"location":"GameDesign/Minigames/SickLetters/#pedagogical","title":"Pedagogical","text":"<ul> <li>First mistake (dragging the wrong DD) is evidenced by a warning effect, instead of having the DDs container fall immediately.</li> <li>No preventive warning.</li> <li>More DDs (with or without visual aid).</li> </ul>"},{"location":"GameDesign/Minigames/SickLetters/#endgame","title":"Endgame","text":"<p>The game will end when the game timer elapses.</p>"},{"location":"GameDesign/Minigames/SickLetters/#success","title":"Success","text":"<p>If an LL is present, the hatch will open and she will fall inside. The camera focuses on the vase. The scale pushes it upwards with a strong bounce. The vase disappears followed by a rainbow trail.</p>"},{"location":"GameDesign/Minigames/SickLetters/#failure","title":"Failure","text":"<p>Condition: minimum weight not met when game timer elapses. If an LL is present, the hatch will open and she will fall inside. The camera focuses on the vase, which tips on the side and falls, while Antura howls.</p>"},{"location":"GameDesign/Minigames/TakeMeHome/","title":"Take Me Home","text":""},{"location":"GameDesign/Minigames/TakeMeHome/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 1 - Variations     1. TakeMeHome - Difficulty Levels: ininfluent</p>"},{"location":"GameDesign/Minigames/TakeMeHome/#shared-difficulty","title":"Shared Difficulty","text":"<ul> <li>Timer decreases</li> </ul>"},{"location":"GameDesign/Minigames/TakeMeHome/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/TakeMeHome/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/TakeMeHome/#1-takemehome","title":"1. TakeMeHome","text":"<p>Player must find the correct letter.</p>"},{"location":"GameDesign/Minigames/TakeMeHome/#difficulty","title":"Difficulty","text":"<p>Ignored</p>"},{"location":"GameDesign/Minigames/TakeMeHome/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/TakeMeHome/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/TakeMeHome/#issues","title":"Issues","text":""},{"location":"GameDesign/Minigames/TakeMeHome/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/TakeMeHome/#optimization","title":"Optimization","text":""},{"location":"GameDesign/Minigames/TakeMeHome/#open-questions","title":"Open Questions","text":""},{"location":"GameDesign/Minigames/TakeMeHome/#game-design-docs","title":"Game Design Docs","text":""},{"location":"GameDesign/Minigames/TakeMeHome/#objectives","title":"Objectives","text":"<p>Pedagogical:  identify the location of pronunciation of letter in the body Play: Drop the traveling LL in the right hyper tube that would take it home</p>"},{"location":"GameDesign/Minigames/TakeMeHome/#mechanics","title":"Mechanics","text":"<p>Attempt based, Time-based (single timer per round), multiple rounds.</p> <p>A LL walks from the left of the screen to what look like a hyperloop terminal, we hear the sound of the letter, than the shepherd asks the player to say the letter in a loud voice and try to feel from which part the sound is going out from his mouth.</p> <p>After the player identifies where the sound is going out from his mouth, he will drag the LL to the tube that corresponds to the location and drops it in the opening for the LL to go home.</p>"},{"location":"GameDesign/Minigames/TakeMeHome/#antura","title":"Antura","text":"<p>Antura would appear on the left of the screen barking on the LL every time the counter gets to 25%, the LL will jump in fear. If the player fails to move the letter, Antura will run to ward it and the LL will do the Poof ninja disappearing.</p>"},{"location":"GameDesign/Minigames/TakeMeHome/#difficulty-variations","title":"Difficulty variations","text":""},{"location":"GameDesign/Minigames/TakeMeHome/#gameplay","title":"Gameplay","text":"<ul> <li>The game initially starts with 2 tube and we add tube as the player progresses.</li> <li>Time difficulty.</li> </ul>"},{"location":"GameDesign/Minigames/TakeMeHome/#pedagogical","title":"Pedagogical","text":"<p>There is more than 8 places that can be used, nevertheless some letters will sound too close to each others that will confuse the player. We will use only 4 positions in the mouth to identify from where the sound is going out.</p> <ul> <li>2 tubes</li> <li>3 tubes</li> <li>4 tubes</li> </ul>"},{"location":"GameDesign/Minigames/TakeMeHome/#end-round-repeated-per-round","title":"End round (repeated per round)","text":""},{"location":"GameDesign/Minigames/TakeMeHome/#success","title":"Success","text":"<p>The player identifies the right gate where the sound of the letter is going out from and drops the letter in it. The LL would tell him bye bye as a success of the round and disappear inside the tube with a vacuum sound.</p>"},{"location":"GameDesign/Minigames/TakeMeHome/#failure","title":"Failure","text":"<p>The player drops the LL in a totally wrong gate, we hear a rumble and the LL is dropped off (spit off ) from the top tube and lands on the platform for the player to try again. At this stage we help the player a bit by making a raisonance sound and resonating the tube a bit to hint him.</p>"},{"location":"GameDesign/Minigames/ThrowBalls/","title":"Throw Balls","text":""},{"location":"GameDesign/Minigames/ThrowBalls/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 3 - Variations     1. ThrowBalls_letter     2. ThrowBalls_words     3. ThrowBalls_lettersinwords - Difficulty Levels: ???</p>"},{"location":"GameDesign/Minigames/ThrowBalls/#shared-difficulty","title":"Shared Difficulty","text":"<ul> <li>Number of balls decreases</li> <li>????? (TODO, not clear)</li> </ul>"},{"location":"GameDesign/Minigames/ThrowBalls/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/ThrowBalls/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/ThrowBalls/#1-throwballs_letter","title":"1. ThrowBalls_letter","text":"<p>Player must find the correct letter.</p>"},{"location":"GameDesign/Minigames/ThrowBalls/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/ThrowBalls/#2-throwballs_words","title":"2. ThrowBalls_words","text":"<p>Player must find the correct word.</p>"},{"location":"GameDesign/Minigames/ThrowBalls/#scoring_1","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/ThrowBalls/#3-throwballs_lettersinwords","title":"3. ThrowBalls_lettersinwords","text":"<p>Player must find the correct letters in order.</p>"},{"location":"GameDesign/Minigames/ThrowBalls/#scoring_2","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/ThrowBalls/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/ThrowBalls/#issues","title":"Issues","text":""},{"location":"GameDesign/Minigames/ThrowBalls/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/ThrowBalls/#optimization","title":"Optimization","text":""},{"location":"GameDesign/Minigames/ThrowBalls/#open-questions","title":"Open Questions","text":"<ul> <li>Explain difficulty use</li> </ul>"},{"location":"GameDesign/Minigames/ThrowBalls/#game-design-docs","title":"Game Design Docs","text":"<p>Pedagogical Objectives: Differentiate a letter among others. Play Objectives: Use physics skills to hit the right target.</p>"},{"location":"GameDesign/Minigames/ThrowBalls/#mechanics","title":"Mechanics","text":"<p>Attempt-based: no time limit, just balls limit per round.</p> <p>Depending on the round/difficulty-level, the LLs can be:</p> <ul> <li>Static (on ground or above a pile of boxes)</li> <li>Above a pile of boxes that oscillates left and right.</li> <li>Jumping/dancing (on the ground or above a pile of boxes\u2014oscillating or not)</li> <li>Hidden behind bushes (player will have to get the correct timing to hit them when they pop out, before they hide again)</li> </ul> <p>NOTE: hitting the boxes will involve the physics engine: the boxes will bounce around until they become static and disappear with a POOF, while the LL will fall flat on the ground and stand up (this might add a tactical choice: waste a ball to make an LL fall and be easier to hit).</p>"},{"location":"GameDesign/Minigames/ThrowBalls/#antura","title":"Antura","text":"<p>When the player throws the ball, sometimes Antura will appear from off-screen and grab it before it lands. He will then run around with it, and the player will have to grab the ball and drag it away from his mouth in order to re-capture it (without losing it). If the player doesn't do it on time Antura will run away and the ball/life will be lost.</p> <p>Note: the ball is almost as big as Antura's face (to allow for easier interaction).</p> <p>Technical note: if dragging the ball is a problem (both technically or animation-wise, since it would require Antura to stop and pull back a little, like dogs do when you want to steal their ball) we could just have the player \"touch\" the ball.</p>"},{"location":"GameDesign/Minigames/ThrowBalls/#feedback","title":"Feedback","text":"<p>When a wrong LL is hit, she strongly bounces (animation with LL bending back then pushing the ball forward with her chest) the ball back against the screen (the ball will be lost). Each time the screen is hit, a \"cracked glass\" effect appears.</p>"},{"location":"GameDesign/Minigames/ThrowBalls/#difficulty-variations","title":"Difficulty variations","text":""},{"location":"GameDesign/Minigames/ThrowBalls/#gameplay","title":"Gameplay","text":"<ul> <li>More and more moving elements etc (oscillating crates, LLs hiding behind bushes, flying LLs, etc)</li> </ul>"},{"location":"GameDesign/Minigames/ThrowBalls/#pedagogical","title":"Pedagogical","text":"<ul> <li>In more basic levels the actual letter to hit could be shown on screen, while later on it will not be shown at all</li> <li>Hardest difficulties will show more letters and possibly letters that are more similar to each other, so the player will be more skilled in recognizing them</li> </ul>"},{"location":"GameDesign/Minigames/ThrowBalls/#endgame","title":"Endgame","text":"<p>The game will end under one of these conditions:</p> <ul> <li>Too many rounds were lost</li> <li>The required amount of rounds were won</li> </ul>"},{"location":"GameDesign/Minigames/ThrowBalls/#success-repeated-multiple-times-per-game","title":"Success - repeated multiple times per game","text":"<p>The right LL will disappear with a POOF and reappear (POOF again, hooray) in front of the camera, VICTORYRAYS behind her, and play a \"hooray\" animation. The wrong LLs will dance in the background (using one of the first dance animation from DANCING DOTS).</p> <p>The letter/word audio will play the instant the reappearing POOF begins.</p> <p>Note: this must be a fun but quick animation, since it will happen various times for every successful round.</p>"},{"location":"GameDesign/Minigames/ThrowBalls/#failure-repeated-multiple-times-per-game","title":"Failure - repeated multiple times per game","text":"<p>Condition: no more balls and not enough correct LLs hit.</p> <p>All the wrong LLs will disappear with a POOF, while the right LL will be evidenced (ray of light?) and will play a \"provocation\" animation (as if stating that she won, instead of the player\u2014for example, hands on her hips, chest out). If the LL was hidden behind a bush, she will come out before playing the animation.</p> <p>The letter/word audio will play the instant the right LL begins striking her pose.</p>"},{"location":"GameDesign/Minigames/ThrowBalls/#variations_1","title":"Variations","text":"<ul> <li>The LLs are all valid targets, and they must be hit in the correct order to compose a word.</li> <li>LLs contain images instead of words</li> </ul>"},{"location":"GameDesign/Minigames/Tobogan/","title":"Tobogan","text":""},{"location":"GameDesign/Minigames/Tobogan/#testing-procedure","title":"Testing procedure","text":"<p>Total tests: 3 - Variations     1. Tobogan_letters     2. Tobogan_words - Difficulty Levels: ???</p>"},{"location":"GameDesign/Minigames/Tobogan/#shared-difficulty","title":"Shared Difficulty","text":"<ul> <li>????? (TODO, not clear)</li> </ul>"},{"location":"GameDesign/Minigames/Tobogan/#shortcuts","title":"Shortcuts","text":"<p>none</p>"},{"location":"GameDesign/Minigames/Tobogan/#variations","title":"Variations","text":""},{"location":"GameDesign/Minigames/Tobogan/#1-tobogan_letters","title":"1. Tobogan_letters","text":"<p>Player must find the correct letter.</p>"},{"location":"GameDesign/Minigames/Tobogan/#scoring","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/Tobogan/#2-tobogan_words","title":"2. Tobogan_words","text":"<p>Player must find the correct word.</p>"},{"location":"GameDesign/Minigames/Tobogan/#scoring_1","title":"Scoring","text":"<ul> <li>3 stars if...</li> <li>2 stars if...</li> <li>1 star if...</li> </ul>"},{"location":"GameDesign/Minigames/Tobogan/#developer-notes","title":"Developer notes","text":""},{"location":"GameDesign/Minigames/Tobogan/#issues","title":"Issues","text":""},{"location":"GameDesign/Minigames/Tobogan/#warnings-to-be-fixed","title":"Warnings to be fixed","text":""},{"location":"GameDesign/Minigames/Tobogan/#optimization","title":"Optimization","text":""},{"location":"GameDesign/Minigames/Tobogan/#open-questions","title":"Open Questions","text":"<ul> <li>Explain difficulty use</li> </ul>"},{"location":"GameDesign/Minigames/Tobogan/#game-design-docs","title":"Game Design Docs","text":"<p>Pedagogical Objectives: Identify a letter in a word, differentiate letter among others. Play Objectives: Build the highest LL tower possible by dropping the LL in the correct pipe.</p>"},{"location":"GameDesign/Minigames/Tobogan/#mechanics-visuals","title":"Mechanics + Visuals","text":"<p>Camera: full-frontal (nudity included).</p> <p>A series of pipe entrances with various words (one each) and an LL on a trampoline with a letter. Player must drag the LL to a pipe. The pipe will then throw it on a small island/dune/whatever (check visual theme for this). On the island, Antura sleeps on one side.</p> <p>On the trampoline, the letters advance like Lemmings. If you don't catch &amp; drag the first letter to a pipe it will fall down and a time malus will happen.</p> <ul> <li>Time-based. The player must drop the LL in the right pipe as fast as possible. More correct pipes in a row equal to higher LL tower.</li> <li>Right pipe (LL's letter was part of the pipe's word): The LL falls vertically on the island, on top of any previous LL, raising the LL tower level.</li> <li>Wrong pipe: The LL is thrown from a side-pipe-exit and hits Antura (see Antura paragraph). All LLs are lost in the sea, and the LL tower must be restarted (but the current highest level reached is kept for the score).</li> </ul> <p>NOTE: The pipes will have to exit and re-enter the screen, so the player can't just associate a pipe to its exit.</p>"},{"location":"GameDesign/Minigames/Tobogan/#antura","title":"Antura","text":"<p>When hit by an LL, Antura wakes up and runs around the island, throwing down all the current LLs. Then he goes back to sleep. Must be a very quick animation (Antura's I mean, the LLs falling can even take a little while). Feedback</p> <p>When Antura scares the LL tower, the piled LLs start oscillating until they fall, bounce around and then disappear with a POOF.</p>"},{"location":"GameDesign/Minigames/Tobogan/#difficulty-variations","title":"Difficulty variations","text":""},{"location":"GameDesign/Minigames/Tobogan/#gameplay","title":"Gameplay","text":""},{"location":"GameDesign/Minigames/Tobogan/#pedagogical","title":"Pedagogical","text":""},{"location":"GameDesign/Minigames/Tobogan/#endgame","title":"Endgame","text":"<p>The game will end when the game timer elapses.</p>"},{"location":"GameDesign/Minigames/Tobogan/#success","title":"Success","text":"<p>The pipes disappear and we focus only on the LL tower. Based on the level/stars reached, a different type of bird might land on the top LL: canary, parrot, eagle (to discuss).</p>"},{"location":"GameDesign/Minigames/Tobogan/#failure","title":"Failure","text":"<p>Condition: minimum height not met when game timer elapses.</p> <p>If there's some piled LLs they fall into the sea. Antura sits and howls to the sky.</p>"},{"location":"GameDesign/Minigames/Tobogan/#variations_1","title":"Variations","text":"<p>Only two pipes with SUN and MOON. Player must associate LL correctly.</p>"},{"location":"GameDev/HowTo/","title":"User and Tester guides","text":"<ul> <li>Debug Shortcuts cheats and keyboard shortcuts</li> <li>Export Database how to export player databases</li> </ul>"},{"location":"GameDev/HowTo/#developer-guides","title":"Developer guides","text":"<ul> <li>Install how to install and configure the Unity project</li> <li>Build how to build the app for mobile devices</li> <li>Create Edition</li> <li>Collaborator how to collaborate</li> <li>Developer Guidelines and Tips general guidelines for developers that want to contribute to the project</li> <li>Refactoring Guidelines</li> <li>Export Google Sheet Data as JSON files</li> <li> <p>Drawing Font how to create the drawings font Atlas with TextMeshPro</p> </li> <li> <p>How To regenerate DoxyGen docs</p> </li> </ul>"},{"location":"GameDev/HowTo/APIDocsGeneration/","title":"Generating the API documentation","text":"<ul> <li>Download and install Doxygen</li> <li>Open Doxygen Wizard</li> <li>Configure as follows:</li> <li>Working directory: <code>/Assets/_app/_scripts</code></li> <li>Project name: Antura</li> <li>Source code directory: <code>/Assets/_app/_scripts</code></li> <li>Scan recursively: True</li> <li>Destination directory: Choose an empty <code>[OutputFolder]</code></li> <li>Extraction mode: All Entities</li> <li>Output: HTML</li> <li>Diagrams: built-in</li> <li>Run Doxygen</li> <li>Copy the contents of <code>[OutputFolder]\\html\\</code> into <code>/docs/API</code></li> </ul>"},{"location":"GameDev/HowTo/AudioFiles/","title":"How to record audio files","text":""},{"location":"GameDev/HowTo/AudioFiles/#format","title":"Format","text":"<p>All voice audio (dialogs, words, etc), should be MONO, 44.1KHz files and should be well trimmed at beginning (at zero crossing!)</p> <p>Level shoudl be normalized with a peak reference at -6db</p> <p>In the Unity project they are saved in MP3 format, with middle quality VBR (Variable Bit Rate).</p> <p>To easy the voice audio normalization we have a macro script for Audacity: you can find it here: Antura Normalize Vocabulary - Audacity macro.txt</p>"},{"location":"GameDev/HowTo/AudioFiles/#why","title":"Why?","text":"<p>because we have lots of voice audio files and don't want to waste app space, and voice recordings just need mono and medium compression.</p>"},{"location":"GameDev/HowTo/AudioFiles/#tools","title":"Tools","text":"<p>Audacity is a perfect free multiplatform tool to edit audio files.</p> <p>on macOS we use the free utility xAct to batch convert audio files.</p>"},{"location":"GameDev/HowTo/Build/","title":"Build Antura","text":""},{"location":"GameDev/HowTo/Build/#desktop","title":"Desktop","text":"<ul> <li>we are currently using the Could build</li> </ul>"},{"location":"GameDev/HowTo/Build/#android","title":"Android","text":"<ul> <li>we are currently using the Could build</li> </ul>"},{"location":"GameDev/HowTo/Build/#ios","title":"iOS","text":"<ul> <li>latest XCode</li> <li>disable the BitCode flag (done automatically)</li> </ul> <p>With FB Sdk iOS:</p> <p>brew install cocoapods pod install</p> <p>XCode: - Set yes on Always Embed Swift Standard Libraries in target Unity-iPhone in Build Settings. - Set no on Always Embed Swift Standard Libraries in target UnityFramework in Build Settings.</p> <p>Enable bitcode in Pods-Unity-iPhone</p>"},{"location":"GameDev/HowTo/Collaborator/","title":"Collaborator Guidelines","text":"<p>We are developing a public project released Open Source. Even if developing a part, everybody is asked to keep in mind the full overview of the project.</p>"},{"location":"GameDev/HowTo/Collaborator/#communication","title":"Communication","text":"<ul> <li>The default language for docs is english.</li> <li>The main communication tool is Slack.</li> <li>The Unity project is managed on GitHub</li> <li>Whoever commits to the Unity project is asked to be really precise in the commit - comment (it will be used in the automatic changelog of the project), with the \u201cOne - feature is One commit rule\u201d</li> <li>Everybody can commit to the dev branch. Whenever needed we\u2019ll merge into maion - branch</li> <li>The dev branch should be always buildable (no blocking issues). It can contain - warnings and bugs, but no compilation errors.</li> <li>As issue manager we use GitHub issues.</li> <li>The default time zone for everyone is the CET (Paris / Berlin / Rome)</li> </ul> <p>When commenting a build, we should always refer to its version (the number written in the bottom right corner of the home screen). Eventually the build number. And if reporting a bug be as precise as possible (not just say: \u201cit doesn\u2019t work\u201d</p>"},{"location":"GameDev/HowTo/Collaborator/#development-standards","title":"Development Standards","text":"<p>We try to follow the highest quality standard in every aspect of production. Humble enough to ask advice and help from others if we can\u2019t achieve it. There is no \u201ci\u2019m better than you\u201d competition, but \u201chey i\u2019m really good at that let me improve it\u201d.</p> <p>We\u2019ll have a weekly development cycle (with a build made at least every friday evening, to be freely tested in the weekends)</p> <p>When doing something, let\u2019s keep in mind that it could/should be accessed and modified by someone else, so: clean and self speaking variables and filenames, comments when appropriate.</p> <p>The target players of the app are kids from 5-10 who basically can\u2019t read</p>"},{"location":"GameDev/HowTo/Collaborator/#uiux-guidelines","title":"UI/UX Guidelines","text":"<ul> <li>Base res is landscape 16:9 from minimal 1024 x 600 to full HD 1920*1080</li> <li>The UI and all app scales on different screen sizes (even 4:3)</li> <li>Basic target player can\u2019t read</li> <li>Arabic is a RTL (Right to Left) language</li> <li>Arabs may have some conventions different from Europeans (since the RTL)</li> <li>As all media assets, original / hires versions should be in Google Drive, Unity - project will have optimized / resized versions</li> <li>All media will be licensed under Creative Commons.</li> </ul>"},{"location":"GameDev/HowTo/Collaborator/#art-and-assets-guidelines","title":"Art and Assets Guidelines","text":"<ul> <li>All raster should be pixel perfect on a Full HD screen.</li> <li>All 3D models should be the low poly as possible.</li> <li>3D skeletons should be properly names.</li> <li>3D animations should be separated from the 3D models.</li> <li>As all media assets, original / hires versions should be in Google Drive, Unity - project will have optimized / resized versions.</li> <li>All media will be licensed under Creative Commons.</li> </ul>"},{"location":"GameDev/HowTo/Collaborator/#sound-guidelines","title":"Sound Guidelines","text":"<ul> <li>ogg, wav or mp3 mono files are the preferred formats (stereo if really really necessary)</li> <li>Music should have a declared BPM and be perfectly loopable</li> <li>All media will be licensed under Creative Commons.</li> </ul>"},{"location":"GameDev/HowTo/CreateEdition/","title":"How to create a new edition","text":"<ol> <li>add edition enum to AppEditionID</li> <li>add content enum to LearningContentID</li> <li>add used language enums to LanguageCode</li> <li>create <code>edition_?</code> folder in <code>_config</code> (copy it from a similar one, payattention to .meta)</li> <li>configure the edition and content configs with the new languages</li> <li>create language folder in <code>/_lang_bundles</code> and configure</li> <li>create in <code>json_data</code> a Google Sheet ref for every data to sync (for example <code>Polish_Vocabulary</code>) and set its google sheed uid and filename</li> <li>open Manage Database scene and import the google data...</li> </ol>"},{"location":"GameDev/HowTo/CreateEdition/#git","title":"Git","text":"<p>there are tre ways to manage a custom edition: 1. clone the project and keep it separated, like a custom product 2. fork the project, work on a branch and then submit the changes to the main repository wtih Pull Requests 3. ask for write access to the main repository if we can manage to collaborate.</p> <p>In anyway you should create an <code>edition_name</code> branch</p>"},{"location":"GameDev/HowTo/CreateEdition/#unity-cloud","title":"Unity Cloud","text":"<ul> <li>create new project (every app has a different project_id)</li> <li>setup Cloud Build</li> <li>setup Analytics</li> </ul>"},{"location":"GameDev/HowTo/CreateEdition/#publish","title":"Publish","text":"<p>We don't cover here how to publish on Google Play and Apple App Store. It would be bettere if we do it together and if the app is an official Antura Edition, we can publish it for you.</p>"},{"location":"GameDev/HowTo/DebugShortcuts/","title":"Debug and Shortcuts","text":""},{"location":"GameDev/HowTo/DebugShortcuts/#debug-panel","title":"Debug Panel","text":"<p>to enable the Debug panel, the app has to be compiled with the <code>AppConstants.DebugPanelEnabled = true</code>, and then TRIPLE CLICK on the bottom right corner of the screen</p>"},{"location":"GameDev/HowTo/DebugShortcuts/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>these works in Editor and in the Desktop versions of Antura</p> <ul> <li>SHIFT + B add 50 bones</li> </ul> <p>Home scene - SHIFT + R open reserved area bypassing the parental gate</p> <p>Intro &amp; End scenes - SPACE skips current scene</p> <p>Minigames - 0, 1, 2, 3 ends the current minigmaes with 0 (fail), 1, 2, 3 stars</p>"},{"location":"GameDev/HowTo/DeveloperGuidelines/","title":"Developer Guidelines and Tips","text":"<p>Developers should follow these guidelines for contributing to the project.</p>"},{"location":"GameDev/HowTo/DeveloperGuidelines/#coding-conventions","title":"Coding conventions","text":"<ul> <li>Indent using four spaces (no tabs)</li> <li>Use Unix newline</li> <li>Use Allman style braces, but for <code>if</code> and <code>for</code></li> <li>Use camelCase for internal and private fields</li> <li>Use CamelCase for public fields</li> <li>Use CamelCase for all methods, public and private, for classes, enum types and enum values.</li> <li>Use THIS_STYLE for constants.</li> <li>Regions can be used to group code logically. No nested regiones. Use CamelCase for region names.</li> <li>No copyright notice nor author metadata should be present at the start of the file, unless it is of a third party</li> <li>Never commit if you encounter compilation errors or warnings.</li> </ul>"},{"location":"GameDev/HowTo/DeveloperGuidelines/#naming-conventions","title":"Naming conventions","text":"<ul> <li>Use MiniGame, not Minigame (but minigame when lowercase)</li> <li>All data related to the learning content should be referred to as Vocabulary data (instead of the triad Letter/Word/Phrase)</li> <li>All data related to the journey progression should be referred to as Journey data (which consists of Stage + LearningBlock + PlaySession)</li> </ul>"},{"location":"GameDev/HowTo/DeveloperGuidelines/#namespaces","title":"Namespaces","text":"<p>The whole codebase is under the Antura namespace. The main systems can be accessed through the Antura namespace and thus fall under it.</p> <p>All minigames are under the Antura.MiniGames namespace. Each minigame needs its own namespace in the form of Antura.MiniGames.GAME_ID with GAME_ID being the name of the minigame.</p> <p>Most core code will be in a subsystem. Specific subsystem code is inside a Antura.SUBSYSTEM namespace, where SUBSYSTEM is the subsystem's name. What follows is a list of subsystems with their namespaces:</p> <ul> <li>Antura.Core for the core managers and data of the appllication.</li> <li>Antura.AnturaSpace for code related to the Antura Space scene.</li> <li>Antura.PlayerBook for code related to the Player Book scene.</li> <li>Antura.GamesSelector handles the Games Selector scene.</li> <li>Antura.Animations for general animation utilities.</li> <li>Antura.Database for database access and organization.</li> <li>Antura.LivingLetters for scripts related to the Living Letter characters.</li> <li>et cetera...</li> </ul> <p>Never commit anything without a namespace, nor anything under the root Antura namespace</p>"},{"location":"GameDev/HowTo/DeveloperGuidelines/#git-ignore","title":"Git Ignore","text":"<p>there are several fiels and directories put under Git Ignore.. the useful from Dev POV are:</p> <pre><code>Local/\nLocal.meta\n</code></pre> <p>if you create a Assets/Local directory, you can put inside whatever personal you want, and won't be versioned.</p>"},{"location":"GameDev/HowTo/DeveloperGuidelines/#coding-guidelines","title":"Coding Guidelines","text":"<ul> <li>We can use any external plugin, obviously the fewer the better</li> <li>All code and app architecture must be self speaking (in English) to be easily read by new/external contributors</li> <li>Flexibility: no hardcoded vars. Anything should be parameterized (for app variations in other languages or modular evolution)</li> <li>Git commit rule: One feature is One commit rule</li> <li>Commit a feature with all its dependencies when it\u2019s working and tested at least once</li> <li>The commit message should be a simple description of what has been done (the Git log will be used to generate the app changelog so pay attention), with a prefix like: [plugin] lorem ipsum v 1.x.x [bug] fixed xxx [feature] added this in that [changed] behaviour x now does y [cgl] cleaned minigame x code     </li> <li>C# only + Unix line endings</li> <li>Use <code>Antura</code> namespace for the app, and <code>Antura.minigame</code> for specific minigames classes.</li> <li>No compilation errors (red) allowed in the dev branch. Always buildable.</li> <li>No compilation warnings (yellow) allowed in master branch (if possible)</li> <li>All the code must be released under the MIT License </li> <li>Everyone should commit just to dev branch (eventually their own) when a feature / debug is done and tested. Do no push to origin without some local testing. Team leads will merge into master to trigger testing builds.</li> </ul>"},{"location":"GameDev/HowTo/DrawingsFont/","title":"How to create the Drawings font","text":""},{"location":"GameDev/HowTo/DrawingsFont/#how-to-draw-a-word","title":"How to Draw a word","text":"<p>NOTE for the artists: the vectorial drawings are Black and White and must be saved in SVG format with all paths closed, exploded and with no hidden layer. In this repo you can find current used drawings: Antura_assets</p>"},{"location":"GameDev/HowTo/DrawingsFont/#create-the-font","title":"Create the Font","text":"<ol> <li>Open it with Affinity Designer (maybe we could use Inkscape but i'm not sure it exports slices). check that every layer is named as the word_id in the Sheet.</li> <li>Export all groups/layers as slices as SVG (for web) into the SVG/todo</li> <li>Import all these single SVG files into Glyph (could be any OTF font maker), assigning the Unicode to the Sheet and moving the SVG file into the \"used\" folder</li> <li>make sure that every unicode id in Google Sheet WordData is unique</li> <li>Export the OTF font into <code>/Assets/_app/Fonts/AnturaWordDrawings-Regular.otf</code></li> <li>open TextMesh Pro Font Asset Creator using these parameters:</li> </ol> <pre><code>Font Source: AnturaWordDrawings-Regular.otf\nFont Size: Auto Sizing\nFont padding: 5\nPacking Method: Optimum\nAtlas res: 2048x2048\nFont Render Mode: Distance Field 32\n</code></pre>"},{"location":"GameDev/HowTo/DrawingsFont/#hex-character-sequences","title":"Hex Character Sequences","text":""},{"location":"GameDev/HowTo/DrawingsFont/#common","title":"Common:","text":"<p>22-23,26,28,2A,2F-31,33-36,39-3B,3F,42-4B,4D-54,56,58-5B,5D-5E,61-65,68,6B-6C,6E-71,73,75-7B,91,98,9A,A1-A7,AB,AE,B7,BF-C0,C2,C4-D6,D8-DF,E2,E4-E5,E7-EB,ED-F1,F3-F5,F8,FB,FD-FE,100,103-104,10C-10F,112-113,116,118-11A,11E-123,126-127,12A-12B,12E-131,136-137,139-13E,141-148,14A-14D,150-15B,15E-167,16A-16B,16E-17E,218-21B,300-302,307-308,391-398,3A6,402-404,407,409-40C,40E-40F,452-454,457,473,4CF,4E2-4E3,4E8-4E9,1E80-1E85,1EA4-1EA7,1EAA,1EF2-1EF3,2019,2020-2022,2026,2030,2044,2191-2192,2196-2198,2265,2669-266F,3A7,3A8,3A9,388,386,38C,38A,38E,3AA,38F,389</p>"},{"location":"GameDev/HowTo/DrawingsFont/#arabic-addon","title":"Arabic addon:","text":"<p>24-25,27,29,2B-2C,2E,31-32,37-39,40-41,4C,55,57,5C,5F,64,67,69-6A,6D,70,72-74,77,79-7D,80,82,90,92-97,99,9B-9F,A9,B0,B6-B7,BB,C0-C1,C5,C8-C9,CB,CD-CF,D4,D8,E0,E3,E6,EC,F2,F6,F9-FA,FF,101-102,105-10B,10D,114-115,11B,494-495,4A8-4AB,4B2-4B3,4B6-4B8,4BC-4BE,4CB,4D0,4D2,4F4,4F6,2018,201C-201D,2039-203A,20AC,2190,2193-2195,2199,2265</p>"},{"location":"GameDev/HowTo/DrawingsFont/#french-addon","title":"French addon:","text":"<p>//392-398,399-3A1,3A3-3A5</p>"},{"location":"GameDev/HowTo/DrawingsFont/#spanish-addon","title":"Spanish addon:","text":"<p>//413,414,416,417,418,419,41A,423,424,41B,41F,427,426,428,429,42E,42F,431,437</p>"},{"location":"GameDev/HowTo/DrawingsFont/#not-used","title":"NOT USED","text":""},{"location":"GameDev/HowTo/DrawingsFont/#arabic-total-291-glyphs-with-size-221","title":"ARABIC (TOTAL: 291 glyphs with size 221)","text":"<p>22-5F,61-7E,80,82,90-9F,A1-A7,A9,AB-AC,AE,B0-B1,B6-B7,BB,BF-C2,C4-10F,112-115,118-11B,122-123,12A-12B,12E-12F,136-137,14A-14B,152-153,175,177,300-302,307-308,391,494-495,4A8-4AB,4B2-4B3,4B6-4B8,4BC-4BE,4CB,4D0,4D2,4F4,4F6,1EA7,2018-2019,201C-201D,2020-2022,2026,2030,2039-203A,20AC,2190-2199,2202,2205,220F,2211-2212,221A,221E,222B,2248,2260,2264-2265,2669-266F</p>"},{"location":"GameDev/HowTo/DrawingsFont/#learnenglish-total-265-glyphs-with-size-231","title":"LearnEnglish (TOTAL: 265 glyphs with size 231)","text":"<p>LearnFrench: 268 glyphs a 218 Character Set: Unicode Range (Hex) with this Sequence:</p> <p>011E,011F,014D,015A,015B,015E,015F,016A,016B,016E,016F,0176,017A,017B,017C,017D,017E,021A,021B,04F7,100,103,104,10D,10E,10F,112,113,116,118,119,11A,120,121,122,123,126,127,12A,12B,12E,12F,130,131,136,137,139,13A,13B,13C,13D,13E,141,142,143,144,145,146,147,148,14A,14C,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,171,172,173,174,177,178,179,1E80,1E81,1E82,1E83,1E84,1E85,1EA4,1EA5,1EA6,1EA7,1EAA,1EF2,1EF3,2019,2022,2026,2030,2044,218,219,2191,2192,2196,2197,2198,22,2202,2205,220F,2211,2212,221A,221E,222B,2248,2260,2264,26,2669,266A,266B,266C,266D,266E,266F,2A,2F,30,31,33,34,35,36,39,3A,3C,3D,3E,3F,42,43,44,45,46,47,49,4A,4B,4D,4E,50,51,52,53,54,56,58,59,5A,5B,5D,61,62,63,64,65,68,6B,6C,6E,6F,70,71,73,75,77,79,7A,7B,7E,98,A1,A2,A3,A5,A7,AB,AC,B1,BF,C0,C2,C4,C5,C6,C7,C8,C9,CA,CB,CC,CE,CF,D0,D1,D2,D3,D4,D5,D6,D7,D8,D9,DB,DD,DE,DF,E2,E4,E5,E7,E8,E9,EA,EB,ED,EE,EF,F0,F1,F3,F4,F5,F7,F8,FB,FD,FE</p> <p>EN calendar: ,3C,3D,3E,7E,AC,B1,D7,F7,2202,2205,220F,2211,2212,221A,221E,222B,2248,2260,2264</p> <p>FR calendar: 392,393,394,395,396,397,398,039B,039F,03A4,399,398,039E,039D,039A,039C,03A3,03A1,03A0</p>"},{"location":"GameDev/HowTo/ExportGoogleSheetData/","title":"How to export data from Google Sheets","text":"<p>Note: from 2020 the Sheets are imported direclty from the Unity Editor. These docs are good to export the JSON manually.</p> <p>We store all static data as JSON files. These can be exported from Google Sheets by an open source addon: \"Export Sheet Data\".</p>"},{"location":"GameDev/HowTo/ExportGoogleSheetData/#install-this-addo-to-google-sheets","title":"Install this addo to Google Sheets:","text":"<ul> <li>in a Google Sheet, click \"Add-ons/Get Add-ons\"</li> <li>find \"Export Sheet Data\" and add it</li> </ul>"},{"location":"GameDev/HowTo/ExportGoogleSheetData/#export-json-data","title":"Export JSON data:","text":"<ul> <li>Open the Sheet you want to export</li> <li>click Add-ons/Export Sheet Data/Open Sidebar</li> <li>keep everything at the default settings, but:</li> <li>select \"Current sheet only\" for \"Select Sheet(s)\" under \"Format\"</li> <li>tick \"Force string values\" under \"JSON Options\"</li> <li>tick \"Export sheet arrays\" under \"JSON Options\"</li> <li>click the Export button</li> <li>download the file</li> </ul>"},{"location":"GameDev/HowTo/ExportPlayerDatabase/","title":"How to retrieve the player database","text":"<p>The player Profile Database is saved as a SQLite database and can be easily retrieved and shared.</p>"},{"location":"GameDev/HowTo/ExportPlayerDatabase/#android","title":"Android","text":"<p>Go to the Folder: <code>\\storage\\emulated\\0\\Android\\data\\org.eduapp4syria.antura\\files\\players</code> \u00a0 You will find 1 to 5 files names like: <code>Antura_Player_5b8e61c3-f990-43f5-a43f-e7cbf9556f17.sqlite3</code></p> <p>5b8e61c3-f990-43f5-a43f-e7cbf9556f17 being the UID of the profile/player\u00a0 NOTE: the number of files depends of the number of profiles that have been created on the phone \u00a0 COPY ALL THE FILES YOU FIND! The simplest way to copy the files is by connecting the Android phone to a PC, but you could also send them via Bluetooth (or in another way directly from the phone).</p>"},{"location":"GameDev/HowTo/ExportPlayerDatabase/#ios","title":"iOS","text":"<p>Attach the iOS device to a computer via USB and open iTunes. Go to your device -&gt; Apps -&gt; File Sharing panel and select Antura. Drag the <code>players</code> folder onto your Desktop and the files are all there.</p> <p></p>"},{"location":"GameDev/HowTo/ExportPlayerDatabase/#windows","title":"Windows","text":"<p>Check folder <code>C:\\Users\\&lt;username&gt;\\AppData\\LocalLow\\CGL_VGWB_Wixel\\Antura\\players\\</code></p>"},{"location":"GameDev/HowTo/ExportPlayerDatabase/#browse-the-sqlite-database","title":"Browse the SQLite Database","text":"<p>The Database can then be opened with any SQLite Viewer, like the following one (online): http://inloop.github.io/sqlite-viewer/ You just drag and drop the file and you browse it!</p>"},{"location":"GameDev/HowTo/ExportPlayerDatabase/#recover-the-player-id-uuid","title":"Recover the player ID (UUID)","text":"<p>To recover the player ID, you have to</p> <ol> <li>Go in the parent section (yellow button top right of the home screen)</li> <li>Pass the parent code test (that ask you to press in a certain order colored buttons)</li> <li>Then in the parent section you select the profile icon of the player</li> <li>And the ID appears just under the icon</li> </ol>"},{"location":"GameDev/HowTo/Fonts/","title":"Fonts Atlas","text":"<p>We have several fonts used:</p>"},{"location":"GameDev/HowTo/Fonts/#ui","title":"UI","text":""},{"location":"GameDev/HowTo/Fonts/#amatic-ui","title":"Amatic UI","text":"<p>version number edition panels book UI book: minigames titles player: age btn map: levels</p>"},{"location":"GameDev/HowTo/Fonts/#wondercomic-xxxxx","title":"WonderComic XXXXX","text":"<p>home buttons</p>"},{"location":"GameDev/HowTo/Fonts/#liberationsans","title":"LiberationSans","text":"<p>reserved area intro words dev hints</p>"},{"location":"GameDev/HowTo/Fonts/#learning-font","title":"Learning Font","text":""},{"location":"GameDev/HowTo/Fonts/#futura-handwritten","title":"Futura (handwritten):","text":"<p>letters / words main book buttons map: signs levels</p>"},{"location":"GameDev/HowTo/Fonts/#arabic","title":"Arabic","text":"<p>letters / words main for alla arabic texts (both letters and UI)</p>"},{"location":"GameDev/HowTo/Fonts/#drawings","title":"Drawings","text":"<p>for words images</p>"},{"location":"GameDev/HowTo/Fonts/#how-to-create-the-arabic-font-atlas","title":"How to create the Arabic font Atlas","text":"<p>Open TextMesh Pro Font Asset Creator using these parameters:</p> <pre><code>Font Source: EA4S Arial.ttf\nFont Size: Auto Sizing\nFont padding: 5\nPacking Method: Optimum\nAtlas res: 1024x1024\nCharacter Set: Unicode Range (Hex) with this Sequence:\n20-7E,600-603,60B-615,61B,61E-61F,621-63A,640-65E,660-6DC,6DF-6E8,6EA-6FF,750-76D,FB50-FBB1,FBD3-FBE9,FBFC-FBFF,FC5E-FC62,FD3E-FD3F,FDF2,FDFC,FE80-FEFC\n\nFont Render Mode: Distance Field 16\n</code></pre>"},{"location":"GameDev/HowTo/Fonts/#notes","title":"Notes","text":"<p>the Unicode Range (Hex) is composed by:</p> <ul> <li>basic latin: <code>20-7E</code></li> <li>arabic: <code>600-603,60B-615,61B,61E-61F,621-63A,640-65E,660-6DC,6DF-6E8,6EA-6FF,750-76D,FB50-FBB1,FBD3-FBE9,FBFC-FBFF,FC5E-FC62,FD3E-FD3F,FDF2,FDFC,FE80-FEFC</code></li> </ul>"},{"location":"GameDev/HowTo/Fonts/#sickletters-ea4s_arabic_dots_only-sdf-1","title":"SickLetters EA4S_Arabic_Dots_Only SDF 1","text":"<pre><code>32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,1536,1537,1538,1539,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1563,1566,1567,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,64336,64337,64338,64339,64340,64341,64342,64343,64344,64345,64346,64347,64348,64349,64350,64351,64352,64353,64354,64355,64356,64357,64358,64359,64360,64361,64362,64363,64364,64365,64366,64367,64368,64369,64370,64371,64372,64373,64374,64375,64376,64377,64378,64379,64380,64381,64382,64383,64384,64385,64386,64387,64388,64389,64390,64391,64392,64393,64394,64395,64396,64397,64398,64399,64400,64401,64402,64403,64404,64405,64406,64407,64408,64409,64410,64411,64412,64413,64414,64415,64416,64417,64418,64419,64420,64421,64422,64423,64424,64425,64426,64427,64428,64429,64430,64431,64432,64433,64467,64468,64469,64470,64471,64472,64473,64474,64475,64476,64477,64478,64479,64480,64481,64482,64483,64484,64485,64486,64487,64488,64489,64508,64509,64510,64511,64606,64607,64608,64609,64610,64830,64831,65010,65020,65152,65153,65154,65155,65156,65157,65158,65159,65160,65161,65162,65163,65164,65165,65166,65167,65168,65169,65170,65171,65172,65173,65174,65175,65176,65177,65178,65179,65180,65181,65182,65183,65184,65185,65186,65187,65188,65189,65190,65191,65192,65193,65194,65195,65196,65197,65198,65199,65200,65201,65202,65203,65204,65205,65206,65207,65208,65209,65210,65211,65212,65213,65214,65215,65216,65217,65218,65219,65220,65221,65222,65223,65224,65225,65226,65227,65228,65229,65230,65231,65232,65233,65234,65235,65236,65237,65238,65239,65240,65241,65242,65243,65244,65245,65246,65247,65248,65249,65250,65251,65252,65253,65254,65255,65256,65257,65258,65259,65260,65261,65262,65263,65264,65265,65266,65267,65268,65269,65270,65271,65272,65273,65274,65275,65276\n</code></pre>"},{"location":"GameDev/HowTo/Fonts/#dancing-dots-ea4s_arabic_dotless-sdf","title":"Dancing Dots EA4S_Arabic_Dotless SDF","text":"<pre><code>32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,1536,1537,1538,1539,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1563,1566,1567,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,64336,64337,64338,64339,64340,64341,64342,64343,64344,64345,64346,64347,64348,64349,64350,64351,64352,64353,64354,64355,64356,64357,64358,64359,64360,64361,64362,64363,64364,64365,64366,64367,64368,64369,64370,64371,64372,64373,64374,64375,64376,64377,64378,64379,64380,64381,64382,64383,64384,64385,64386,64387,64388,64389,64390,64391,64392,64393,64394,64395,64396,64397,64398,64399,64400,64401,64402,64403,64404,64405,64406,64407,64408,64409,64410,64411,64412,64413,64414,64415,64416,64417,64418,64419,64420,64421,64422,64423,64424,64425,64426,64427,64428,64429,64430,64431,64432,64433,64467,64468,64469,64470,64471,64472,64473,64474,64475,64476,64477,64478,64479,64480,64481,64482,64483,64484,64485,64486,64487,64488,64489,64508,64509,64510,64511,64606,64607,64608,64609,64610,64830,64831,65010,65020,65152,65153,65154,65155,65156,65157,65158,65159,65160,65161,65162,65163,65164,65165,65166,65167,65168,65169,65170,65171,65172,65173,65174,65175,65176,65177,65178,65179,65180,65181,65182,65183,65184,65185,65186,65187,65188,65189,65190,65191,65192,65193,65194,65195,65196,65197,65198,65199,65200,65201,65202,65203,65204,65205,65206,65207,65208,65209,65210,65211,65212,65213,65214,65215,65216,65217,65218,65219,65220,65221,65222,65223,65224,65225,65226,65227,65228,65229,65230,65231,65232,65233,65234,65235,65236,65237,65238,65239,65240,65241,65242,65243,65244,65245,65246,65247,65248,65249,65250,65251,65252,65253,65254,65255,65256,65257,65258,65259,65260,65261,65262,65263,65264,65265,65266,65267,65268,65269,65270,65271,65272,65273,65274,65275,65276\n\n## Dancing Dots EA4S_Arabic_Dots_Only SDF\n\n32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,1536,1537,1538,1539,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1563,1566,1567,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,64336,64337,64338,64339,64340,64341,64342,64343,64344,64345,64346,64347,64348,64349,64350,64351,64352,64353,64354,64355,64356,64357,64358,64359,64360,64361,64362,64363,64364,64365,64366,64367,64368,64369,64370,64371,64372,64373,64374,64375,64376,64377,64378,64379,64380,64381,64382,64383,64384,64385,64386,64387,64388,64389,64390,64391,64392,64393,64394,64395,64396,64397,64398,64399,64400,64401,64402,64403,64404,64405,64406,64407,64408,64409,64410,64411,64412,64413,64414,64415,64416,64417,64418,64419,64420,64421,64422,64423,64424,64425,64426,64427,64428,64429,64430,64431,64432,64433,64467,64468,64469,64470,64471,64472,64473,64474,64475,64476,64477,64478,64479,64480,64481,64482,64483,64484,64485,64486,64487,64488,64489,64508,64509,64510,64511,64606,64607,64608,64609,64610,64830,64831,65010,65020,65152,65153,65154,65155,65156,65157,65158,65159,65160,65161,65162,65163,65164,65165,65166,65167,65168,65169,65170,65171,65172,65173,65174,65175,65176,65177,65178,65179,65180,65181,65182,65183,65184,65185,65186,65187,65188,65189,65190,65191,65192,65193,65194,65195,65196,65197,65198,65199,65200,65201,65202,65203,65204,65205,65206,65207,65208,65209,65210,65211,65212,65213,65214,65215,65216,65217,65218,65219,65220,65221,65222,65223,65224,65225,65226,65227,65228,65229,65230,65231,65232,65233,65234,65235,65236,65237,65238,65239,65240,65241,65242,65243,65244,65245,65246,65247,65248,65249,65250,65251,65252,65253,65254,65255,65256,65257,65258,65259,65260,65261,65262,65263,65264,65265,65266,65267,65268,65269,65270,65271,65272,65273,65274,65275,65276\n</code></pre>"},{"location":"GameDev/HowTo/INSTALL/","title":"Install and Configure","text":""},{"location":"GameDev/HowTo/INSTALL/#requirements","title":"Requirements","text":"<ul> <li>Unity latest 2020, Mac or Windows computer</li> </ul>"},{"location":"GameDev/HowTo/INSTALL/#fetch-the-project","title":"Fetch the Project","text":"<ol> <li>Get Unity latest 2020 stable (Win or Mac) from https://unity3d.com/get-unity/download/archive</li> <li>Download the project. There are two ways:     A) the simple is to download the zipped package (from Clone or Download green button)     B) the advanced is to use a Git client to track the changes and update the project as it gets developed:<ul> <li>Install a free GitHub client (https://fork.dev/ and https://www.sourcetreeapp.com/ are good for developers, https://desktop.github.com/ is a simpler one for anybody)</li> <li>fetch the project from this repository https://github.com/vgwb/Antura_arabic (you can read https://help.github.com/desktop/guides/getting-started/ for some help using GitHub Desktop)</li> </ul> </li> <li>Play. Open the project in Unity and open scene <code>_app/_scenes/app_Bootstrap</code> and press Play ;)</li> </ol>"},{"location":"GameDev/HowTo/INSTALL/#editor-setup","title":"Editor Setup","text":"<p>set the Build Setup to Desktop, iOS or Android platform.</p> <p>then set the Game window to 16:9 (under iOS there is a preset called iPhone 5 Wide (16:9))</p>"},{"location":"GameDev/HowTo/RefactoringGuidelines/","title":"Refactoring Guidelines","text":"<p>These notes represent guidelines for refactoring the Antura code.</p>"},{"location":"GameDev/HowTo/RefactoringGuidelines/#code-annotations","title":"Code annotations","text":"<p>The code is annotated to highlight pieces of code that should be refactored. The following tags may be found throughout the code:</p> <ul> <li>(refactor): the code should be logically refactored</li> <li>(obsolete): the code should be removed</li> <li>(convention): the code should be refactored to match our conventions</li> </ul>"},{"location":"GameDev/HowTo/RefactoringGuidelines/#documentation-notes","title":"Documentation notes","text":"<p>The specific systems documentation files contain more general notes on refactoring partaining to that subsystem. See the other .md files for more information.</p>"},{"location":"GameDev/HowTo/RefactoringGuidelines/#refactoring-notes-important","title":"Refactoring notes: Important","text":"<p>These notes are for current development.</p> <ul> <li>Database and PlayerProfile use should be linked (no ease of access to either)</li> <li>Managers are scattered among many different folders and use widely different conventions. They should be refactored to show a common intention.</li> <li>Many managers are static makeshift singleton-like classes. Better access should be provided.</li> <li>Helper / utility methods and classes use must be standardized throught the codebase.</li> <li>Helpers should probably belong to the DB, and not to the Teacher.</li> </ul>"},{"location":"GameDev/HowTo/RefactoringGuidelines/#refactoring-notes","title":"Refactoring notes","text":"<ul> <li>Move the contents of _app/Elements to the correct Models/Images folders.</li> <li>Move the contents of Resources to _app/Resources</li> <li>Parts of _manage should be moved to _testing and be removed from the main public repository (as used only for test purposes)</li> </ul>"},{"location":"GameDev/HowTo/RefactoringGuidelines/#refactoring-notes-new-language","title":"Refactoring notes: New Language","text":"<p>These refactoring notes should be followed to prepare for supporting a new language.</p> <ul> <li>Game and Core scripts should be correctly separated. For example, the Intro scene is using code from the _games/_common folders (IGameState for example). The contents of (_games/_common) could be placed in (_app/GamesCommonCode), so that the (_games) folder could be removed completely with no consequence.</li> <li>A lot of the code is tied to the Arabic language. See Localization, the QuestionBuilders, and many minigames.</li> </ul>"},{"location":"GameDev/HowTo/RefactoringGuidelines/#refactoring-notes-wishlist","title":"Refactoring notes: Wishlist","text":"<p>These notes are for future reference.</p> <ul> <li>We need to standardize some nomenclature: \"core\" vs \"minigames\" / \"minigame names\" vs \"minigame IDs\" / \"vote\" vs \"outcome\" vs \"grade\" vs \"score\"</li> </ul>"},{"location":"GameDev/HowTo/RefactoringGuidelines/#codebase","title":"Codebase","text":"<ul> <li>The core code and the Teacher work only with QuestionProviders, so it would be better to just assume that all games will use them (and no other provider)</li> <li>The word 'Data' is used interchangeably for 'LivingLetterData' and the database 'Data' (see <code>LL_WordData versus Db.WordData</code>). This creates confusion especially when handling learning data. This can be solved by making sure that LivingLetters data is converted into Views, and that the database's learning data is instead defined as LearningData (example: WordLearningData). Note also that the core should use DAta, not LL_Data. The view choice should be made by the MiniGame.</li> </ul>"},{"location":"GameDev/HowTo/RefactoringGuidelines/#minigame-data","title":"MiniGame Data","text":"<ul> <li>MiniGame variations are not actually enforced by the codebase, but it would be a good idea to make all games use them, as currently the core app reasons in terms of 'MiniGameCode', but a MiniGame is actually identified by the 'game scene' and the 'variation'</li> <li>We could make the MiniGame register to the Core, and make sure that the MiniGameData is generated by the core</li> </ul>"},{"location":"GameDev/Modules/","title":"Project Modules / Architecture","text":"<ul> <li>Project Structure the structure of the Unity project.</li> <li>Application Flow the complete flow of the application, useful if you want to understand the call flow.</li> <li>Antura and LivingLetters</li> <li>Arabic Rendering</li> <li>Database the datasets used everywhere.</li> <li>Database Schemas details on db tables and schemas</li> <li>Database Management</li> <li>Data Flow how the learning content data flows from the database, to the teacher system, and finally to minigames.</li> <li>Journey</li> <li>Localization</li> <li>Logging the implementation and use of the Logging System.</li> <li>MiniGame how a MiniGame works, how to create new ones and link them to the core application.</li> <li>Player Profile how the Player Profile Manager works, a subsystem that allows the use of several profiles on the same device.</li> <li>Shaders the list of shaders used in this project.</li> <li>Teacher AI how the Teacher System works. This subsystem is responsible for providing learning content data to the minigames.</li> <li>Analytics the implementation and use of the Logging System.</li> </ul>"},{"location":"GameDev/Modules/Analytics/","title":"Antura Analytics","text":"<p>We have a page on what we would like to track from data: https://docs.antura.org/GameDesign/DataAnalysis.html and here everything we log locally in the app: https://docs.antura.org/Modules/Logging.html</p> <p>To access the online analytics: Antura Unity Analytics Dashboard</p>"},{"location":"GameDev/Modules/Analytics/#unity-analytics","title":"Unity Analytics","text":"<p>In Antura we use Unity Analytics https://docs.unity.com/analytics/, which offer many default / standard game tracking data, like:</p> Metric Description DAU Number of unique players per day DAU (new vs. returning) Percent of DAU who were new on that day WAU Number of unique players in the previous seven days MAU Number of unique players in the previous 30 days DAU per MAU Percentage of MAU who played on a particular day (DAU/MAU) New users Daily users who are new that day Session length Time elapsed from when the user starts the app, and exits Number of sessions Number of sessions played that day Sessions per user Average number of sessions for each user Total daily play time Total playing time of all players on that day Daily play time per DAU Average playing time of users playing on that day Day 1 retention Percentage of users who returned to your game after one day Day 7 retention Percentage of users who returned to your game after one week Day 30 retention Percentage of users who returned to your game after 30 days <p>And we added some custom event to track our players progression in the game and the gameplay.   Unity Analytics (the new beta version we are enabled to use) has also an SQL Data Export to create custom queries (https://docs.unity.com/analytics/SQLDataExplorer.html)</p>"},{"location":"GameDev/Modules/Analytics/#environments","title":"Environments","text":"<p>we have two environments: - production (published apps) - dev (from editor and dev builds)</p>"},{"location":"GameDev/Modules/Analytics/#terminology","title":"Terminology","text":"<p>JP = Journey Position (see) is identified by a the sequence X.Y.Z where X is the Stage, Y the Learning Block, and Z the Play Session.</p>"},{"location":"GameDev/Modules/Analytics/#custom-events","title":"Custom Events","text":""},{"location":"GameDev/Modules/Analytics/#shared-parameters","title":"Shared Parameters","text":"<p>every custom events sends also these params: <pre><code>myPlayerUuid: PlayerUUID\nmyEdition: ContentID\nmyNativeLang: string Iso3 Code\n</code></pre></p>"},{"location":"GameDev/Modules/Analytics/#track-learning","title":"Track Learning","text":"<p>Correct or wrong answer? (in Assessments)</p> <p>CustomEvent: <code>myLearning</code></p> <p>Parameters: <pre><code>myMinigame: miniGameCode.ToString()\nmyJP: currentJourneyPosition.Id\nmyStage: currentJourneyPosition.Stage\nmyLearningBlock: currentJourneyPosition.LearningBlock\nmyPlaySession: currentJourneyPosition.PlaySession\nmyLearningDataType: answer._data.DataType\nmyLearningDataId: answer._data.Id\nmyLearningIsCorrect: answer._isPositiveResult\n</code></pre></p>"},{"location":"GameDev/Modules/Analytics/#trackminigamescore","title":"TrackMiniGameScore","text":"<p>When player finishes a minigame</p> <p>CustomEvent: <code>myMinigameScore</code></p> <p>Parameters: <pre><code>minigame: string code\nscore: int (0,1,2,3 stars)\nduration: int seconds\nJP: Journey Position\n</code></pre></p>"},{"location":"GameDev/Modules/Analytics/#trackreachedjourneyposition","title":"TrackReachedJourneyPosition","text":"<p>When the player advances in the journey</p> <p>CustomEvent: <code>myLevelUp</code></p> <p>Parameters: <pre><code>JP: Journey Position\nStage: int\nLearningBlock: int\nPlaySession: int\nTotalPlayTime: int seconds played in minigames\nTotalStars: int\nTotalBones: int\n</code></pre></p>"},{"location":"GameDev/Modules/Analytics/#completedregistration","title":"CompletedRegistration","text":"<p>When player creates an Avatar (first step in the game)</p> <p>CustomEvent: <code>myCompletedRegistration</code></p> <p>Parameters: <pre><code>myGender: string (\"Undefined\", \"M\", \"F\")\nmyAge: int\nmyProfileNumber: how many profiles exist in this edition\nmyAvatar_Face: id\nmyAvatar_BgColor: string color\nmyAvatar_HairColor: string color\nmyAvatar_SkinColor: string color\n</code></pre></p>"},{"location":"GameDev/Modules/Analytics/#trackcompletedfirstcontactphase","title":"TrackCompletedFirstContactPhase","text":"<p>When player finishes the initial tutorial</p> <p>CustomEvent: <code>myTutorialComplete</code> Parameters: <pre><code>myPhase: string\n</code></pre></p>"},{"location":"GameDev/Modules/Analytics/#track-shop-item-bought","title":"Track Shop / Item Bought","text":"<p>When bones are spent in the Antura Space</p> <p>CustomEvent: <code>myItemBought</code></p> <p>Parameters: <pre><code>myBonesSpent: int\nmyItemBought: string item code\n</code></pre></p>"},{"location":"GameDev/Modules/Analytics/#track-antura-customization","title":"Track Antura Customization","text":"<p>When player customizes Antura in the Antura Space</p> <p>CustomEvent: <code>myAnturaCustomize</code></p> <p>Parameters: <pre><code>myDuration: int time spent in Antura Space\nmyAntura_Head: object name\nmyAntura_EarL: object name\nmyAntura_EarR: object name\nmyAntura_Nose: object name\nmyAntura_Jaw: object name\nmyAntura_Neck: object name\nmyAntura_Back: object name\nmyAntura_Tail: object name\nmyAntura_Texture: object name\nmyAntura_Deca: object name\n</code></pre></p>"},{"location":"GameDev/Modules/Analytics/#trackplayermood","title":"TrackPlayerMood","text":"<p>When player replies to the mood question (once a day)</p> <p>CustomEvent: <code>myPlayerMood</code></p> <p>Parameters: <pre><code>myPlayerMood: int (1-5)\n</code></pre></p>"},{"location":"GameDev/Modules/Analytics/#trackbook","title":"TrackBook","text":"<p>When the book is used.. what does player do?</p> <p>CustomEvent: <code>myBook</code></p> <p>Parameters: <pre><code>myBookAction: string action (letter, word, launch minigame)\nmyBookObject: string object code (letter, word, minigame code)\n</code></pre></p>"},{"location":"GameDev/Modules/AnturaLivingLetters/","title":"Antura and Living Letters","text":"<p>work in progress</p>"},{"location":"GameDev/Modules/AnturaLivingLetters/#antura","title":"Antura","text":"<p>The contents of the AnturaSpace folder handle interactions with Antura in the AnturaSpace scene, used for reward and customization purposes.</p> <p>The Antura classes are used to control Antura's behaviours, its animations, and define the appearance of rewards. AnturaAnimationController and AnturaWalkBehaviour control the animation state of Antura.</p> <p>In the _app/Resources/Prefabs/Actors/ directory you will find a prefab named Antura.</p> <p>That is the prefab for the animated living letter that should be used by all the MiniGames.</p> <p>For Antura, you must use the original prefab without breaking the prefab reference. If you need a custom prefab, instantiate it in the scene, add your components on it (this will not break the reference to the original prefab), disable it in the scene, and use that as prefab (e.g. dragging it in the inspector of the scene\u2019s components). Remember to reactivate it upon instantiation.</p> <p>The prefab has a AnturaAnimationController component that let you change animation and set the arabic word/letter on it. It is pretty similar to the LL view.</p> <p>You can switch state by using the following property: <code>AnturaAnimationStates State</code></p> <p>The supported states are:</p> <pre><code>idle,  // Antura is standing\nwalking, // Antura walking/running,\nsitting, // Antura is sitting\nsleeping, // Antura is sleeping\nsheeping, // Antura is jumping in place\nsucking // Antura is inhaling\n</code></pre> <p>Properties:</p> <p>Such property: bool IsAngry is used when Antura is sitting, or running to select a special sitting/running animation.</p> <p>Such properties are used when Antura is idle to select a special idle animation.</p> <p>bool isExcited;</p> <p>bool isSad;</p> <p>To switch between Walking and running use:</p> <p>void SetWalkingSpeed(speed);</p> <p>the animation will blend between walk (speed = 0) and run (speed = 1).</p> <pre><code>void DoBark();\n\nvoid DoSniff();\n\nvoid DoShout();\n\nvoid DoBurp();\n\nDoSpit(bool openMouth);\n</code></pre> <p>The following methods can be used to perform a jump. Animations are in place, so you have to move transform when performing jump and just notify the animator with the following events. Such events must be called in this order:</p> <pre><code>void OnJumpStart();\n\nvoid OnJumpMaximumHeightReached();\n\nvoid OnJumpGrab();\n\nvoid OnJumpEnded();\n</code></pre> <p>This method:</p> <p><code>void DoCharge(System.Action onChargeEnded);</code> makes Antura do an angry charge. The Dog makes an angry charging animation (it must stay in the same position during this animation); IsAngry is set to true automatically (needed to use the angry run).</p> <p>After such animation ends, onChargeEnded will be called to inform you, and passes automatically into running state. You should use onChargeEnded to understand when you should begin to move the antura's transform.</p>"},{"location":"GameDev/Modules/AnturaLivingLetters/#livingletters","title":"LivingLetters","text":"<p>In the _app/Resources/Prefabs/Actors/ directory you will find a prefab named LivingLetter.</p> <p>That is the prefab for the animated living letter that should be used by all the MiniGames.</p> <p>For the LLs, you must use the LL prefab in <code>_app/Resources/Prefabs/Actors/LLPrefab</code> without breaking the prefab reference. If you need a custom prefab, instantiate it in the scene, add your components on it (this will not break the reference to the original prefab), disable it in the scene, and use that as prefab (e.g. dragging it in the inspector of the scene\u2019s components). Remember to reactivate it upon instantiation.</p> <p>The prefab has a LetterObjectView component that let you change animation and set the arabic word/letter on it.</p> <p>To set the current vocabulary data, use one of the following methods:</p> <pre><code>void Initialize(ILivingLetterData _data);\nvoid Initialize(ILivingLetterData data, string customText, float scale);\n</code></pre> <p>by passing the data that you want to see displayed on the LL.</p> <p>Use <code>letterObjectView.Data</code> to get the current data.</p> <p>Then, you can drive the animations using the following interface.</p> <pre><code>bool Crouching; // the LL is crouching\nbool Falling; // the LL is falling*\nbool Horraying; // continous horray\n</code></pre> <p>You can switch state by using the following method: <code>void SetState(LLAnimationStates newState);</code></p> <p>The supported states are: <pre><code>LL_idle, // when the LL is standing\nLL_walking, // when the LL is walking or running\nLL_dragging, // when the player is dragging the LL\nLL_hanging, // special state for Baloons game (still waiting for animation in the fbx)\nLL_dancing, // Dance!\nLL_rocketing, // LL on the Rocket (use DoHorray/{set horraying} for rocket hooray)\nLL_tickling, // LL is tickling\nLL_limbless // when the LL has no arms and legs\n</code></pre></p> <p>To switch between Walking and running use:</p> <p><code>void SetWalkingSpeed(speed);</code></p> <p>the animation will blend between walk (speed = 0) and run (speed = 1).</p> <p>Special animation triggers (it will perform an animation and go back to idle).</p> <pre><code>void DoHorray(); // triggers a single horray\nvoid DoAngry();\nvoid DoHighFive();\nvoid DoDancingWin();\nvoid DoDancingLose();\nvoid ToggleDance(); // Switch dance between dancing1 and dancing2\nvoid DoTwirl(System.Action onLetterShowingBack);\n</code></pre> <p>The DoTwirl animation will trigger your callback when the letter is showing its back to the camera (so you can change letter in that moment).</p> <p>The following methods can be used to perform a jump. Animations are in place, so you have to move transform when performing jump and just notify the animator with the following events.</p> <pre><code>void OnJumpStart();\nvoid OnJumpMaximumHeightReached();\nvoid OnJumpEnded();\n</code></pre> <p>The Living Letter View has a Poof() method that let you create a \"poof\" particle animation in the current position of the letter. You can use it when you want to make the LL disappear and re-appear on another position, or simply destroy it;</p>"},{"location":"GameDev/Modules/ApplicationFlow/","title":"Application Flow","text":"<ul> <li>TOC</li> </ul> <p><code>@todo: make sure to add a summary to all the main managers so to generate the docs.</code> <code>@todo: add an app flow diagram too?</code></p>"},{"location":"GameDev/Modules/ApplicationFlow/#core-and-minigame-code","title":"Core and Minigame code","text":"<p>The code of Antura is separated in two main sections.</p> <ul> <li>Core code is related to the main application. This code should not be touched by MiniGames developers.</li> <li>MiniGames code is produced by MiniGames developers. This code should be dependant on the core Code, but not the other way around. This allows MiniGames to be created and removed at will.</li> </ul> <p>Note that part of the core code can be used by MiniGame code, such as Tutorial or UI code, this is referred to as shared MiniGames code and is part of the core application.</p>"},{"location":"GameDev/Modules/ApplicationFlow/#app-manager","title":"App Manager","text":"<p>The AppManager is the core of the application. It is instantiated as a Singleton, accessible as AppManager.I and works as a general manager and entry point for all other systems and managers.</p> <p>The AppManager is used to start, reset, pause, and exit the game. It also controls the general flow of the application.</p> <p>The <code>AppManager.GameSetup()</code> method functions as the entry point of the application, regardless of player profile. All subsystems initialisation is carried out in this method. The <code>AppManager.InitTeacherForPlayer()</code> method instead initializes all subsystems and loads all data related to a specific player profile and must be called whenever a new profile is selected.</p>"},{"location":"GameDev/Modules/ApplicationFlow/#flow","title":"Flow","text":"<p>This section details the flow of the player inside the application and what classes and sub-systems are affected.</p> <p>The flow of the whole application is handled by the <code>Navigation Manager</code>, which controls the transitions between different scenes in the application.</p>"},{"location":"GameDev/Modules/ApplicationFlow/#start-home-and-intro","title":"Start, Home and Intro","text":"<p>The entry point for the application is the Start scene (<code>app/_scenes/_Start</code>), managed by the Home Manager. This scene initialises the App Manager, shows the Profile Selector UI to allow the user to select a profile throught the Player Profile Manager. This is performed through a set call to the PlayerProfileManager.CurrentPlayer property.</p> <p>The static learning database, the player's logging database, and the teacher system are loaded at this point through a call to AppManager.InitTeacherForPlayer(). After the profile selection is confirmed through the UI, the Home Manager calls the Navigation Manager to advance the application.</p> <p>The application flow may then change depending on whether we are using a new profile (first encounter) or not.</p> <p>If we are in the first encounter phase, the Navigation Manager will first load the Intro scene, which is controlled by an Intro Manager. From there, the user eventually accesses the Map scene. If the first encounter is instead passed, the Map is accessed directly.</p>"},{"location":"GameDev/Modules/ApplicationFlow/#the-map-scene","title":"The Map scene","text":"<p>The Map scene is the central hub for the player. Stages (map levels), Learning Blocks (ropes) and Play Sessions (dots, with larger dots representing assessments) are setup according to the data obtained from the Database. This is achieved through <code>Antura.Map.MiniMap.GetAllPlaySessionStateForStage()</code>.</p> <p>The Map scene allows several actions to be performed through its UI:</p> <ul> <li>The user may access the Antura Space scene.</li> <li>The user may access the Player Book scene.</li> <li>The user may start a new Play Session by reaching one of the available (i.e. unlocked) pins on the map and pressing the play button.</li> </ul>"},{"location":"GameDev/Modules/ApplicationFlow/#play-session-start","title":"Play Session start","text":"<p>When the user selects play, the Antura.Map.MiniMap method is called, which initialises the new play session by notifying the teacher system through <code>Teacher.TeacherAI.InitialiseCurrentPlaySession()</code>, which resets the current play session status and selects the MiniGames to play for that play session (the amount of which is defined by the constant <code>ConfigAI.numberOfMinigamesPerPlaySession</code>). Refer to Teacher for details on MiniGame selection for a given play session.</p> <p><code>** WARNING: the CurrentMiniGameInPlaySession data is now handled by the Teacher and PlayerProfile, but this is bad. Refactor it, then detail it here. **</code></p> <p>Depending on whether the next PlaySession is an Assessment or not, the navigation may change:</p> <ul> <li> <p>If the next PlaySession is an Assessment, the Navigation Manager calls <code>GoToGameScene(MiniGameData _miniGame)</code> directly. Refer to the next section.</p> </li> <li> <p>If the next PlaySession is MiniGames, the Navigation Manager instead accesses the Game Selector scene, which is responsible for showing in a playful way what MiniGames were selected by the Teacher System. The Game Selector scene will first automatically call the method <code>GamesSelector.AutoLoadMinigames()</code>, which calls <code>GamesSelector.Show()</code> passing the list of currently selected MiniGames. The method also adds the delegate <code>GameSelector.GoToMiniGame()</code> to the <code>GamesSelector.OnComplete</code> event, triggered when the user finishes interaction with the Games Selector. <code>GameSelector.GoToMiniGame()</code> will at last signal the Navigation Manager to access the first selected MiniGame.</p> </li> </ul>"},{"location":"GameDev/Modules/ApplicationFlow/#minigame-start","title":"MiniGame Start","text":"<p>Any call to <code>NavigationManager.GoToGameScene(MiniGameData _miniGame)</code> triggers a subsequent call to <code>MiniGameLauncher.LaunchGame(MiniGameCode miniGameCode)</code> to launch the next of the MiniGames for that play session.</p> <p>The MiniGameLauncher is responsible for the correct launch of MiniGames with teacher-approved data. The start of a MiniGame is initialised by a call to <code>MiniGameLauncher.LaunchGame(MiniGameCode miniGameCode)</code>. The launcher then calls <code>TeacherAI.GetCurrentDifficulty(MiniGameCode miniGameCode)</code> to obtain the difficulty value for the specific MiniGame session, generates a GameConfiguration instance with the correct difficulty settings, and starts the MiniGame through <code>MiniGameAPI.StartGameMiniGameCode(MiniGameCode _gameCode, GameConfiguration _gameConfiguration)</code></p> <p>The <code>MiniGameAPI.StartGameMiniGameCode()</code> method first retrieves the data related to the specified MiniGame from the database for later retrieval and assigns it to <code>AppManager.CurrentMinigame</code>. The process then calls <code>MiniGameAPI.ConfigureMiniGame</code> to retrieve the concrete <code>IGameConfiguration</code> and IGameContext for the given MiniGame code, assigning them to the MiniGame static IGameConfiguration concrete implementation.</p> <p>At this point, the Teacher System is queried to retrieve a set of QuestionPack instances that define the learning content that the MiniGame should access and that are accessible through the <code>IGameConfiguration.Questions</code> field. Refer to Teacher and MiniGame docs for further details on how the learning data is selected and passed to MiniGames.</p> <p>At last, the MiniGame being correctly configured, it can be started, and the Navigation Manager will thus load the scene that matches the specific MiniGame.</p>"},{"location":"GameDev/Modules/ApplicationFlow/#minigame-play","title":"MiniGame Play","text":"<p>MiniGames are responsible for handling their internal state, while the core application waits for the MiniGame to end. Refer to MiniGame for details on how the MiniGame flow is implemented.</p>"},{"location":"GameDev/Modules/ApplicationFlow/#minigame-end","title":"MiniGame End","text":"<p>The MiniGame logic is required to call <code>MiniGame.EndGame()</code> to end gameplay.</p> <p>As a MiniGame ends, the end game panel is shown, and after user interaction the game is exited. note that the actual flow is <pre><code>OutcomeGameState.EnterState() -&gt;\nMinigamesStarsWidget.Show() -&gt;\nGameResultUI.ShowEndgameResult() -&gt;\nEndgameResultPanel.Show() -&gt;\nEndgameResultPanel.Continue()\n</code></pre></p> <p>As a MiniGame ends, the Navigation Manager may either: - start the next MiniGame (refer to the MiniGame Start section) - access the Play Session Results scene if the MiniGame was the last for the play session - or access the Rewards scene if an assessment play session was completed</p> <p>From the Play Session Results scene, or from the Rewards Scene, the player will then return to the Map scene, updating the maximum reached journey position through <code>NavigationManager.MaxJourneyPositionProgress()</code> if needed.</p>"},{"location":"GameDev/Modules/ApplicationFlow/#refactoring-notes","title":"Refactoring notes","text":"<ul> <li>AppManager and InstantiateManager spawn managers in several ways, standardize manager creation and access.</li> <li>Many subsystems have their own singleton and should instead be represented in AppManager</li> </ul>"},{"location":"GameDev/Modules/ArabicRendering/","title":"Arabic Text Rendering","text":"<p>TBD</p>"},{"location":"GameDev/Modules/DataFlow/","title":"Data Flow","text":"<ul> <li>TOC</li> </ul> <p>This document describes how vocabulary data flows from the database, through the Teacher System, to the specific MiniGames.</p> <p><code>@todo: add a diagram for the data flow</code></p>"},{"location":"GameDev/Modules/DataFlow/#database","title":"Database","text":"<p>All vocabulary data of a given language (letters, words, and phrases), as well as their relationships, are contained in a database. The Teacher can directly access the database. The database must instead not be accessed directly by the MiniGames, as the Teacher must filter the data based on learning requirements.</p> <p>Refer to the Database documentation for further details.</p>"},{"location":"GameDev/Modules/DataFlow/#teacher-filtering","title":"Teacher filtering","text":"<p>The MiniGame data flow is started whenever a MiniGame is launched through <code>MiniGameAPI.StartGame()</code>.</p> <p>Prior to loading the MiniGame, the Teacher retrieves the static MiniGame configuration (<code>IGameConfiguration</code>) and obtains from it the configured IQuestionBuilder through a call to <code>IGameConfiguration.SetupBuilder()</code>. The IQuestionBuilder defines the learning rules and requirements for the current MiniGame variation.</p> <p>Based on the MiniGame rules and requirements, the Teacher then selects the vocabulary data suited to the current context and generates a list of IQuestionPack through <code>QuestionPacksGenerator.GenerateQuestionPacks(IQuestionBuilder builder)</code>.</p> <p>Each IQuestionPack thus generated contains a list of questions, correct answers, and wrong answers suitable for the current learning progression and supported by the MiniGame.</p> <p>The list is then injected into the game configuration by creating a FindRightLetterQuestionProvider and storing it inside IGameConfiguration.Questions, then the MiniGame is loaded. The FindRightLetterQuestionProvider is here used to provide sequentially the list of question packs that the Teacher selected.</p> <p>Refer to the Teacher documentation for further details on QuestionBuilders and on how the Teacher selects the vocabulary data. <code>@todo: LINK</code></p>"},{"location":"GameDev/Modules/DataFlow/#question-provider-minigame-data-access","title":"Question Provider &amp; MiniGame Data Access","text":"<p>At any point during play (but, usually, during the MiniGame's initialisation), the MiniGame code can access the next question pack for play by calling its static configuration's instance <code>IGameConfiguration.Questions.GetNextQuestion()</code> and thus retrieving a IQuestionPack.</p> <p>The MiniGame is then free to display the vocabulary data to the player according to its inner workings. For this purpose, Living Letters can be used as a convenient and shared way to display the vocabulary data.</p>"},{"location":"GameDev/Modules/DataFlow/#livingletters","title":"LivingLetters","text":"<p>Minigames can display the vocabulary data to the players through LivingLetters. LivingLetters are animated characters that can display a piece of vocabulary data.</p> <p>The LivingLetters can display vocabulary data in several ways, depending on the type of data to display. By assigning a LL_XXXData to a LetterObjectView, the corresponding data is displayed on the Living Letter. The display method is set by converting a given vocabulary data instance into a correpsonding LL_XXXData instance.</p> <ul> <li><code>LL_LetterData</code> displays a Db.LetterData in text form (a single letter)</li> <li><code>LL_WordData</code> displays a Db.WordData in text form</li> <li><code>LL_ImageData</code> displays a Db.WordData in image form (a drawing or picture)</li> <li><code>LL_PhraseData</code> displays a Db.PhraseData in text form</li> </ul>"},{"location":"GameDev/Modules/Database/","title":"Database Management","text":"<ul> <li>TOC</li> </ul> <p>The application uses two different databases for learning data and logging data.</p>"},{"location":"GameDev/Modules/Database/#learning-data-static-database","title":"Learning Data (static database)","text":"<p>Learning data comprehends all information needed to provide a correct learning experience for the players. This data is included with the application at startup.</p> <p>This includes:</p> <ul> <li>Journey data: stage, learning block, and play session configurations</li> <li>Vocabulary data: letters, words, and phrases of the given language.</li> <li>MiniGame data: details on the available MiniGames and how they tie with Journey and Vocabulary data.</li> </ul> <p>The data is compiled into JSON files contained inside the <code>_manage/manage_Database/Datasets</code> folder. The JSON files are loaded using the <code>_manage/manage_Database/manage_Database</code> scene, where consistency checks are performed and the database contents can be inspected. <code>@todo: explain DataParsers too.</code></p> <p>The database is converted from JSON to a set of custom assets (deriving from ScriptableObject) that contain a table of data, with one asset per data type. The contents of Database/DatabaseObjects define the scriptable objects from which the custom assets are derived. These assets can be found in the Assets/Resources/Database folder. To perform the JSON-to-asset conversion, the DatabaseLoader scripts employs a DataParser* for each data type to load, which defines how to parse the JSON file into the corresponding data structure.</p> <p>At runtime, Antura.Db.Database functions as an entry point for all the assets containing the data tables and is managed by a Antura.DatabaseManager instance.</p> <p><code>@todo: describe Journey and MiniGame data?</code></p>"},{"location":"GameDev/Modules/Database/#dynamic-data","title":"Dynamic Data","text":"<p>Dynamic data is produced as the player uses the application and saved to the system's memory at runtime.</p> <p>The data is divided in several categories:</p> <ul> <li>Logging data represents the temporal progression of the player as the app is used. This includes:</li> <li>Log Info Data: Generic data on application usage</li> <li>Log Learn Data: Data on vocabulary learning achievements by the player</li> <li>Log Mood Data: Data on daily mood levels of the player</li> <li> <p>Log Play Data: Data on play-related measurements logged by MiniGames</p> </li> <li> <p>Score data represents the summary achievements of players. All score data is contained in ScoreData objects. This includes:</p> </li> <li>Vocabulary Score Data: Current learning score value for Letters, Words, Phrases</li> <li> <p>Journey Score Data: MiniGame-related score levels for MiniGames, PlaySessions, LearningBlocks</p> </li> <li> <p>Reward Pack Unlock Data is used for customization unlock purposes.</p> </li> <li> <p>Database Information Data holds summary details on the current database and is used for versioning.</p> </li> <li> <p>Player Profile Data holds the player's information and current preferences.</p> </li> </ul> <p>See the Logging document for further details on logging.</p>"},{"location":"GameDev/Modules/Database/#sqlite","title":"SQLite","text":"<p>The database is implemented in SQLite. The SQLite database is loaded and connected to whenever a player profile is selected, and generated if non-existing. All communication with the SQLite database is performed through a Antura.Db.DBService instance, managed by the DatabaseManager. The structure of the SQLite database can be generated a runtime and this is controlled through the <code>DBService.GenerateTable(bool create, bool drop)</code>, which can be updated to reflect any changes in the DB scheme. Note that any change to the database scheme must also prompt a sequential update of AppConfig.DbSchemeVersion for versioning to function correctly.</p>"},{"location":"GameDev/Modules/Database/#profile-api","title":"Profile API","text":"<p>The logging database supports multiple profiles. A profile can be selected using <code>Antura.Db.DatabaseManager.LoadDynamicDbForPlayerProfile(int profileId)</code>, which loads (or creates if it does not exists) a database for logging data of the chosen player. Player profiles are also supported with:</p> <ul> <li>New profile creation (through <code>CreateProfile()</code>)</li> <li>Profile deletion (through <code>DropProfile()</code>)</li> </ul>"},{"location":"GameDev/Modules/Database/#reading-api","title":"Reading API","text":"<p>To read learning or logging data, a single entry point is used throughout the application. Antura.DatabaseManager is the entry point and can be access through the public field <code>AppManager.I.Db</code>.</p> <p>The Database Manager provides several methods for each data type represented in the learning and logging data.</p> <p>To access learning data, the following methods can be used:</p> <ul> <li><code>GetAllXXXData</code>, which returns a list o all data of the chosen type.</li> <li><code>GetXXXDataById</code>, which returns a single data structure of the chosen type given its Id.</li> <li><code>FindXXXData</code>, which require a predicate as a parameter to filter the database. The methods returns the list of filtered data of the chosen type.</li> </ul> <p>To access logging data, the following methods can be used:</p> <ul> <li>For logging data, literal queries in SQL can be also used through <code>FindXXXDataByQuery()</code> methods.</li> </ul>"},{"location":"GameDev/Modules/Database/#writing-api","title":"Writing API","text":"<p>To write to the database, the Database Manager provides the following methods:</p> <ul> <li><code>Insert&lt;T&gt;()</code> to insert new data in the database (used by the logging system)</li> <li><code>UpdateVocabularyScoreData()</code> to overwrite the current vocabulary score data for a given element.</li> <li><code>UpdateJourneyScoreData()</code> to overwrite the current journey score data for a given element.</li> <li><code>UpdateRewardPackUnlockData()</code> to overwrite the current unlock state for a given reward.</li> <li><code>UpdatePlayerProfileData()</code> to overwrite the current player profile.</li> </ul> <p>Note that these methods should not be called directly and that all MiniGames should use the LogManager to indirectly write to the database. Note that the vocabulary data is static and thus not writeable at runtime.</p>"},{"location":"GameDev/Modules/Database/#refactoring-notes","title":"Refactoring notes","text":"<ul> <li>The logging data structures should be better defined. They are, for now, too little strict and not enough documentation on their purpose is available.</li> <li>Insert/Update should not be directly exposed and instead be used by the log manager and protected from other uses</li> <li>There is a strong dependency in the code on the specific needs of the language (are words/phrase/letters needed in every language?)</li> <li>Vocabulary and Journey data should be separated, so to better enforce their nature.</li> <li>Localization data should be separated from the rest</li> </ul>"},{"location":"GameDev/Modules/DatabaseManagement/","title":"Database Info and Management","text":"<p>Here is a description of the Antura Database and proposal for the web application to deal with the upload of the db files from the Antura app to the servers and their management.</p>"},{"location":"GameDev/Modules/DatabaseManagement/#overview","title":"Overview","text":"<p>Antura app stores all the data in two datasets: A static set of tables with all the vocabularies and game settings (like the journey data, letters, words)... These data should not change and is fixed for all players. A dynamic set of tables, storing all the player\u2019s performances and informations. These tables are stored in a SQLite database. When a player starts player, a UUID (Universal Unique Identifier) and a new SQLite database are created. This UUID is the key to identify the player. The SQLite file itself is named Antura_Player_UUID value (like <code>Antura_Player_e7e8d59a-b148-48b0-a848-4fa6fb4116cb.sqlite3</code> ) (Going into the Reserved Area of the app, selecting a player we can see its UUID.)</p> <p>The app is going to allow the export of the sqlite db, and we were thinking that the best way was to upload the file directly into a web server, injecting the SQLite data into a bigger \u201cmaster collector\u201d mysql db, to allow comparative analysis and queries.</p> <p>This document describes all the Database related info needed for the app developers, the web developers and the data analysts.</p>"},{"location":"GameDev/Modules/DatabaseManagement/#web-upload-db-project","title":"Web upload DB project","text":"<p>The web app receiving the db files should be an independent app, maybe accessible through a static domain like: <code>https://db.antura.org</code> (if possible it\u2019s much better a third level domain to separate this db app from the generic wordpress website at antura.org )</p> <p>We think that the Antura App should just access that page, handshake a security token, and then upload its SQLite file. The application can be developed with any web technology, but we assume to use LAMP (Linux / Apache / Mysql / PHP) since it\u2019s a very common stack.</p> <p>As first step, we imagine a script like <code>https://db.antura.org/upload.php</code> where we can upload our file as a multi-part form. The file won\u2019t be bigger than 1Mb (but let\u2019s support file sizes of at least 8Mb) The script should save this file into a named folder, like <code>/uploads/2017/04/filename</code> (since we expect several thousands of files, it\u2019s better to organize them by month)</p> <p>When the upload finishes with success, an log entry should be added to the databases, like \u201cfile x has been uploaded at this time from , it\u2019s location is y\u201d. Just after the uploading a new script should be called that opens the sqlite file, processes it and injects its data into the main mysql database (we\u2019ll describe the exact procedure later) An email should be sent to a list of addresses to notify the new file entry.</p>"},{"location":"GameDev/Modules/DatabaseManagement/#mysql-database","title":"MySql database","text":"<p>We store the app data as sqlite because it\u2019s simpler and easier (and faster). But the main database should be mysql, which allow greater flexibility and features, and has major clients. As a first very easy and powerful tool to manage the master Mysql db, we should have PhpMyAdmin ( https://www.phpmyadmin.net/ ) installed into the server. From there we can export the db and make basic queries without writing anything custom.</p>"},{"location":"GameDev/Modules/DatabaseManagement/#parsing-the-sqlite-files","title":"Parsing the SQLite files","text":"<p>The PHP has native SQLite3 functions (since 5.3.0, see http://php.net/manual/en/sqlite3.installation.php ) and should be safe to open the single sqlite files. The SQLite -&gt; Mysql migration need to take care of these points:</p> <ol> <li>To inject the UUID (found in the sqlite filename or in the PlayerProfileData table) into every uuid field of every table.</li> <li>Obviously the SQLIte indexes shouldn\u2019t be migrated (and aren\u2019t used in any case)</li> <li>The data structure is quite the same in both DB, so no data conversion is needed.</li> </ol>"},{"location":"GameDev/Modules/DatabaseManagement/#databases","title":"Databases","text":"<p>App SQLite file</p>"},{"location":"GameDev/Modules/DatabaseManagement/#db-filename","title":"Db filename","text":"<p>Filename: <code>Antura_Player_e7e8d59a-b148-48b0-a848-4fa6fb4116cb.sqlite3</code> The \u201ce7e8d59a-b148-48b0-a848-4fa6fb4116cb\u201d is the uuid (universal identifier) that defines the player</p>"},{"location":"GameDev/Modules/DatabaseManagement/#procedures","title":"Procedures","text":"<pre><code>update DatabaseInfoData set Uuid = \"e7e8d59a-b148-48b0-a848-4fa6fb4116cb\";\nupdate JourneyScoreData set Uuid = \"e7e8d59a-b148-48b0-a848-4fa6fb4116cb\";\nupdate LogInfoData set Uuid = \"e7e8d59a-b148-48b0-a848-4fa6fb4116cb\";\nupdate LogMiniGameScoreData set Uuid = \"e7e8d59a-b148-48b0-a848-4fa6fb4116cb\";\nupdate LogMoodData set Uuid = \"e7e8d59a-b148-48b0-a848-4fa6fb4116cb\";\nupdate LogPlayData set Uuid = \"e7e8d59a-b148-48b0-a848-4fa6fb4116cb\";\nupdate LogPlaySessionScoreData set Uuid = \"e7e8d59a-b148-48b0-a848-4fa6fb4116cb\";\nupdate LogVocabularyScoreData set Uuid = \"e7e8d59a-b148-48b0-a848-4fa6fb4116cb\";\nupdate RewardPackUnlockData set Uuid = \"e7e8d59a-b148-48b0-a848-4fa6fb4116cb\";\nupdate VocabularyScoreData set Uuid = \"e7e8d59a-b148-48b0-a848-4fa6fb4116cb\";\n</code></pre>"},{"location":"GameDev/Modules/DatabaseManagement/#queries","title":"Queries","text":"<p>These are the first db queries supported by current data model</p> <ol> <li>Curve of Duration of play sessions (one player, a group)</li> <li>Curve of Duration of play per day (one player, a group)</li> <li>Nb of mini-game/assessment per play session (one player, a group)</li> <li>Nb of mini-game/assessment per day (one player, a group)</li> <li>Learning blocks ID or T0+x date of drop out (one player, a group)</li> <li>Antura Space use duration per play session and per day (one player, a group)</li> <li>Score evolution per mini game (the rough data that we use to create the 3 stars score) (one player, a group)</li> <li>The average evolution of score, all MiniGame (in stars) (one player, a group)</li> <li>Evaluate correlation between dropout/non play and score variation/new game apparition (a group)</li> <li>Average assessment tries per learning block (to identify potential more difficult learning blocks) (one player, a group)</li> <li>Ranking of words associated to failure in mini game (one player, a group)</li> <li>Mod indicator curve (one player, a group)</li> <li>Replayed learning blocks (one player, a group)</li> <li>More used outfits, colors and accessories, on Antura (one player, a group)</li> </ol>"},{"location":"GameDev/Modules/DatabaseSchemas/","title":"Database Schemas","text":""},{"location":"GameDev/Modules/DatabaseSchemas/#static-tables-schemes","title":"Static Tables schemes","text":"<pre><code>CREATE TABLE `_LetterData` (\n  `Id` varchar(255),\n  `Number` int(11) DEFAULT NULL,\n  `Added` varchar(255),\n  `Active` tinyint(4) DEFAULT NULL,\n  `Complexity` varchar(255),\n  `Title` varchar(255),\n  `Kind` varchar(255),\n  `BaseLetter` varchar(255),\n  `Symbol` varchar(255),\n  `SoundZone` varchar(255),\n  `Type` varchar(255),\n  `Tag` varchar(255),\n  `Notes` varchar(255),\n  `SunMoon` varchar(255),\n  `Sound` varchar(255),\n  `Isolated` varchar(255),\n  `Final` varchar(255),\n  `Medial` varchar(255),\n  `Initial` varchar(255),\n  `Isolated_Unicode` varchar(255),\n  `Final_Unicode` varchar(255),\n  `Medial_Unicode` varchar(255),\n  `Initial_Unicode` varchar(255),\n  `Symbol_Unicode` varchar(255),\n  `FinalFix` varchar(255),\n  `MedialFix` varchar(255),\n  `InitialFix` varchar(255),\n  `Old_Isolated` varchar(255),\n  `Old_Final` varchar(255),\n  `Old_Medial` varchar(255),\n  `Old_Initial` varchar(255),\n)\n\nCREATE TABLE `_MiniGameData` (\n  `Id` varchar(255),\n  `Type` varchar(255),\n  `Status` varchar(255),\n  `Main` varchar(255),\n  `Variation` varchar(255),\n  `Badge` varchar(255),\n  `Description` varchar(255),\n  `Team` varchar(255),\n  `Title_En` varchar(255),\n  `Title_Ar` varchar(255),\n  `Intro_En` varchar(255),\n  `Intro_Ar` varchar(255),\n  `Tutorial_En` varchar(255),\n  `Tutorial_Ar` varchar(255),\n  `Scene` varchar(255),\n  `Notes` varchar(255),\n  `SkillTiming` varchar(255),\n  `SkillPrecision` varchar(255),\n  `SkillObservation` varchar(255),\n  `SkillListening` varchar(255),\n  `SkillLogic` varchar(255),\n  `SkillMemory` varchar(255),\n  `TOTAL` varchar(255),\n  `Comprehension` varchar(255),\n)\n\n\nCREATE TABLE `_PhraseData` (\n  `Id` varchar(255),\n  `Active` tinyint(4) DEFAULT NULL,\n  `English` varchar(255),\n  `Arabic` varchar(255),\n  `Linked` varchar(255),\n  `Category` varchar(255),\n  `Words` varchar(255),\n  `Answers` varchar(255),\n  `Complexity` varchar(255),\n  `Notes` varchar(255),\n)\n\nCREATE TABLE `_PlaySessionData` (\n  `Stage` int(11) DEFAULT NULL,\n  `LearningBlock` int(11) DEFAULT NULL,\n  `PlaySession` int(11) DEFAULT NULL,\n  `Title_En` varchar(255),\n  `Title_Ar` varchar(255),\n  `Description_En` varchar(255),\n  `Description_Ar` varchar(255),\n  `Notes` varchar(255),\n  `Focus` varchar(255),\n  `Letters` varchar(255),\n  `Type` varchar(255),\n  `Words` varchar(255),\n  `Words_previous` varchar(255),\n  `Phrases` varchar(255),\n  `Phrases_previous` varchar(255),\n  `Order` varchar(255),\n  `NumberOfMinigames` varchar(255),\n  `NumberOfRounds` varchar(255),\n  `AssessmentType` varchar(255),\n  `Maze` varchar(255),\n  `FastCrowd_letter` varchar(255),\n  `ThrowBalls_letters` varchar(255),\n  `Tobogan_letters` varchar(255),\n  `Balloons_letter` varchar(255),\n  `TakeMeHome` varchar(255),\n  `Egg_letters` varchar(255),\n  `Egg_sequence` varchar(255),\n  `ColorTickle` varchar(255),\n  `HideSeek` varchar(255),\n  `AlphabetSong_alphabet` varchar(255),\n  `AlphabetSong_letters` varchar(255),\n  `MixedLetters_alphabet` varchar(255),\n  `FastCrowd_alphabet` varchar(255),\n  `MakeFriends` varchar(255),\n  `DancingDots` varchar(255),\n  `SickLetters` varchar(255),\n  `ThrowBalls_letterinword` varchar(255),\n  `MissingLetter` varchar(255),\n  `Balloons_spelling` varchar(255),\n  `FastCrowd_spelling` varchar(255),\n  `MixedLetters_spelling` varchar(255),\n  `Balloons_words` varchar(255),\n  `FastCrowd_words` varchar(255),\n  `ThrowBalls_words` varchar(255),\n  `Tobogan_words` varchar(255),\n  `Scanner` varchar(255),\n  `Balloons_counting` varchar(255),\n  `FastCrowd_counting` varchar(255),\n  `MissingLetter_phrases` varchar(255),\n  `MissingLetter_forms` varchar(255),\n  `Scanner_phrase` varchar(255),\n  `ReadingGame` varchar(255),\n)\n\nCREATE TABLE `_StageData` (\n  `Id` varchar(255),\n  `Title_En` varchar(255),\n  `Title_Ar` varchar(255),\n  `Description` varchar(255),\n)\n\nCREATE TABLE `_WordData` (\n  `Id` varchar(255),\n  `added` varchar(255),\n  `Active` varchar(255),\n  `Kind` varchar(255),\n  `Category` varchar(255),\n  `Complexity` varchar(255),\n  `Gender` varchar(255),\n  `Form` varchar(255),\n  `Article` varchar(255),\n  `LinkedWord` varchar(255),\n  `Value` varchar(255),\n  `Arabic` varchar(255),\n  `Symbols` varchar(255),\n  `Drawing` varchar(255),\n  `Letters` varchar(255),\n  `Transliteration` varchar(255),\n  `SunMoon` varchar(255),\n  `Notes` varchar(255),\n)\n</code></pre>"},{"location":"GameDev/Modules/DatabaseSchemas/#dynamic-tables-schemes","title":"Dynamic Tables schemes","text":"<pre><code>CREATE TABLE `DatabaseInfoData` (\n  `Uuid` longtext,\n  `Timestamp` int(11) DEFAULT NULL,\n  `DynamicDbVersion` longtext,\n  `StaticDbVersion` longtext COLLATE utf8_bin\n)\n\nCREATE TABLE `JourneyScoreData` (\n  `Uuid` longtext,\n  `JourneyDataType` int(11) DEFAULT NULL,\n  `ElementId` longtext,\n  `Stage` int(11) DEFAULT NULL,\n  `LearningBlock` int(11) DEFAULT NULL,\n  `PlaySession` int(11) DEFAULT NULL,\n  `Stars` int(11) DEFAULT NULL,\n  `UpdateTimestamp` int(11) DEFAULT NULL\n)\n\nCREATE TABLE `LogInfoData` (\n  `Id` int(11) NOT NULL,\n  `Uuid` longtext,\n  `AppSession` int(11) DEFAULT NULL,\n  `Timestamp` int(11) DEFAULT NULL,\n  `Event` int(11) DEFAULT NULL,\n  `Scene` int(11) DEFAULT NULL,\n  `AdditionalData` longtext,\n  )\n\nCREATE TABLE `LogMiniGameScoreData` (\n  `Id` int(11) NOT NULL,\n  `Uuid` longtext,\n  `AppSession` int(11) DEFAULT NULL,\n  `Timestamp` int(11) DEFAULT NULL,\n  `Stage` int(11) DEFAULT NULL,\n  `LearningBlock` int(11) DEFAULT NULL,\n  `PlaySession` int(11) DEFAULT NULL,\n  `MiniGameCode` int(11) DEFAULT NULL,\n  `Stars` int(11) DEFAULT NULL,\n  `PlayTime` double DEFAULT NULL,\n  )\n\nCREATE TABLE `LogMoodData` (\n  `Id` int(11) NOT NULL,\n  `Uuid` longtext,\n  `AppSession` int(11) DEFAULT NULL,\n  `Timestamp` int(11) DEFAULT NULL,\n  `MoodValue` double DEFAULT NULL,\n  )\n\nCREATE TABLE `LogPlayData` (\n  `Id` int(11) NOT NULL,\n  `Uuid` longtext,\n  `AppSession` int(11) DEFAULT NULL,\n  `Timestamp` int(11) DEFAULT NULL,\n  `Stage` int(11) DEFAULT NULL,\n  `LearningBlock` int(11) DEFAULT NULL,\n  `PlaySession` int(11) DEFAULT NULL,\n  `MiniGameCode` int(11) DEFAULT NULL,\n  `PlayEvent` int(11) DEFAULT NULL,\n  `PlaySkill` int(11) DEFAULT NULL,\n  `Score` double DEFAULT NULL,\n  `AdditionalData` longtext,\n  )\n\nCREATE TABLE `LogPlaySessionScoreData` (\n  `Id` int(11) NOT NULL,\n  `Uuid` longtext,\n  `AppSession` int(11) DEFAULT NULL,\n  `Timestamp` int(11) DEFAULT NULL,\n  `Stage` int(11) DEFAULT NULL,\n  `LearningBlock` int(11) DEFAULT NULL,\n  `PlaySession` int(11) DEFAULT NULL,\n  `Stars` int(11) DEFAULT NULL,\n  `PlayTime` double DEFAULT NULL,\n  )\n\nCREATE TABLE `LogVocabularyScoreData` (\n  `Id` int(11) NOT NULL,\n  `Uuid` longtext,\n  `AppSession` int(11) DEFAULT NULL,\n  `Timestamp` int(11) DEFAULT NULL,\n  `Stage` int(11) DEFAULT NULL,\n  `LearningBlock` int(11) DEFAULT NULL,\n  `PlaySession` int(11) DEFAULT NULL,\n  `MiniGameCode` int(11) DEFAULT NULL,\n  `VocabularyDataType` int(11) DEFAULT NULL,\n  `ElementId` longtext,\n  `Score` double DEFAULT NULL,\n  )\n\nCREATE TABLE `PlayerProfileData` (\n  `Timestamp` int(11) DEFAULT NULL,\n  `Uuid` longtext,\n  `AvatarId` int(11) DEFAULT NULL,\n  `Gender` int(11) DEFAULT NULL,\n  `Tint` int(11) DEFAULT NULL,\n  `IsDemoUser` int(11) DEFAULT NULL,\n  `JourneyCompleted` int(11) DEFAULT NULL,\n  `TotalScore` double DEFAULT NULL,\n  `Age` int(11) DEFAULT NULL,\n  `ProfileCompletion` int(11) DEFAULT NULL,\n  `MaxStage` int(11) DEFAULT NULL,\n  `MaxLearningBlock` int(11) DEFAULT NULL,\n  `MaxPlaySession` int(11) DEFAULT NULL,\n  `CurrentStage` int(11) DEFAULT NULL,\n  `CurrentLearningBlock` int(11) DEFAULT NULL,\n  `CurrentPlaySession` int(11) DEFAULT NULL,\n  `TotalBones` int(11) DEFAULT NULL,\n  `CurrentAnturaCustomization` longtext,\n  `AdditionalData` longtext COLLATE utf8_bin\n)\n\nCREATE TABLE `VocabularyScoreData` (\n  `Uuid` longtext,\n  `VocabularyDataType` int(11) DEFAULT NULL,\n  `ElementId` longtext,\n  `Score` double DEFAULT NULL,\n  `Unlocked` int(11) DEFAULT NULL,\n  `UpdateTimestamp` int(11) DEFAULT NULL\n)\n</code></pre>"},{"location":"GameDev/Modules/Journey/","title":"Journey","text":"<p>Represents the didactical journey.</p>"},{"location":"GameDev/Modules/Journey/#journey-position","title":"Journey position","text":"<p>The Journey position is defined as a hierarchical structure, made of Stages, Learning Blocks, and Play Sessions.</p> <ul> <li>Stages define overall learning goals. Each stage is assigned to a specific Map.</li> <li>Learning Blocks define general learning requirements for a set of play sessions.</li> <li>Play Sessions define single play instances, composed of several minigames and a result. A Play Session may be considered an Assessment, in this case the value is always 100.</li> </ul> <p>Each is defined by a sequential integer value. A combination of three values identifies a single playing session, which is referred to as Journey Position.</p> <p>A Journey Position is thus identified by a the sequence X.Y.Z where X is the Stage, Y the Learning Block, and Z the Play Session.</p>"},{"location":"GameDev/Modules/Journey/#configuration","title":"Configuration","text":"<p>The learning progression can be configured through two main sources:</p> <p>1) Editing the PlaySessionData and LearningBlockData tables in the static database. These define the progression of the learning content from lower to higher stages. The learning content should be distributed so that harder content appears at higher stages. The system will make sure to use this information when filtering dictionary content. Example: content at higher learning blocks cannot appear at lower play sessions</p> <p>2) Editing the ConfigAI weight constants. These values define how much weight to give to each rule when selecting contents. The system will make sure to use this information when weighing dictionary content. Example: content that has been seen recently may appear less often</p>"},{"location":"GameDev/Modules/Localization/","title":"Localization","text":"<p>TBD</p>"},{"location":"GameDev/Modules/Logging/","title":"Logging System","text":"<ul> <li>TOC</li> </ul> <p>This document describes the Logging System implemented in Antura. Logging allows the application to gather information on the player's progression and save it to the database (see Database).</p> <p>The Logging System is based on three main classes: the MinigameLogManager, the LogManager, and the LogAI.</p> <ul> <li>The MinigameLogManager is the concrete implementation of ILogManager that is passed to the Game Context instance and provides access to the logging functionalities from MiniGames.</li> <li>The LogManager is the entry point for all log functionality throughout the application, used both by the MinigameLogManager and the rest of the core codebase.</li> <li>The LogAI mediates the logging of data by the core application so that correct values are inserted into the database and filters it according to the learning rules that can be configured by the expert.</li> </ul> <p><code>@todo: add MinigameLogManager -&gt; LogManager -&gt; LogAI -&gt; Database graph</code></p> <p>The data that can be logged is divided in two broad categories: - History data represents the temporal progression of the player as the app is used. - Score data represents the summary achievements of players.</p>"},{"location":"GameDev/Modules/Logging/#history-data","title":"History data","text":"<p>Four types of history data are supported: - Generic data on application usage (LogInfoData) - Data on learning achievements by the player (LogLearnData) - Data on daily mood levels of the player (LogMoodData) - Data on play-related measurements logged by MiniGames (LogPlayData)</p> <p>Each type follows a specific path in the logging system.</p>"},{"location":"GameDev/Modules/Logging/#mood-logging","title":"Mood logging","text":"<p>Mood logging is performed in the Mood scene. The scene obtains from the player an integer value between AppConfig.minMoodValue and AppConfig.maxMoodValue. This value is then passed to LogAI.LogMood(int mood), which inserts it as a new LogMoodData instance inside the database, with a timestamp.</p>"},{"location":"GameDev/Modules/Logging/#info-logging","title":"Info logging","text":"<p>Info logging is performed whenever a specific InfoEvent is encountered. Calls to LogInfo are scattered throughout the core application. Whenever logging should be performed, a call to LogManager.LogInfo(InfoEvent infoEvent, string parametersString = \"\") is performed, with additional optional string parameters. The LogManager then routes the call to LogAI.LogInfo(), which inserts the event as a new LogInfoData instance inside the database, with a timestamp.</p>"},{"location":"GameDev/Modules/Logging/#play-logging","title":"Play logging","text":"<p>Play data is defined by the class LogPlayData and represents skill-related measurements logged during play during MiniGames.</p> <p>The logging is a two-phases procedure. As a first phase, the MiniGame gathers measurements whenever it detects that a play action has been performed. This can happen anytime while playing the MiniGame.</p> <p>This is achieved through a call to OnGameplaySkillAction(PlaySkill _ability, float _score) by the MiniGame code. This will create a PlayResultParameters instance.</p> <p>The MiniGame is responsible fo deciding what skill the action belongs to (thorugh the PlaySkill enumerator) and what value to assign to the action. Note that values on skill measurements of different MiniGames have no relation to each other and should only be used to compare different sessions of the same MiniGame</p> <p>PlayResultParameters instances are buffered by the MinigameLogManager during play. As the MiniGame ends, the MinigameLogManager collects the buffered instances and flushes them to the LogManager.</p> <p>The LogManager then routes the call to LogAI.LogPlay(), which inserts the list of values inside the database as new instances of LogPlayData, with a timestamp.</p> <p>This could be, as an example, the reaction time when selecting the correct answer, or the accuracy of movement for a player-controlled character.</p> <p><code>@todo: PlaySkill</code></p>"},{"location":"GameDev/Modules/Logging/#learning-logging","title":"Learning logging","text":"<p>Learning data is defined by the class LogLearnData and represents the learning achievements of the player regarding a specific vocabulary content (letter, word, etc.), hereby referred to as Learning Item for ease of discussion.</p> <p>These measurements are very important for the teaching goals, so the system is designed to help MiniGames in standardizing their measurements.</p> <p>Basically, the MiniGame collects data on the number of correct and wrong answers related to a given learning content instance, and a summary success value is retrieved from these numbers. The following text explains the process in detail.</p> <p>The logging is a two-phases procedure. As a first phase, the MiniGame gathers measurements whenever it detects that a learning action has been completed. This can happen anytime while playing the MiniGame and is related to a specific Learning Item. The MiniGame code may call5 <code>MinigameLogManager.OnAnswer(ILivingLetterData _data, bool _isPositiveResult)</code>, determining whether an interaction with a specific learning content instance (represented by the ILivingLetterData reference) is to be considered positive or negative. This will create a ILivingLetterAnswerData instance.</p> <p>ILivingLetterAnswerData instances are buffered by the MinigameLogManager during play. As the MiniGame ends, the MinigameLogManager collects the buffered instances and creates a LearnResultParameters instance for each Learning Item found in the buffered answers, which represents a summary performance value for that Datum.</p> <p>A list of LearnResultParameters instances is thus created, which are then flushed to the LogManager.</p> <p>The LogManager then routes the call to LogAI.LogLearn(). The LogAI will then retrieved the MiniGameLearnRules for that specific MiniGame, a collection of parameters used to define how the obtained values should be interpreted .</p> <p>The MiniGameLearnRules define how to convert the correct/wrong measurements to a summary [-1,1] grade value that can be later used to compare the current performance to other play sessions for the same MiniGame or of other MiniGames.</p> <p>MiniGameLearnRules can be parametrized through its fields based on the MiniGame's nature: - VoteLogic voteLogic defines the underlying logic for how to interpet the number of correct and wrong results to determine the outcome of a single MiniGame related to a specific data content. - float logicParameter parameterizes the vote logic. For example, in case of VoteLogic.Threshold, this is the threshold value. - float minigameVoteSkewOffset is used to offset all grade values if a MiniGame is found to not correctly represent the correct outcome. - float minigameImportanceWeight is multiplied to the final grade to give more or less importance to the MiniGame as a learning tool.</p> <p>After a grade is obtained for each Learning Item found in the play session, the LogAI inserts the results of values inside the database as new instances of LogLearnData, with a timestamp. At this time, the overall learning score for the Learning Item is also updated using a moving average to reflect its current state.</p> <p>As an example, a MiniGame may show a specific letter of the alphabet five times during play, each time requiring the player to recognize the letter. If the player recognizes the letter three out of the five times it is shown, the MinigameLogManager registers a value of 3 correct answers and 2 wrong answers for that specific letter.</p> <p>If the MiniGame learning rules define that the correct-to-wrong ratio should be considered as a threshold, and that at least 50% of answers must be correct, the final grade for that play session will be 1 (3 out of 5).</p>"},{"location":"GameDev/Modules/Logging/#score-data","title":"Score data","text":"<p>In addition to history data logging, the Logging System also supports logging of overall score values for most of the content found in the game. This score value is used to represent the current learning proficiency of the player and is also used by the Teacher System to control the learning progression.</p> <p>In particular, the system logs: 1) Current learning score value for Letters, Words, Phrases inside a <code>VocabularyScoreData</code> instance. This is a value in the <code>[-1,1]</code> range and represents a moving average of past learning scores for that learning item. A score update is performed at the end of each MiniGame. See the above discussion on Learning logging for further details.</p> <p>2) MiniGame-related score levels for MiniGames, PlaySessions, LearningBlocks inside a JourneyScoreData instance. This is a value in the <code>[1,3]</code> range and represents the maximum score achieved for that item. A score update is performed at the end of each MiniGame, play session, or learning block respectively.</p> <p>This happens at different times and in different ways: - For Minigames, the score is saved at the end of the MiniGame itself, through a call to <code>MiniGame.EndGame(int stars, int score)</code>, subsequently to <code>MinigameLogManager.OnMiniGameResult(...)</code>,  <code>LogMinigameScore.LogMinigameScore(...)</code>, and finally <code>LogAI.LogMiniGameScore(...)</code>. - For Play Sessions, the score is saved at the end of the play session, i.e. when the PlaySessionResult scene is accessed. This is performed in <code>PlaySessionResultManager.Start()</code>, which calls <code>LogManager.LogPlaySessionScore(...)</code> and finally <code>LogAI.LogPlaySessionScore(...)</code>. - For Learning Blocks, @TODO: THIS IS NOT DEFINED!!</p> <p>To generate the score values, the LogAI implements a few utility methods that help in updating the score values kept in the database using the correct logic:</p> <ul> <li><code>UpdateScoreDataWithMaximum()</code> updates the score value by keeping only the maximum value between the current and the new one.</li> <li><code>UpdateScoreDataWithMovingAverage()</code> updates the score value by performing a moving average on the score value.</li> </ul>"},{"location":"GameDev/Modules/Logging/#refactoring-notes","title":"Refactoring Notes","text":"<ul> <li>LogAI and LogManager are a bit redundant, could be merged.</li> <li>LogAI could be separated from the teacher.</li> <li>Better nomenclature in general is needed</li> </ul>"},{"location":"GameDev/Modules/MiniGame/","title":"Antura MiniGames Interface","text":"<ul> <li>TOC</li> </ul> <p>In this document, we describe the programming interface that is used by all the MiniGames in the Antura project.</p> <p>The purpose of the interface is to expose to MiniGames a unified and simplified way to access core functionalities, and to define how MiniGames are launched and configured, including the dataflow from the content (e.g. question sets) database towards each MiniGame.</p>"},{"location":"GameDev/Modules/MiniGame/#creating-a-new-minigame-project","title":"Creating a new MiniGame project","text":"<p>All the MiniGames are in the _games directory of the Antura\u2019s Unity project.</p> <p>Instead of starting your own MiniGame from scratch, you can use the provided game template:</p> <ol> <li> <p>Make a copy of the _gametemplate directory (which is in the _games directory);</p> </li> <li> <p>Rename it using the name of your game, e.g. MyNewMasterpiece and put it under the _games directory;</p> </li> <li> <p>In the folder (MyNewMasterpiece) you will find a set of files and subfolders. You must find and rename \"TemplateGame.cs\" and \u201cTemplateConfiguration.cs\u201d into \u201cMyNewMasterpieceGame.cs\u201d and \u201cMyNewMasterpieceConfiguration.cs\u201d, according to the game name you chose;</p> </li> <li> <p>Edit these source files, and change the class names in order to comply with this name change, for example:</p> <ol> <li>Antura.Template namespace should become Antura.MyNewMasterpiece</li> <li>TemplateGame class should become MyNewMasterpieceGame</li> <li>TemplateConfiguration class should become MyNewMasterpieceConfiguration</li> </ol> </li> </ol> <p>note: MiniGame namespaces may change</p>"},{"location":"GameDev/Modules/MiniGame/#making-a-minigame-accessible-from-the-core-application","title":"Making a MiniGame accessible from the core application","text":"<p>A MiniGame does not exist in a vacuum. The core app needs to know of its existance and how to handle it. For this purpose, the following should be performed: - a new entry named MyNewMasterpiece should be added to the <code>MiniGameCode</code> enumerator - the database should be updated to support the new MiniGame. (refer to the Database doc). This requires:   - adding a new MiniGameData entry   - updating the table of PlaySessionData to support the new MiniGame at a given learning block - <code>MiniGameAPI.ConfigureMiniGame()</code> should be updated to provide the correct configuration for the new MiniGame code. - <code>LogAI.GetLearnRules(MiniGameCode code)</code> should be updated to provide the correct logging rules for the new MiniGame.</p> <p>note: the above requirements are bound to change as it couples MiniGames with the core codebase</p>"},{"location":"GameDev/Modules/MiniGame/#game-structure","title":"Game Structure","text":"<p>Here we describe the software architecture that should be followed by your MiniGames. If you copied the MiniGame template, the main classes are already partially implemented to be compliant with such architecture.</p> <p>The MiniGame main class should extend MiniGame class, inside the Antura namespace. Such class is realized using the State Pattern The game is divided in an arbitrary number of states, for example:</p> <ul> <li> <p>IntroductionState, a state in which you present the game e.g. through an animation</p> </li> <li> <p>ProblemState, a state in which you describe which kind of problem the player should solve;</p> </li> <li> <p>PlayState, a state in which you process player\u2019s input and implement the actual game;</p> </li> <li> <p>ResultState, a state in which you show the result (e.g. the score) of the player.</p> </li> </ul> <p>Such list is just an example of what states a game could have, it\u2019s up to the MiniGame developer to understand how many and what kind of states he should implement.</p> <p>At a given time, only one state is active and running. When it\u2019s running, <code>Update()</code> and <code>UpdatePhysics()</code> are called on the state in each frame. UpdatePhysics is the equivalent of Unity3D\u2019s FixedUpdate.</p> <p>All state objects are instanced in the game class, which exposes them as public fields. Each state must have a reference to the MiniGame main class, that you could pass through the constructor.</p> <p>In this way, when you want to switch game state, you can call:</p> <pre><code>game.SetCurrentState(game.NewStateName);\n</code></pre> <p>each time a state transition is completed, the <code>ExitState()</code> method is called on the previous state, and <code>EnterState()</code> is called on the next state.</p> <p>The purpose of these methods is to process things like setting up the scene graphics, resetting timers, showing/hiding panels, etc.</p>"},{"location":"GameDev/Modules/MiniGame/#ending-the-game","title":"Ending the Game","text":"<p>When the game is over, call the method EndGame of the {GameName}Game class:</p> <pre><code>game.EndGame(howMuchStars, gameScore);\n</code></pre> <p><code>howMuchStars</code> should be in the range (0 to 3, included);</p> <p><code>gameScore</code> is game-specific (could be 0, if not defined for that MiniGame)</p> <p>In this way, the game will automatically switch to a special OutcomeState, and show how many stars were obtained, then quit the game.</p>"},{"location":"GameDev/Modules/MiniGame/#game-configuration","title":"Game Configuration","text":"<p>Each game folder should have two main folders for scripts:</p> <p>_scripts</p> <p>_configurationscripts</p> <p>all the game-related scripts, should be placed inside the _scripts folder; _configurationscripts is a service folder used to define game specific classes that help the in communicating with the core codebase.</p> <p>The first requirement of your MiniGame is to have a game configuration script. If you want to see how a configuration class is made, you could just copy it from the template directory.</p> <p>The {GameName}Configuration.cs defines how a MiniGame is configured by the app, and provides the MiniGame some useful interfaces.</p>"},{"location":"GameDev/Modules/MiniGame/#minigame-variations","title":"Minigame Variations","text":"<p>Each MiniGame is created inside its own scene and namespace. Usually, the core application refers to the MiniGame using a 1-to-1 relationship, detailed by the MiniGameCode that represents the MiniGame in the core application.</p> <p>However, sometimes it is useful to have a single scene support multiple instances of MiniGames with slight variations. These MiniGames are called variations. Variations are transparent to the core application (they are considered different MiniGames), but multiple variations point to the same MiniGame scene.</p> <p>Variations are specified in the specific MiniGame's configuration code, if needed.</p>"},{"location":"GameDev/Modules/MiniGame/#game-difficulty","title":"Game Difficulty","text":"<p>The game configuration provides a difficulty level. This difficulty value is provided by the Teacher and can be accessed as:</p> <pre><code>float difficulty = {GameName}Configuration.Instance.Difficulty;\n</code></pre> <p>The game difficulty is expressed as a float in the range [0, 1], meaning 0 : easiest, 1 : hardest.</p> <p>How such difficulty level is implemented must be defined by the MiniGame developer.</p> <p>Possible choices for difficulty can be: - Play speed - Aiming precision - Rhythm - Short-term memory</p> <p>For example, the MiniGame can linearly control the game speed based on difficulty:</p> <pre><code>_speed = normalSpeed - difficulty;\n</code></pre> <p>or, it could have a finite set of parameters configurations, based on difficulty interval:</p> <pre><code>if (difficulty &lt; 0.333f)\n{\n  // configure game for \"easy\"\n}\n\nelse if (difficulty &lt; 0.666f)\n{\n  // configure game for \"medium\"\n}\nelse\n{\n  // configure game for \"hard\"\n}\n</code></pre> <p>In this case, please configure a set of at least 5 different configurations (very easy, easy, medium, hard, very hard).</p> <p>Note that this difficulty must however be related to playskill, not to the learning content. This is because learning difficulty is already taken care of by the Teacher generating suitable Question Packs.</p>"},{"location":"GameDev/Modules/MiniGame/#accessing-core-functionalities","title":"Accessing core functionalities","text":"<p>When you need to access a core feature in any part of your game {GameName}, you do it through the game context:</p> <pre><code>var context = {GameName}Configuration.Instance.Context;\n</code></pre> <p>Such object implements the <code>IGameContext</code> interface.</p> <p>For example, to show the popup widget (that is, a large dialog with some text inside it),</p> <p>you call:</p> <pre><code>context.GetPopupWidget().Show(callback, text, isArabic);\n</code></pre> <p>or, to play the game music:</p> <pre><code>context.GetAudioManager().PlayMusic(Music.MainTheme);\n</code></pre> <p>To have a list of all the possible functionalities that you could use, take a look into the <code>IGameContext</code> source.</p>"},{"location":"GameDev/Modules/MiniGame/#audio-manager","title":"Audio Manager","text":"<p>The Audio Manager provides some simple methods to play in-game audio, for example:</p> <pre><code>IAudioSource PlaySound(Sfx sfx);\nIAudioSource PlayLetterData(ILivingLetterData id);\n</code></pre> <p>It behaves in a similar way to Unity\u2019s AudioSource. It exposes some properties and methods like:</p> <ul> <li>Pitch</li> <li>Volume</li> <li>IsPlaying()</li> <li>Pause() / Stop() / Play()</li> </ul>"},{"location":"GameDev/Modules/MiniGame/#working-with-the-ui","title":"Working with the UI","text":"<p>When you are working on your MiniGame, you do not need to know what prefab are used for the UI or how it is implemented. The game context <code>IGameContext</code> will provide you a set of interfaces to widgets that you can call from your game code.</p> <p>For example:</p> <pre><code>ISubtitlesWidget GetSubtitleWidget();\nIStarsWidget GetStarsWidget();\nIPopupWidget GetPopupWidget();\nICheckmarkWidget GetCheckmarkWidget();\n</code></pre>"},{"location":"GameDev/Modules/MiniGame/#retrieving-dictionary-content-from-core","title":"Retrieving dictionary content from Core","text":"<p>Usually, a MiniGame needs vocabulary content to be passed directly from the core code. For instance, some MiniGames need a set of words, that are chosen by the core based on the current game world, or depending on past play history.</p> <p>Such content is passed to the game using the {GameName}Configuration.cs class by core programmers to MiniGames programmers, through a <code>QuestionProvider</code> interface.</p> <p>The <code>IQuestionProvider</code> interface exposes the following methods:</p> <ul> <li><code>IQuestionPack GetNextQuestion();</code></li> <li><code>string GetDescription();</code></li> </ul> <p>Its purpose is to provide a stream of objects that implements the interface <code>IQuestionPack</code>, a very general abstraction for a learning question which includes letters, words and images as fundamental parts.</p> <p>What is returned as <code>IQuestionPack</code>, will define a package containing <code>ILivingLetterData</code> instances structured as:</p> <ul> <li>a set of questions;</li> <li>a set of wrong answers;</li> <li>a set of correct answers;</li> </ul> <p>All data implements the <code>ILivingLetterData</code> interface and can thus be displayed by a Living Letter. The data can be one of the following:</p> <ul> <li>LL_LetterData contains a Db.LetterData in text form (a single letter)</li> <li>LL_WordData contains a Db.WordData in text form</li> <li>LL_ImageData contains a Db.WordData in image form (a drawing or picture)</li> <li>LL_PhraseData contains a Db.PhraseData in text form</li> </ul> <p>What follows is a list of possible examples:</p> <ul> <li> <p>The game shows a word, you must select only the letters which are part of that word</p> </li> <li> <p>The question is the word;</p> </li> <li>The correct answers are the set of letters which constitutes the word;</li> <li> <p>The wrong answers are a set of random letters not included in the correct set;</p> </li> <li> <p>The game shows a image, you must select the word W representing that image</p> </li> <li> <p>The question is the image</p> </li> <li>The correct answers is a set with only one element, that\u2019s the word W</li> <li> <p>The wrong answers is a set of random words, different from W</p> </li> <li> <p>The game shows a letter with its dots/signs hidden, the player hear its sound and should understand which is the correct sign that should be placed on the letter.</p> </li> <li> <p>The question is the letter (the game should understand how to hide its signs/dots)</p> </li> <li>The correct answers is the set made just by the correct sign/dot</li> <li>The wrong answers are all the other possible signs/dots</li> </ul>"},{"location":"GameDev/Modules/MiniGame/#question-builder","title":"Question Builder","text":"<p>Each MiniGame (or MiniGame variation) requires question packs in different forms and this is defined by implementing the method <code>SetupBuilder()</code> inside the Game Configuration, which returns an object implementing the <code>IQuestionBuilder</code> interface.</p> <p>The IQuestionBuilder defines the learning rules and requirements for the current MiniGame variation and must be correctly setup and configured. The Question Builder will generate the correct Question Packs for a given MiniGame instance.</p> <p>The MiniGame developer can choose from a set of question builders that the Teacher can support. Refer to the Teacher documentation for further details.</p>"},{"location":"GameDev/Modules/MiniGame/#generating-content-for-test-purposes","title":"Generating content for test purposes","text":"<p>When developing a MiniGame, test dictionary data, like letters or words, is needed to test the gameplay. To do so, just define a default Question Provider in your Game Configuration class as a custom provider, in the Game Configuration constructor.</p> <p>For example:</p> <pre><code>private {GameName}Configuration()\n{\n  Questions = new MyQuestionProvider();\n  Context = new SampleGameContext();\n  Difficulty = 0.0f;\n}\n</code></pre> <p>Then, implement your question provider by generating (ILivingLetterData) using:</p> <p><pre><code>var newWord = AppManager.I.Teacher.GetRandomTestWordDataLL()\nvar newLetter = AppManager.I.Teacher.GetRandomTestLetterLL();\n</code></pre> @todo: remove references to the teacher.</p> <p>You can also decompose a word in letters: <pre><code>var letters = ArabicAlphabetHelper.LetterDataListFromWord(newWord.Data.Arabic, AppManager.I.Letters)\n</code></pre> @todo: remove references to the arabic language.</p> <p>Or instead get all Letters/Words/Phrases:</p> <pre><code>var letters = AppManager.I.DB.GetAllLetterData();\nvar words = AppManager.I.DB.GetAllWordData();\nvar phrases = AppManager.I.DB.GetAllPhraseData();\n</code></pre> <p>The default Question Provider is used when you launch the game's scene directly. Note that when playing the game through the core application, the Question Provider will be the one defined by the core system to provide meaningful learning data as selected by the Teacher. Make sure that the test Question Provider content matches real content, otherwise your game may not work when launched through the core application.</p>"},{"location":"GameDev/Modules/MiniGame/#using-the-living-letter-prefab","title":"Using the Living Letter prefab","text":"<p>see Antura and Living Letters doc</p>"},{"location":"GameDev/Modules/MiniGame/#using-the-antura-prefab","title":"Using the Antura prefab","text":"<p>see Antura and Living Letters doc</p>"},{"location":"GameDev/Modules/MiniGame/#adding-environment-assets","title":"Adding Environment Assets","text":"<p>Environment graphics, like trees, are selected in the scene in order to match the current world of the MiniGame (there are 6 worlds). To do so, you must use the following auto-switching component: AutoWorldPrefab.</p> <ul> <li>Create an empy game object</li> <li>Add the \"AutoWorldPrefab\" component on it</li> <li>Select the Prefab Set, using the inspector</li> <li>In the assets tab you will find a list of possible assets, e.g.</li> <li>Tree1</li> <li>Tree2</li> <li> <p>Foreground1</p> </li> <li> <p>From the \"Test World\" drop-down in the inspector you can preview how the piece will look like when instanced in each world</p> </li> <li> <p>You can scale the gameobject you created; the scale will be applied to any world prefab is instanced;</p> </li> <li> <p>WARNING: the AutoWorldPrefab component will delete any gameobject that is child of the gameobject it is attached; so, be careful when you add the component to an existing gameobject (you cannot undo).</p> </li> </ul> <p>Another requisite of each MiniGame scene is that the camera that will render your environment has the following scripts:</p> <ul> <li> <p>CameraFog (if the scene must have fog)</p> </li> <li> <p>AutoWorldCameraColor, that will change the camera background color and the fog color in CameraFog, according to the current world</p> </li> </ul> <p>The AutoWorldCameraColor, as in AutoWorldPrefab, needs that a field is configured by inspector. The name of the field is Backgroung Color Set, and currently you will find just an asset called \"CameraColors\" to be selected.</p>"},{"location":"GameDev/Modules/MiniGame/#refactoring-notes","title":"Refactoring Notes","text":"<ul> <li>variations are not actually enforced by the codebase, but it would be a good idea to make all games use them, as currently the core app reasons in terms of 'MiniGameCode', but a MiniGame is actually identified by the 'game scene' and the 'variation'</li> </ul>"},{"location":"GameDev/Modules/PlayerProfile/","title":"Player Profile","text":"<ul> <li>TOC</li> </ul> <p>A Player Profile contains data on a given player, allowing multiple players to use the application and to keep updates on their progression.</p>"},{"location":"GameDev/Modules/PlayerProfile/#contents","title":"Contents","text":"<p>A Player Profile contains the following data:</p> <ul> <li>Profile information</li> <li>Id: unique Id assigned to the player.</li> <li>Age: age of the player.</li> <li>Name: player name.</li> <li>AvatarId: chosen avatar image Id.</li> <li>Journey progression state</li> <li>ProfileCompletion: a value that defines the state of the profile in respect to tutorial scenes.</li> <li>CurrentJourneyPosition: the current selected position in the map journey.</li> <li>MaxJourneyPosition: the maximum reached position in the map journey.</li> <li>Rewards state</li> <li>TotalNumberOfBones: number of bones collected.</li> <li>CurrentAnturaCustomizations: selected customization for Antura.</li> </ul> <p>Note that additional progression data is also contained in the runtime database (see Database).</p> <p>Note that each profile is assigned an unique Id. This Id is used for:</p> <ul> <li>selecting and identifying the player profile by the Player Profile Manager</li> <li>identifying the database assigned to the player (see Database)</li> </ul>"},{"location":"GameDev/Modules/PlayerProfile/#serialization","title":"Serialization","text":"<p>All data related to the Player Profile is serialized and saved inside the dynamic database. Refer to the Database.</p>"},{"location":"GameDev/Modules/PlayerProfile/#creation-deletion","title":"Creation &amp; Deletion","text":"<p>The Player Profile Manager handles creation, selection, and deletion of player profiles. The system is designed to support a maximum number of players, defined as <code>PlayerProfileManager.MaxNumberOfPlayerProfiles</code>.</p> <p>A list of existing player profiles can be retrieved from the <code>AppManager.GameSettings.AvailablePlayers</code>.</p> <p>Whenever a Player Profile is created, an exclusive Avatar Id is also selected, which represents the avatar image assigned to that profile.</p> <p><code>PlayerProfileManager.CurrentPlayer</code> holds the current player profile. <code>AppManager.I.GameSettings.LastActivePlayerId</code> contains the Id of the profile last accessed through the application.</p> <p>At runtime, creation, deletion, and selection of player profiles is performed in the Home (<code>_Start</code>) scene through the Profile Selector.</p>"},{"location":"GameDev/Modules/PlayerProfile/#refactoring-notes","title":"Refactoring Notes","text":"<ul> <li>Mood and PlaySkill values in PlayerProfile are not used. Should be removed.</li> </ul>"},{"location":"GameDev/Modules/ProjectStructure/","title":"Project Structure","text":"<ul> <li>TOC</li> </ul> <p>This document describes the organization of the project folders.</p>"},{"location":"GameDev/Modules/ProjectStructure/#folders","title":"Folders","text":"<p>The project is separated into 4 main folders:</p> <ul> <li><code>_app</code> contains all assets and scripts related to the general application. Under <code>_scripts</code>, the code for each of the app's subsystems is in its own folder.</li> <li><code>_games</code> contains all assets and scripts related to the MiniGames.</li> <li>Each MiniGame has its own sub-folder, with the game name as the folder name.</li> <li><code>_gametemplate</code> contains a template for creating a new MiniGame from scratch.</li> <li><code>_manage</code> contains scenes useful for previewing and/or manage data.</li> <li><code>_tests</code> contains scenes and scripts for internal testings.</li> </ul> <p>Other folders have special purposes:</p> <ul> <li><code>Plugins</code> contains device specific plugins.</li> <li><code>Resources</code> contains settings and data that is loaded at runtime.</li> <li><code>Standard Assets</code> contains third party plugins and code.</li> </ul>"},{"location":"GameDev/Modules/Shaders/","title":"Shaders","text":""},{"location":"GameDev/Modules/Shaders/#general","title":"General","text":"<p>The following are simple high performance shaders created for environment art (such as trees, houses), and Antura's customization pieces.</p> <ul> <li>Diffuse.shader - Opaque, Lambert lighting, Colored, single texture<ul> <li>Sample: Letters Emoticons</li> </ul> </li> <li>DiffuseJustColor.shader - Opaque, Lambert lighting, Colored, no texture<ul> <li>Sample: quite every environment object (e.g. mountains, trees)</li> </ul> </li> <li>Specular.shader - Opaque, BlinnPhong lighting, Colored, single texture<ul> <li>Sample: Living Letters</li> </ul> </li> <li>SpecularDual.shader - As Specular, but renders both sides<ul> <li>Sample: Reward Glass Punk</li> </ul> </li> <li>SpecularJustColor.shader - Opaque, BlinnPhong lighting, Colored, no texture<ul> <li>Sample: Clouds in Tobogan</li> </ul> </li> <li>Transparent.shader - Very simple unlit transparent</li> <li>TransparentBothSides.shader - As Transparent, but renders both sides<ul> <li>Sample: Reward Candy Stick, Reward Glass Punk</li> </ul> </li> </ul>"},{"location":"GameDev/Modules/Shaders/#antura","title":"Antura","text":"<ul> <li>AnturaDog.shader - The 1st material used by Antura's model. It allows us to change the hue of Antura's fabric without using different textures; it also provide a simplified lighting model compared to the Standard shader, in order to support mobile platforms.</li> <li>AnturaDecals.shader - The 2nd material used by Antura's model. It allows decals (e.g. the smile patch on Antura's back) and body to change color without the need of multiple textures and independently of Antura's fabric.</li> </ul>"},{"location":"GameDev/Modules/Shaders/#image-effects","title":"Image Effects","text":"<ul> <li> <p>MobileBlur.shader - used by ReadingGame to blur the text behind the lens; though this is known to be a low performance effect on mobile, it is not applied for each frame. On the contrary, the image effect is rendered once each time the text changes.</p> </li> <li> <p>VignettingSimpleShader.shader - used in each game scene, it simulates the vignetting effect by just rendering a fullscreen quad in which pixels that are closer to the center of the screen are rendered with higher transparency than the others. It does not read from the framebuffer, so its render weight is roughly the same of an unlit semi-transparent quad without any texture. It also provide a way to create fade in/fade out effects.</p> </li> </ul>"},{"location":"GameDev/Modules/Shaders/#minigames","title":"Minigames","text":""},{"location":"GameDev/Modules/Shaders/#readinggamealphabet-song","title":"ReadingGame/Alphabet Song","text":"<ul> <li>BlurredPaste.shader - used to blit the blurred text on the screen</li> <li>MagnifyingGlass.shader - used to implement the magnifying glass effect</li> <li>TreeSlicesSprite.shader - used by the back white sprite to adapt its size to the length of the text</li> <li>GlassShines.shader - used by the sunshine effect, which is visible when the magnifying glass is positioned on the correct part of the song.</li> </ul>"},{"location":"GameDev/Modules/Shaders/#tobogan","title":"Tobogan","text":"<ul> <li>MeterDot.shader - This shader is used to render the red dashed line which measures the tower's height.</li> <li>EnlargingTube.shader - This shader is used to add an opening/closing animation to the pipes.</li> <li>TransparentColor.shader - Used by pipes' placeholders. It renders an unlit semi-transparent mesh.</li> </ul>"},{"location":"GameDev/Modules/Shaders/#eggmixed-letters","title":"Egg/Mixed Letters","text":"<ul> <li>MobileParticleAdd_Alpha8.shader - Used by the particles system \"Egg_vfx_particle_win\" (the shiny particles behind the living letter)</li> </ul>"},{"location":"GameDev/Modules/Shaders/#hide-and-sick","title":"Hide and Sick","text":"<ul> <li>TransparentMasker.shader - This shader is used by the floor material (light stage).</li> </ul>"},{"location":"GameDev/Modules/Shaders/#sick-letters","title":"Sick Letters","text":"<ul> <li>Antura/Glass.shader - Used for the glass</li> </ul>"},{"location":"GameDev/Modules/Shaders/#textmesh-pro","title":"TextMesh Pro","text":"<p>The following list includes the custom shaders accompanying the TextMesh Pro plug-in:</p> <ul> <li>TMP_Bitmap.shader</li> <li>TMP_Bitmap-Mobile.shader</li> <li>TMP_SDF.shader</li> <li>TMP_SDF Overlay.shader</li> <li>TMP_SDF-Mobile.shader</li> <li>TMP_SDF-Mobile Masking.shader</li> <li>TMP_SDF-Mobile Overlay.shader</li> <li>TMP_SDF-Surface.shader</li> <li>TMP_SDF-Surface-Mobile.shader</li> <li>TMP_SDF_SL.shader</li> <li>TMP_Sprite.shader</li> </ul>"},{"location":"GameDev/Modules/Shaders/#misc","title":"Misc","text":"<ul> <li>Confetti.shader - Used in Ending Scene by colored confetti</li> <li>Glitter.shader - Used in Ending Scene by shining glitters</li> </ul>"},{"location":"GameDev/Modules/Teacher/","title":"Teacher AI System","text":"<ul> <li>TOC</li> </ul> <p>The Teacher AI is the System that controls the learning progression of the player based on:</p> <ul> <li>Player journey progression</li> <li>Player learning performance</li> <li>Expert configuration</li> <li>MiniGame support requirements</li> </ul> <p>It is designed to be agnostic to the specific language and highly configurable in respect to MiniGames.</p> <p>In this document, the Teacher is a shorthand for the Teacher AI System. The person or group of persons that configure the Teacher is instead referred to singularly as the Expert. All code related to the Teacher can be found under the Antura.Teacher namespace.</p>"},{"location":"GameDev/Modules/Teacher/#classes","title":"Classes","text":"<p>The Teacher is composed of several interrelated classes, joined by a composition relationship.</p> <p><code>Antura.TeacherAI</code> works as the entry point to the teacher functions. All the Teacher functionalities should be accessed through a singleton instance of TeacherAI: <code>AppManager.I.Teacher</code>. Engines and Helpers are sub-elements of the Teacher and reside in their own classes.</p>"},{"location":"GameDev/Modules/Teacher/#engines","title":"Engines","text":"<p>Engine classes are used to implement the expert system for a specific role:</p> <ul> <li>Difficulty Selection AI selects the difficulty to use for a given MiniGame</li> <li>MiniGame Selection AI selects what MiniGames to play during a given PlaySession</li> <li>Vocabulary Selection AI selects what vocabulary data a MiniGame should use</li> <li>Log AI handles the logic behind the logging of data at runtime</li> </ul>"},{"location":"GameDev/Modules/Teacher/#helpers","title":"Helpers","text":"<p>Helper classes expose interfaces for easier interaction with the Teacher and the Database:</p> <ul> <li>Score Helper for storing, retrieving, and updating score values related to the learning progression.</li> <li>Journey Helper for retrieving and comparing progression data from the database.</li> <li>Vocabulary Helper for retrieving and comparing vocabulary data.</li> </ul>"},{"location":"GameDev/Modules/Teacher/#general-configuration","title":"General Configuration","text":"<p>In general, the Teacher can be configured by the Expert through two main mechanisms:</p> <ul> <li>By editing the database contents through an Excel file / Google Sheet, the Teacher can define the contents of Play Sessions, Learning Blocks, and the whole vocabulary.</li> <li>By editing a set of weights, the Expert can further configure the logic inside the Teacher. This is implemented as constants in the ConfigAI static class.</li> </ul>"},{"location":"GameDev/Modules/Teacher/#difficulty-selection-engine","title":"Difficulty Selection Engine","text":"<p>Minigames can be configured to be more or less difficult (i.e. challanging) for the player. This Engine is in charge of selecting what difficulty to use for a given MiniGame session. Difficulty is defined as a float value in the range [0,1], easiest to hardest.</p> <p>Note that the difficulty value is related only to the specific MiniGame and is implemented in the MiniGame's logic, following the above general rule. See the MiniGame documentation for further details.</p> <p>The difficulty value logic depends on several variables:</p> <ul> <li>The current performance of the player for the given MiniGame. The game gets more difficult as the player improves his skills. The current performance starts from 0 and may rise up to 1. Failing a MiniGame (score 0) diminishes the performance. Completing a MiniGame with a score of 2 or more increases it. Completing it with a score of 1 is ininfluent (steady performance).</li> <li>CURRENTLY NOT USED The age of the player. The game will be more difficult for older players.</li> <li>CURRENTLY NOT USED The current JourneyPosition of the player. The game is more difficult at advanced stages.</li> </ul> <p>The weight contributions of the different variables can be statically configured in ConfigAI.</p> <p>Note that whenever a MiniGame is encountered for the first time its difficulty is forced to be zero (0), so to work as a tutorial session.</p> <p>The Difficulty Selection Engine is accessed through <code>TeacherAI.GetCurrentDifficulty(MiniGameCode miniGameCode)</code>. This is called by the MiniGame Launcher before loading a specific MiniGame and assigned to the MiniGame's Game Configuration class.</p>"},{"location":"GameDev/Modules/Teacher/#minigame-selection-engine","title":"MiniGame Selection Engine","text":"<p>This Engine is in charge of selecting what MiniGames to use for a given play session. The Teacher may call this Engine with the number of requested MiniGames as a parameter. The logic for selection depends on two main mechanism:</p> <p>1) filtering based on Play Sessions 2) weighing based on past performance.</p>"},{"location":"GameDev/Modules/Teacher/#filtering-step","title":"Filtering step","text":"<p>As a first step, the Play Session Data table in the database defines what MiniGames can be selected for a given Play Session. The Teacher makes sure to use this information when filtering MiniGames. Minigames which have a zero value (or no value) in the Play Session table are filtered out.</p> <p>In case of fixed sequence (PlaySessionDataOrder.Sequence set in the Play Session Data table), the numbers placed in the Play Session for each MiniGame are used to define the sequence. This is used for the initial Play Sessions to force an order on MiniGames.</p>"},{"location":"GameDev/Modules/Teacher/#weighted-selection-step","title":"Weighted selection step","text":"<p>The second step performs a weighing over the available MiniGames, based on several variables:</p> <ul> <li>Manual weights: in case of random sequence (<code>PlaySessionDataOrder.Random</code> set in the Play Session Data table), the numbers placed in the Play Session for each MiniGame are used as weights. This produces a [0,1] value for each available MiniGame.</li> <li>Recent play weight: the number of days since the last time the MiniGame was played is taken into account to produce a value in the [0,1] range for each available MiniGame, favouring MiniGames that have not been played for a while.</li> </ul> <p>The resulting weights are added (each with a configurable contribution weight) and used in a round of roulette selection. The contribution weights, as well as the number of days for the recent play logic, can be configured in ConfigAI.</p>"},{"location":"GameDev/Modules/Teacher/#code","title":"Code","text":"<p>The MiniGame Selection Engine is accessed through the method <code>PerformSelection(string playSessionId, int numberToSelect)</code> that returns a <code>List&lt;MiniGameData&gt;</code> containing the selected MiniGames.</p> <p>Whenever a new play session start, this is called by the Teacher through <code>TeacherAI.InitialiseCurrentPlaySession()</code>.</p>"},{"location":"GameDev/Modules/Teacher/#vocabulary-selection-engine","title":"Vocabulary Selection Engine","text":"<p>This Engine is in charge of selecting what vocabulary data a MiniGame should use in a given play session, based on player progression, player performance, and the MiniGame's requirements. The selected vocabulary data will be used as the focus for each MiniGame session (i.e. as questions to be posed, or as correct answers to find).</p> <p>The logic for selection depends on three main mechanism: two filtering steps and a weighted selection step.</p>"},{"location":"GameDev/Modules/Teacher/#1-filtering-step","title":"1) Filtering STEP","text":"<p>The first step is needed to make sure that all data to be selected matches the player's knowledge. The step filters all vocabulary data in the database based on:</p>"},{"location":"GameDev/Modules/Teacher/#1-minigame-requirements","title":"1. Minigame requirements","text":"<p>The selected MiniGame usually works with a subset of the whole data. For example, many MiniGames work with letters, but not with words. rules and requirements may. This is performed through a configured QuestionBuilder (refer to the section below).</p>"},{"location":"GameDev/Modules/Teacher/#2-data-variability","title":"2. Data Variability","text":"<p>Previously selected data for the same MiniGame instance may be filtered out to increase variability. The focus of this filter is to make sure that data is not repeated too much, avoiding repeating the same data in succession in the same play sessions. This is performed through two phases. An intra-pack phase avoids repeating the same data in the same question pack, if possible.This can be configured per MiniGame with the SelectionSeverity parameters. An inter-pack phase avoids repeating the same data in the same list of question packs, if possible. This can be configured per MiniGame with the PackListHistory parameters.</p>"},{"location":"GameDev/Modules/Teacher/#3-journey-progression","title":"3. Journey progression","text":"<p>The current journey progression (i.e. the position in the Stage/LearningBlock/PlaySession map) is taken into account, filtering out data that is too difficult for the current learning progression (i.e. it is not available up to the current Learning Block).</p>"},{"location":"GameDev/Modules/Teacher/#2-journey-priority-step","title":"2) Journey priority STEP","text":"<p>After the first step, we can be sure that all selected data can be played by the selected MiniGame and is suitable to the player's knowledge. The Teacher performs a second step by weighing vocabulary entries based on the learning block focus. This is used, if possible, as a strict filter. Data that belongs to the current Learning Block is given large priority, making sure that all data of the learning block is used if available. If not enough data is available for the current learning block, data from the previous play sessions (going back in the progression) is selected and given a weight based on linear distance from the current learning block.</p>"},{"location":"GameDev/Modules/Teacher/#3-weighted-selection-step","title":"3) Weighted selection STEP","text":"<p>As a final step, the Teacher selects the actual vocabulary entries using weighted selection, with weights based on:</p> <ul> <li>Learning Score: Lower scores for a vocabulary entry (as retrieved from VocabularyScoreData instances) will prompt a given data entry to appear more.</li> <li>Recent Play: The time since the player last saw a specific vocabulary entry. Entries that have not appeared for a while are preferred.</li> <li>Learning Block Focus: Learning blocks closer to the current one receive a higher weight. (see the previous step)</li> </ul> <p>The final weight for each vocabulary entry is computed as a weighted sum of these variable. Each variable is assigned a contribution weight, which can be manually configured in ConfigAI. If a vocabulary entry has a too lower weight, a minimum weight can however be assigned, defined as <code>ConfigAI.data_minimumTotalWeight</code>.</p>"},{"location":"GameDev/Modules/Teacher/#4-optional-reordering","title":"4) Optional reordering","text":"<p>At last, after data has been selected, an optional ordering may be enforced. This can be useful to make sure that all the vocabulary data of a given MiniGame play session appear during play in order of difficulty. The ordering is performed on the intrinsic difficulty of each vocabulary data entry.</p>"},{"location":"GameDev/Modules/Teacher/#wrong-answers","title":"Wrong answers","text":"<p>Many MiniGames require vocabulary entries that function as wrong answers, which need not be selected. These entries need not be as strict as the in-focus (i.e. correct) answers, as they are not the primary focus of the MiniGame. However, the logic for selection is similar to the selection of correct data, with the following difference:</p> <p>Loose Journey Progression: Wrong data may be selected also among all data of the current stage, regardless of the reached learning block. This changes the filtering steps so to avoid filtering out all data of the current stage and so to avoid prioritizing the current learning block data.</p> <p>Note that MiniGames may have specific requirements also for wrong answers (see the next section).</p>"},{"location":"GameDev/Modules/Teacher/#minigame-requirements","title":"MiniGame requirements","text":"<p>The Teacher System is designed so that many MiniGames, with various requirements, can be supported through a single interface. A procedure is needed to match what the teacher deems necessary for the current learning progression and what a given MiniGame can support.</p> <p>As an example, the teacher cannot select MiniGames that cannot show colors, if the learning block requires color words to be learned.</p> <p>This is accomplished through two methods:</p> <ul> <li>A journey progression / MiniGame matching is provided to the teacher through the database's PlaySessionData ntries. This is used by the teacher to select MiniGames for a given playsession and make sure that a MiniGame can support at least some of the dictionary content for the learning objectives.</li> <li>Whenever a specific MiniGame is selected, the Teacher is configured to generate vocabulary data that can be supported by the MiniGame. This is handled by the Question Builders</li> </ul>"},{"location":"GameDev/Modules/Teacher/#question-builders","title":"Question Builders","text":"<p>Question Builders define rules and requirements that the teacher should follow when generating Question Packs. A Question Pack contains the dictionary data that the MiniGame should use for its gameplay under the form of a question, a set of correct answers, and a set of wrong answers (refer to the Data Flow documentation). Whenever required by the Teacher, a IQuestionBuilder must be returned by the MiniGame's configuration class. This is performed through <code>IGameConfiguration.SetupBuilder()</code>.</p> <p>A Question Builder thus defines: - the amount of Question Packs that a MiniGame instance can support - the type of dictionary data that the MiniGame wants to work with (Letters, Words, etc.) - The relationship among the different data objects (random words, all letters in a words, etc.)</p> <p>The chosen Question Builder implementation defines what kind of dictionary data (letters, words, etc..) will be included inside the Question Packs. For example, a RandomLettersQuestionBuilder generates packs that contain letters as question and answers, while a CommonLettersInWordBuilder uses letters for its questions and words as the answers.</p> <p>Several Question Builders are available to support common rules, creating packs with the described properties: - <code>AlphabetQuestionBuilder</code> part of the alphabet. - <code>EmptyQuestionBuilder</code> fake packs, it can be used during development when the game is not yet ready to accept questions packs. - <code>LettersByXXXBuilder</code> letters that should be recognized based on some of their properties (this can, for example, be the number, or the type). - <code>**WordsByXXXBuilder**</code> words that should be recognized based on some of their properties (this can, for example, be the number, or the type). - <code>RandomLettersQuestionBuilder</code> random letters. - <code>RandomWordsQuestionBuilder</code> random words. - <code>LettersInWordQuestionBuilder</code> a word and all letters contained in that word. - <code>CommonLettersInWordBuilder</code> some letters and words that share those letters. - <code>WordsInPhraseQuestionBuilder</code> a phrase and all words contained in that phrase.</p> <p>Refer to the API documentation for a complete list of question builders.</p> <p>Note however that a new QuestionBuilder can be created for specific MiniGame, if the need arises.</p>"},{"location":"GameDev/Modules/Teacher/#question-builder-configuration","title":"Question Builder configuration","text":"<p>Question Builders are designed to be flexible, so that MiniGames can safely configure them with their specific requirements. In its <code>SetupBuilder()</code> call, a MiniGame's configuration class may configure the Question Builder by specifying a set of parameters.</p> <p>The parameters are different for each Question Builder, but some common parameters include:</p> <ul> <li><code>nPacks</code>: the number of packs that should be generated using this builder for the MiniGame play session.</li> <li><code>nCorrect</code>: the number of correct answers to generate.</li> <li><code>nWrong</code>: the number of wrong answers to generate.</li> <li><code>parameters</code>: an instance of <code>QuestionBuilderParameters</code> that defines additional common parameters.</li> </ul> <p>A QuestionBuilderParameters defines additional common parameters and includes: - PackListHistory correctChoicesHistory: the logic to follow for correct answers when generating multiple packs (see below). Defaults to RepeatWhenFull. - PackListHistory wrongChoicesHistory: the logic to follow for wrong answers when generating multiple packs (see below). Defaults to RepeatWhenFull. - bool useJourneyForCorrect: whether the dictionary data available for use as correct answers should be limited to what the player has already unlocked. Defaults to true. - bool useJourneyForWrong: whether the dictionary data available for use as wrong answers should be limited to what the player has already unlocked. Defaults to false. - SelectionSeverity correctSeverity: the logic to use when selecting correct answers when data is not enough (see below). Defaults to MayRepeatIfNotEnough. - SelectionSeverity wrongSeverity: the logic to use when selecting wrong answers when data is not enough (see below). Defaults to MayRepeatIfNotEnough. - LetterFilters letterFilters: additional language-specific rules that define if some letters should be left out when performing the selection. Refer to the API for further details. - WordFilters wordFilters: additional language-specific rules that define if some words should be left out when performing the selection. Refer to the API for further details. - PhraseFilters phraseFilters: additional language-specific rules that define if some phrases should be left out when performing the selection. Refer to the API for further details.</p> <p>PackListHistory may take one of the following values: - NoFilter: Multiple packs in the game have no influence one over the other - ForceAllDifferent: Makes sure that multiple packs in a list do not contain the same values - RepeatWhenFull: Try to make sure that multiple packs have not the same values, fallback to NoFilter if we cannot get enough data - SkipPacks: If we cannot find enough data, reduce the number of packs to be generated</p> <p>SelectionSeverity may take one of the following values: - AsManyAsPossible: If possible, the given number of data values is asked for, or less if there are not enough. - AllRequired: The given number of data values is required. Error if it is not reached. - MayRepeatIfNotEnough: May repeat the same values if not enough values are found</p>"},{"location":"GameDev/Modules/Teacher/#question-builder-implementation","title":"Question Builder implementation","text":"<p>Whenever a MiniGame is launched, the Teacher retrieves its <code>IQuestionBuilder</code> through <code>SetupBuilder()</code>, then generates a <code>List&lt;QuestionPacks&gt;</code> through <code>CreateAllQuestionPacks()</code> method.</p> <p><code>CreateAllQuestionPacks()</code> is implemented differently for each Question Builder, but in general it just generatas a sequential list of packs through multiple calls to <code>CreateSingleQuestionPackData()</code>.</p> <p><code>CreateSingleQuestionPackData()</code> defines the actual logic for generating the Question Pack and is thus the core of the Question Builder. This method ends with a call to <code>QuestionPackData.Create(question, correctAnswers, wrongAnswers)</code> which creates the final pack from different sets of <code>IConvertibleToLivingLetterData</code> instances, which define the dictionary data that should be used and for what roles. For the current system, this can be either a LetterData, a WordData, or a PhraseData.</p> <p>The Question Builder will thus generate the question, the correct answers, and the wrong answers using calls to <code>WordSelectionAI.SelectData()</code> and by specifying what data it wants to use through the method's arguments: - <code>System.Func&lt;List&lt;T&gt;&gt; builderSelectionFunction</code> is a delegate that defines what data to work from based on the question builder logic. For example, for the <code>RandomLettersQuestionBuilder</code> this is all the available letters given the current letter filters. This is usually performed through the <code>WordHelper</code> class methods, which help in retrieving dictionary data from the database based on specific rules. - <code>SelectionParameters selectionParams</code> is an internal structure that defines parameters for filtering and selecting learning data based on the MiniGame requirements. This is built from the <code>QuestionBuilderPamaters</code> instance defined above.</p>"},{"location":"GameDev/Modules/Teacher/#refactoring-notes","title":"Refactoring Notes","text":"<ul> <li>Helpers should probably belong to the DB, and not to the teacher.</li> <li>LogAI should be a Helper</li> </ul>"}]}